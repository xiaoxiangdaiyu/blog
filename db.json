{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/bfc/2.png","path":"img/bfc/2.png","modified":1,"renderable":0},{"_id":"source/img/bfc/4.png","path":"img/bfc/4.png","modified":1,"renderable":0},{"_id":"source/img/bfc/1.png","path":"img/bfc/1.png","modified":1,"renderable":0},{"_id":"source/img/bfc/3.png","path":"img/bfc/3.png","modified":1,"renderable":0},{"_id":"source/pwa/asset/sw.jpg","path":"pwa/asset/sw.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/img/jstype/2.png","path":"img/jstype/2.png","modified":1,"renderable":0},{"_id":"source/img/performance/2.png","path":"img/performance/2.png","modified":1,"renderable":0},{"_id":"source/img/performance/1.png","path":"img/performance/1.png","modified":1,"renderable":0},{"_id":"source/img/jstype/1.png","path":"img/jstype/1.png","modified":1,"renderable":0},{"_id":"source/img/jstype/3.png","path":"img/jstype/3.png","modified":1,"renderable":0},{"_id":"source/img/pwa/3.png","path":"img/pwa/3.png","modified":1,"renderable":0},{"_id":"source/img/pwa/4.png","path":"img/pwa/4.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"source/img/pwa/2.png","path":"img/pwa/2.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/img/pwa/1.png","path":"img/pwa/1.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4b9535bae21d63152aed86c5b8a02b94995011fb","modified":1525872947116},{"_id":"source/CNAME","hash":"8962578830ff3908b06d264d46ed7a0c287ebc2e","modified":1513261827463},{"_id":"themes/hexo-theme-next/.git","hash":"3425b125179f900ab9d79c9d7c71331936367a72","modified":1513338593090},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1513338593101},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1513338593101},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1513338593101},{"_id":"themes/hexo-theme-next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1513338593102},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1513338593102},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1513338593102},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1513338593102},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1513338593102},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1513338593103},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1513338593102},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1513338593103},{"_id":"themes/hexo-theme-next/README.md","hash":"aa2fb15ef016074b10755323c99025df506d5ca3","modified":1513338593103},{"_id":"themes/hexo-theme-next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1513338593104},{"_id":"themes/hexo-theme-next/_config.yml","hash":"9c0e58739842fb9b1a401a81a770bbb2634bff36","modified":1513338806000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1513338593104},{"_id":"themes/hexo-theme-next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1513338593120},{"_id":"source/_posts/.DS_Store","hash":"ad930065a1ec3c033d81d9963d25954641e97795","modified":1525872947118},{"_id":"source/_posts/bfc.md","hash":"1a5e2e1e2f40922d04302eec9a7a0c63efa07313","modified":1526346531190},{"_id":"source/_posts/index.md","hash":"15cc52b747f3986742b3a69dc0db2088b390fff9","modified":1513338892000},{"_id":"source/_posts/domevent.md","hash":"ee817893d03d75326bb237838a3d3b77e4dd51d5","modified":1513507497725},{"_id":"source/_posts/jstype.md","hash":"18b1b7b20b3e4db015f528806c81fcf6fbb6e7f5","modified":1527127357620},{"_id":"source/_posts/pwa.md","hash":"2cdfa819224a8b0d4d862f393c92c10f384e0955","modified":1525873725883},{"_id":"source/_posts/performance.md","hash":"74036855e631757b1bb1e7335de93d3f4d037dd0","modified":1525872877107},{"_id":"source/_posts/review.md","hash":"82b69e7b3e6685e28e987cf8d45304ba52d6eed2","modified":1513338908000},{"_id":"source/img/.DS_Store","hash":"f6f803f48ccb074eaabc654af42bfdf607595e3f","modified":1527033731386},{"_id":"source/pwa/.DS_Store","hash":"ae6445475b7895e38454dbb1b2cfd87a156391a9","modified":1525846644674},{"_id":"source/pwa/demo.html","hash":"7e805b18e6116094cd2180d04156ff6e0e34b56c","modified":1525850051892},{"_id":"source/pwa/index.js","hash":"192300dc1d7d5f3d501085e60775528a4d2ea71c","modified":1525851545629},{"_id":"source/pwa/sw1.js","hash":"13af6af10204ff87872fa13e836f87554c998f44","modified":1525857949664},{"_id":"source/pwa/mainfest.json","hash":"3231742038985fbf47796e6100e570242239b108","modified":1525850004750},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1513338593101},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1513338593101},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1513338593101},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1513338593102},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1513338593106},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1513338593106},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1513338593106},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1513338593106},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1513338593106},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1513338593120},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1513338593120},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1513338593120},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1513338593120},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1513338593121},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1513338593208},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1513338593208},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1513338593209},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593146},{"_id":"source/_posts/css/postcss.md","hash":"0191b0790a7ada76777f6b8add267a203e4d9f32","modified":1513952148000},{"_id":"source/_posts/webpack/loader.md","hash":"fb996f7834812b4ffb71c80f03bb51e3101d6b1f","modified":1513343231050},{"_id":"source/_posts/webpack/code-splitting.md","hash":"6bca00c152249bc7bde8bb30b2563dfc4e1b0016","modified":1516942916646},{"_id":"source/_posts/webpack/plugin.md","hash":"bce074830c7163f37f1417b20ba30e4cde58126c","modified":1513343118713},{"_id":"source/_posts/websocket/frame.md","hash":"e830c299edc51c914fb387fc1fe0945687ebd7e0","modified":1513342538416},{"_id":"source/_posts/websocket/node.md","hash":"4dd3bd961e3018e1d0c4907c3dbc5dc3d86e45ea","modified":1513342928688},{"_id":"source/img/bfc/.DS_Store","hash":"764ae0cbe6b3609133570242eaa44dde709424d4","modified":1526348343894},{"_id":"source/img/bfc/2.png","hash":"dcdc1c2294a080b12b25d3d6180a00c9dc1f1046","modified":1526344156626},{"_id":"source/img/bfc/4.png","hash":"e60e1ef6ae9141a6fbe082c0738e2b710dea4f23","modified":1526346131115},{"_id":"source/img/bfc/1.png","hash":"073a5170e8ea6b34853b9c13d4cdcb7f3fc1dc08","modified":1526342460224},{"_id":"source/img/bfc/3.png","hash":"ea2033a704bca3c71c6b2930c922c048f37dda0a","modified":1526344358936},{"_id":"source/img/jstype/.DS_Store","hash":"abb97f3470fe170b390d384b65891a6b22c9157e","modified":1527033973814},{"_id":"source/img/performance/.DS_Store","hash":"1490ae3be2be83b9b87b986b046117deeb25d653","modified":1525671127958},{"_id":"source/img/pwa/.DS_Store","hash":"a6982c6d74a4314dc23b174d704c22b4e84d6c15","modified":1525873103487},{"_id":"source/pwa/asset/sw.jpg","hash":"55965b91726892f738ba56643f2eaeb8af7fd762","modified":1512091422636},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1513338593108},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1513338593108},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1513338593108},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1513338593108},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1513338593109},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1513338593109},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1513338593109},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1513338593118},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1513338593121},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1513338593121},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1513338593121},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1513338593122},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1513338593146},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1513338593147},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1513338593147},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1513338593147},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1513338593147},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1513338593148},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1513338593148},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1513338593148},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1513338593149},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1513338593150},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1513338593149},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1513338593150},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1513338593150},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1513338593151},{"_id":"source/img/jstype/2.png","hash":"08957b47ee972258c8aab3d5e4c9abd49010db26","modified":1527033937425},{"_id":"source/img/performance/2.png","hash":"a7e1421f5df1fcb8203c76d457fb813221aa3e85","modified":1525670122339},{"_id":"source/img/performance/1.png","hash":"2051f0f5801d2e336fc95e0052ecedba7fb08a0f","modified":1525652942082},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593113},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593137},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593145},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593146},{"_id":"source/img/jstype/1.png","hash":"313fa0d1e78fc4fbcf5d7f1e71681a3466f4a81a","modified":1526950884290},{"_id":"source/img/jstype/3.png","hash":"70f96b01ef09e050a5c179f40342c3179eca714d","modified":1526988660375},{"_id":"source/img/pwa/3.png","hash":"cb936733f999e28e9349d189fb3d26b1b6c86929","modified":1525872990332},{"_id":"source/img/pwa/4.png","hash":"ea21e2618ecf07e76d81e24977d4f379bed83b38","modified":1525872994314},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1513338593109},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1513338593118},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1513338593118},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1513338593119},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1513338593137},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1513338593137},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1513338593145},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1513338593145},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1513338593145},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1513338593146},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1513338593160},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1513338593164},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1513338593163},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1513338593164},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1513338593170},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1513338593164},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1513338593171},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1513338593173},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1513338593171},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1513338593173},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1513338593171},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1513338593174},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1513338593174},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1513338593174},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1513338593188},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1513338593190},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1513338593190},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1513338593190},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1513338593191},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1513338593191},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1513338593191},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1513338593193},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1513338593193},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1513338593192},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1513338593193},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1513338593194},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1513338593194},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1513338593194},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1513338593194},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1513338593195},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1513338593195},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1513338593196},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1513338593195},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1513338593197},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1513338593197},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1513338593196},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1513338593196},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1513338593197},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1513338593198},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1513338593199},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1513338593199},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1513338593205},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1513338593205},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1513338593208},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1513338593207},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1513338593152},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1513338593207},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1513338593152},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1513338593153},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1513338593153},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1513338593153},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1513338593154},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1513338593153},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1513338593154},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1513338593155},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1513338593155},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1513338593155},{"_id":"source/img/pwa/2.png","hash":"3d8170ef49e9c7a6eb717abb7e6ff506a8fb0222","modified":1525873067133},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1513338593189},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1513338593118},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1513338593118},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1513338593135},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1513338593135},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1513338593136},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1513338593135},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1513338593136},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1513338593136},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1513338593136},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1513338593139},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1513338593139},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1513338593139},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1513338593139},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1513338593140},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1513338593140},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1513338593140},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1513338593141},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1513338593143},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1513338593143},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1513338593143},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1513338593144},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1513338593144},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1513338593144},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1513338593158},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1513338593159},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1513338593159},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513338593165},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513338593165},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1513338593168},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1513338593169},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1513338593170},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1513338593173},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1513338593172},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1513338593175},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1513338593175},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1513338593176},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1513338593204},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1513338593204},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1513338593154},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1513338593158},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1513338593187},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1513338593187},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1513338593206},{"_id":"source/img/pwa/1.png","hash":"59f1ce1a903ed76b8434af748258d6172da506d1","modified":1525871404714},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1513338593134},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1513338593134},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1513338593134},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1513338593134},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1513338593140},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1513338593141},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1513338593156},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1513338593156},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1513338593156},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1513338593157},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1513338593157},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513338593167},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1513338593167},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1513338593168},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513338593168},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1513338593168},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1513338593178},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1513338593180},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1513338593186},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1513338593163},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1513338593203},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1513338593184},{"_id":"public/pwa/index.js","hash":"192300dc1d7d5f3d501085e60775528a4d2ea71c","modified":1527127370059},{"_id":"public/pwa/sw1.js","hash":"13af6af10204ff87872fa13e836f87554c998f44","modified":1527127370067},{"_id":"public/pwa/mainfest.json","hash":"aa79d65647ea2916fdd4d951e1750385c1148844","modified":1527127370067},{"_id":"public/pwa/demo.html","hash":"caab84add604d24255b30bae0d54d0264fcd5206","modified":1527127370080},{"_id":"public/2017/09/15/review/index.html","hash":"8e903cff55e1228b7ae2bb3a59d4a16aa0c4394f","modified":1527127370080},{"_id":"public/2017/09/14/index/index.html","hash":"494ef1fc74f28de7727cff3e8c47129fec2925a6","modified":1527127370080},{"_id":"public/archives/page/2/index.html","hash":"e9e124bb54939ec12902f6c0963b3abbd9dfe547","modified":1527127370080},{"_id":"public/archives/2017/index.html","hash":"d2484fccd31a8caadfbd30b50b7fc3af9b2e905c","modified":1527127370081},{"_id":"public/archives/2017/09/index.html","hash":"d9585e261f05be6ff2b6b94d55595a3644f582e7","modified":1527127370081},{"_id":"public/archives/2017/10/index.html","hash":"100ebf8f77751ddad01fa2b4ed6844ddd4c43e4e","modified":1527127370081},{"_id":"public/archives/2017/11/index.html","hash":"e29c157bcd350ac635a57857f1202e060267f43a","modified":1527127370081},{"_id":"public/archives/2017/12/index.html","hash":"082441611ae3f0c66e690e604d4910e97996c458","modified":1527127370081},{"_id":"public/archives/2018/index.html","hash":"e58e9944833f0cdae08d8afe2f990611d5635d41","modified":1527127370081},{"_id":"public/archives/2018/01/index.html","hash":"8e7211acf45e248a890fbc454c88b6ba59439ba9","modified":1527127370081},{"_id":"public/archives/2018/05/index.html","hash":"2a1b31ad5e3be51d9f9257779a955763f79a866e","modified":1527127370081},{"_id":"public/tags/webpack/index.html","hash":"a9f84178b1acab8424316a2f3afd8dbeb57b5f54","modified":1527127370081},{"_id":"public/2018/05/23/jstype/index.html","hash":"2f743de4e247ac22ce57b8564e1216c71968eb1a","modified":1527127370081},{"_id":"public/2018/05/15/bfc/index.html","hash":"b0dea074f3233010e8d0808fcdea26b478757621","modified":1527127370081},{"_id":"public/2018/05/09/pwa/index.html","hash":"c1972acabc5741974990ebacce026ee91fa7030c","modified":1527127370081},{"_id":"public/2018/05/07/performance/index.html","hash":"261b28cefdfbc1a2e40c2f45dc691279607aa016","modified":1527127370081},{"_id":"public/2018/01/26/webpack/code-splitting/index.html","hash":"3407152bf907a4efefba3b799dc49c97f4e102bd","modified":1527127370081},{"_id":"public/2017/12/22/css/postcss/index.html","hash":"aa6d97a7b494f1fa4e79e6eb8a776d4d3d2b6ace","modified":1527127370081},{"_id":"public/2017/12/17/domevent/index.html","hash":"cb0e7c6e2b4ad94c49b93d3000a4045d76bef002","modified":1527127370081},{"_id":"public/2017/11/22/websocket/node/index.html","hash":"b0db2a6c2397feaf03d16fd46010f39ab8dc1005","modified":1527127370082},{"_id":"public/2017/11/06/websocket/frame/index.html","hash":"9db1b166e98965343c3273b832f8f2639fec1e81","modified":1527127370082},{"_id":"public/2017/10/23/webpack/plugin/index.html","hash":"e9a81304cf3dae482536cb9c66741648669a245a","modified":1527127370082},{"_id":"public/2017/10/14/webpack/loader/index.html","hash":"329f93d24945aa662828830027221ce816fc9b01","modified":1527127370082},{"_id":"public/archives/index.html","hash":"665685b6afc123f0eb30b28130f1a16991099be9","modified":1527127370082},{"_id":"public/index.html","hash":"4cfd918f4444f4c29763159b7283eef6c67919e1","modified":1527127370082},{"_id":"public/page/2/index.html","hash":"a860067c165c795df38a07d3d9d0ee9efee95a04","modified":1527127370082},{"_id":"public/CNAME","hash":"8962578830ff3908b06d264d46ed7a0c287ebc2e","modified":1527127370187},{"_id":"public/img/bfc/2.png","hash":"dcdc1c2294a080b12b25d3d6180a00c9dc1f1046","modified":1527127370187},{"_id":"public/img/bfc/4.png","hash":"e60e1ef6ae9141a6fbe082c0738e2b710dea4f23","modified":1527127370187},{"_id":"public/img/bfc/1.png","hash":"073a5170e8ea6b34853b9c13d4cdcb7f3fc1dc08","modified":1527127370187},{"_id":"public/img/bfc/3.png","hash":"ea2033a704bca3c71c6b2930c922c048f37dda0a","modified":1527127370187},{"_id":"public/pwa/asset/sw.jpg","hash":"55965b91726892f738ba56643f2eaeb8af7fd762","modified":1527127370188},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527127370188},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527127370188},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527127370188},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527127370188},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527127370188},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527127370188},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527127370188},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527127370188},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527127370188},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527127370188},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527127370188},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527127370189},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527127370189},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527127370189},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527127370189},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527127370189},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527127370189},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527127370189},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1527127370189},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527127370189},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527127370189},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527127370189},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527127370189},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527127370189},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527127370189},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527127370190},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527127370190},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527127370190},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527127370190},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527127370190},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527127370190},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527127370190},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527127370190},{"_id":"public/img/jstype/2.png","hash":"08957b47ee972258c8aab3d5e4c9abd49010db26","modified":1527127371308},{"_id":"public/img/performance/2.png","hash":"a7e1421f5df1fcb8203c76d457fb813221aa3e85","modified":1527127371313},{"_id":"public/img/performance/1.png","hash":"2051f0f5801d2e336fc95e0052ecedba7fb08a0f","modified":1527127371348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527127371348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527127371348},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1527127371354},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1527127371354},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527127371355},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1527127371355},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1527127371355},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1527127371355},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1527127371355},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1527127371355},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1527127371355},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1527127371355},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1527127371355},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527127371355},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527127371356},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527127371356},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527127371356},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1527127371356},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527127371356},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527127371356},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527127371357},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1527127371357},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527127371357},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1527127371357},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1527127371357},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527127371357},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1527127371357},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527127371357},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527127371357},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1527127371357},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1527127371357},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527127371357},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527127371357},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527127371357},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1527127371357},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1527127371357},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1527127371357},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1527127371358},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1527127371358},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1527127371358},{"_id":"public/css/main.css","hash":"6fc74c1b996f9e74f9e062026a6dae6b048d25fb","modified":1527127371358},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1527127371358},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1527127371358},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527127371358},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527127371358},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527127371358},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527127371358},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527127371358},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527127371358},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1527127371358},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527127371359},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527127371359},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1527127371360},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1527127371360},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527127371360},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527127371360},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527127371360},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1527127371360},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527127371360},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1527127371360},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1527127371360},{"_id":"public/img/jstype/1.png","hash":"313fa0d1e78fc4fbcf5d7f1e71681a3466f4a81a","modified":1527127371360},{"_id":"public/img/jstype/3.png","hash":"70f96b01ef09e050a5c179f40342c3179eca714d","modified":1527127371361},{"_id":"public/img/pwa/3.png","hash":"cb936733f999e28e9349d189fb3d26b1b6c86929","modified":1527127371361},{"_id":"public/img/pwa/4.png","hash":"ea21e2618ecf07e76d81e24977d4f379bed83b38","modified":1527127371361},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527127371361},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527127371361},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527127371361},{"_id":"public/img/pwa/2.png","hash":"3d8170ef49e9c7a6eb717abb7e6ff506a8fb0222","modified":1527127371370},{"_id":"public/img/pwa/1.png","hash":"59f1ce1a903ed76b8434af748258d6172da506d1","modified":1527127371386},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1527127371386}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>service worker</title>\n    <link rel=\"manifest\" href=\"./mainfest.json\">\n</head>\n<body>\n<div id='root'>\n<div>simple PWA demo</div>    \n\n<img alt=\"暂无图片\" style=\"width:200px;height:200px\"/>\n</div>\n\n<script src=\"./index.js\"></script>\n</body>\n</html>","source":"pwa/demo.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>service worker</title>\n    <link rel=\"manifest\" href=\"./mainfest.json\">\n</head>\n<body>\n<div id='root'>\n<div>simple PWA demo</div>    \n\n<img alt=\"暂无图片\" style=\"width:200px;height:200px\"/>\n</div>\n\n<script src=\"./index.js\"></script>\n</body>\n</html>","date":"2018-05-09T07:14:11.892Z","updated":"2018-05-09T07:14:11.892Z","path":"pwa/demo.html","title":"","comments":1,"layout":"page","_id":"cjhjw7di90001nl92k974c11j","content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>service worker</title>\n    <link rel=\"manifest\" href=\"./mainfest.json\">\n</head>\n<body>\n<div id=\"root\">\n<div>simple PWA demo</div>    \n\n<img alt=\"暂无图片\" style=\"width:200px;height:200px\">\n</div>\n\n<script src=\"./index.js\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>service worker</title>\n    <link rel=\"manifest\" href=\"./mainfest.json\">\n</head>\n<body>\n<div id=\"root\">\n<div>simple PWA demo</div>    \n\n<img alt=\"暂无图片\" style=\"width:200px;height:200px\">\n</div>\n\n<script src=\"./index.js\"></script>\n</body>\n</html>"},{"_content":"function registerServiceWorker(){\n    // 注册service worker\n    return navigator.serviceWorker.register('./sw1.js').then(registration => {\n        console.log('注册成功');\n        // 返回\n        return registration;\n    })\n    .catch(err => {\n        console.error('注册失败', err);\n    });\n}\nfunction execute() {\n    // 允许之后执行\n    registerServiceWorker().then(registration => {\n        // 初次演示注释掉\n        registration.showNotification('Hello World!');\n    });\n}\n// 获取通知权限之后再执行\nfunction getPermission(){\n    return new Promise((resolve, reject) => {\n        const permissionPromise = Notification.requestPermission(result => {\n            resolve(result);\n        });\n    }).then(result => {\n            if (result === 'granted') {\n                execute();\n            }\n            else {\n                console.log('no permission');\n            }\n        });\n}\nwindow.onload = function () {\n    var myImage = document.querySelector('#root img'),\n        src = './asset/sw.jpg';\n    myImage.src = src;\n    if (!('serviceWorker' in navigator)) {\n        return;\n    }\n    if (!('PushManager' in window)) {\n        return;\n    }\n    // 初次  \n    // registerServiceWorker()\n    // 通知权限\n    getPermission()\n}","source":"pwa/index.js","raw":"function registerServiceWorker(){\n    // 注册service worker\n    return navigator.serviceWorker.register('./sw1.js').then(registration => {\n        console.log('注册成功');\n        // 返回\n        return registration;\n    })\n    .catch(err => {\n        console.error('注册失败', err);\n    });\n}\nfunction execute() {\n    // 允许之后执行\n    registerServiceWorker().then(registration => {\n        // 初次演示注释掉\n        registration.showNotification('Hello World!');\n    });\n}\n// 获取通知权限之后再执行\nfunction getPermission(){\n    return new Promise((resolve, reject) => {\n        const permissionPromise = Notification.requestPermission(result => {\n            resolve(result);\n        });\n    }).then(result => {\n            if (result === 'granted') {\n                execute();\n            }\n            else {\n                console.log('no permission');\n            }\n        });\n}\nwindow.onload = function () {\n    var myImage = document.querySelector('#root img'),\n        src = './asset/sw.jpg';\n    myImage.src = src;\n    if (!('serviceWorker' in navigator)) {\n        return;\n    }\n    if (!('PushManager' in window)) {\n        return;\n    }\n    // 初次  \n    // registerServiceWorker()\n    // 通知权限\n    getPermission()\n}","date":"2018-05-09T07:39:05.629Z","updated":"2018-05-09T07:39:05.629Z","path":"pwa/index.js","layout":"false","title":"","comments":1,"_id":"cjhjw7dig0003nl927kuqq1gq","content":"function registerServiceWorker(){\n    // 注册service worker\n    return navigator.serviceWorker.register('./sw1.js').then(registration => {\n        console.log('注册成功');\n        // 返回\n        return registration;\n    })\n    .catch(err => {\n        console.error('注册失败', err);\n    });\n}\nfunction execute() {\n    // 允许之后执行\n    registerServiceWorker().then(registration => {\n        // 初次演示注释掉\n        registration.showNotification('Hello World!');\n    });\n}\n// 获取通知权限之后再执行\nfunction getPermission(){\n    return new Promise((resolve, reject) => {\n        const permissionPromise = Notification.requestPermission(result => {\n            resolve(result);\n        });\n    }).then(result => {\n            if (result === 'granted') {\n                execute();\n            }\n            else {\n                console.log('no permission');\n            }\n        });\n}\nwindow.onload = function () {\n    var myImage = document.querySelector('#root img'),\n        src = './asset/sw.jpg';\n    myImage.src = src;\n    if (!('serviceWorker' in navigator)) {\n        return;\n    }\n    if (!('PushManager' in window)) {\n        return;\n    }\n    // 初次  \n    // registerServiceWorker()\n    // 通知权限\n    getPermission()\n}","site":{"data":{}},"excerpt":"","more":"function registerServiceWorker(){\n    // 注册service worker\n    return navigator.serviceWorker.register('./sw1.js').then(registration => {\n        console.log('注册成功');\n        // 返回\n        return registration;\n    })\n    .catch(err => {\n        console.error('注册失败', err);\n    });\n}\nfunction execute() {\n    // 允许之后执行\n    registerServiceWorker().then(registration => {\n        // 初次演示注释掉\n        registration.showNotification('Hello World!');\n    });\n}\n// 获取通知权限之后再执行\nfunction getPermission(){\n    return new Promise((resolve, reject) => {\n        const permissionPromise = Notification.requestPermission(result => {\n            resolve(result);\n        });\n    }).then(result => {\n            if (result === 'granted') {\n                execute();\n            }\n            else {\n                console.log('no permission');\n            }\n        });\n}\nwindow.onload = function () {\n    var myImage = document.querySelector('#root img'),\n        src = './asset/sw.jpg';\n    myImage.src = src;\n    if (!('serviceWorker' in navigator)) {\n        return;\n    }\n    if (!('PushManager' in window)) {\n        return;\n    }\n    // 初次  \n    // registerServiceWorker()\n    // 通知权限\n    getPermission()\n}"},{"_content":"const PRECACHE = 'precache_test_1'\nconst RUNTIME = 'runtime';\nconst PRECACHE_URLS = [\n    '/',\n    'pwa/asset/sw.jpg',\n    'pwa/index.js'\n]\nself.addEventListener('install',e=>{\n    e.waitUntil(\n        caches.open(PRECACHE).then(cache=>{\n            cache.addAll(PRECACHE_URLS)\n        }).then(\n            self.skipWaiting()\n        )\n    )\n})\nself.addEventListener('activate', e => {\n      \n    e.waitUntil(\n        caches.keys().then(cacheNames=>{\n          return Promise.all(\n            cacheNames.map(function(cacheName) {\n              if (cacheName !== PRECACHE) {\n                return caches.delete(cacheName);\n              }\n            })\n      )}).then(() => self.clients.claim())\n   )\n  })\n  \n  \n  self.addEventListener('fetch', e => {\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        if (response != null) {\n          return response\n        }\n        return fetch(e.request.url)\n      })\n    )\n  });","source":"pwa/sw1.js","raw":"const PRECACHE = 'precache_test_1'\nconst RUNTIME = 'runtime';\nconst PRECACHE_URLS = [\n    '/',\n    'pwa/asset/sw.jpg',\n    'pwa/index.js'\n]\nself.addEventListener('install',e=>{\n    e.waitUntil(\n        caches.open(PRECACHE).then(cache=>{\n            cache.addAll(PRECACHE_URLS)\n        }).then(\n            self.skipWaiting()\n        )\n    )\n})\nself.addEventListener('activate', e => {\n      \n    e.waitUntil(\n        caches.keys().then(cacheNames=>{\n          return Promise.all(\n            cacheNames.map(function(cacheName) {\n              if (cacheName !== PRECACHE) {\n                return caches.delete(cacheName);\n              }\n            })\n      )}).then(() => self.clients.claim())\n   )\n  })\n  \n  \n  self.addEventListener('fetch', e => {\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        if (response != null) {\n          return response\n        }\n        return fetch(e.request.url)\n      })\n    )\n  });","date":"2018-05-09T09:25:49.664Z","updated":"2018-05-09T09:25:49.664Z","path":"pwa/sw1.js","layout":"false","title":"","comments":1,"_id":"cjhjw7dio0005nl92bsnn4nen","content":"const PRECACHE = 'precache_test_1'\nconst RUNTIME = 'runtime';\nconst PRECACHE_URLS = [\n    '/',\n    'pwa/asset/sw.jpg',\n    'pwa/index.js'\n]\nself.addEventListener('install',e=>{\n    e.waitUntil(\n        caches.open(PRECACHE).then(cache=>{\n            cache.addAll(PRECACHE_URLS)\n        }).then(\n            self.skipWaiting()\n        )\n    )\n})\nself.addEventListener('activate', e => {\n      \n    e.waitUntil(\n        caches.keys().then(cacheNames=>{\n          return Promise.all(\n            cacheNames.map(function(cacheName) {\n              if (cacheName !== PRECACHE) {\n                return caches.delete(cacheName);\n              }\n            })\n      )}).then(() => self.clients.claim())\n   )\n  })\n  \n  \n  self.addEventListener('fetch', e => {\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        if (response != null) {\n          return response\n        }\n        return fetch(e.request.url)\n      })\n    )\n  });","site":{"data":{}},"excerpt":"","more":"const PRECACHE = 'precache_test_1'\nconst RUNTIME = 'runtime';\nconst PRECACHE_URLS = [\n    '/',\n    'pwa/asset/sw.jpg',\n    'pwa/index.js'\n]\nself.addEventListener('install',e=>{\n    e.waitUntil(\n        caches.open(PRECACHE).then(cache=>{\n            cache.addAll(PRECACHE_URLS)\n        }).then(\n            self.skipWaiting()\n        )\n    )\n})\nself.addEventListener('activate', e => {\n      \n    e.waitUntil(\n        caches.keys().then(cacheNames=>{\n          return Promise.all(\n            cacheNames.map(function(cacheName) {\n              if (cacheName !== PRECACHE) {\n                return caches.delete(cacheName);\n              }\n            })\n      )}).then(() => self.clients.claim())\n   )\n  })\n  \n  \n  self.addEventListener('fetch', e => {\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        if (response != null) {\n          return response\n        }\n        return fetch(e.request.url)\n      })\n    )\n  });"},{"_content":"{\n  \"name\": \"PWA\",\n  \"short_name\": \"PWA\",\n  \"description\": \"测试demo\",\n  \"icons\": [{\n      \"src\": \"https://h5.sinaimg.cn/upload/696/2017/08/23/weibologo.png\",\n      \"sizes\": \"606x606\",\n      \"type\": \"image/png\"\n    }],\n  \"start_url\": \"/pwa/demo.html\",\n  \"scope\": \"/\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\",\n  \"background_color\": \"#F3F3F3\",\n  \"theme_color\": \"#F3F3F3\",\n  \"related_applications\": [],\n  \"prefer_related_applications\": false\n}\n","source":"pwa/mainfest.json","raw":"{\n  \"name\": \"PWA\",\n  \"short_name\": \"PWA\",\n  \"description\": \"测试demo\",\n  \"icons\": [{\n      \"src\": \"https://h5.sinaimg.cn/upload/696/2017/08/23/weibologo.png\",\n      \"sizes\": \"606x606\",\n      \"type\": \"image/png\"\n    }],\n  \"start_url\": \"/pwa/demo.html\",\n  \"scope\": \"/\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\",\n  \"background_color\": \"#F3F3F3\",\n  \"theme_color\": \"#F3F3F3\",\n  \"related_applications\": [],\n  \"prefer_related_applications\": false\n}\n","date":"2018-05-09T07:13:24.750Z","updated":"2018-05-09T07:13:24.750Z","path":"pwa/mainfest.json","layout":"false","title":"","comments":1,"_id":"cjhjw7dir0007nl927c70ibbo","content":"{\"name\":\"PWA\",\"short_name\":\"PWA\",\"description\":\"测试demo\",\"icons\":[{\"src\":\"https://h5.sinaimg.cn/upload/696/2017/08/23/weibologo.png\",\"sizes\":\"606x606\",\"type\":\"image/png\"}],\"start_url\":\"/pwa/demo.html\",\"scope\":\"/\",\"display\":\"standalone\",\"orientation\":\"portrait\",\"background_color\":\"#F3F3F3\",\"theme_color\":\"#F3F3F3\",\"related_applications\":[],\"prefer_related_applications\":false}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"PWA\",\"short_name\":\"PWA\",\"description\":\"测试demo\",\"icons\":[{\"src\":\"https://h5.sinaimg.cn/upload/696/2017/08/23/weibologo.png\",\"sizes\":\"606x606\",\"type\":\"image/png\"}],\"start_url\":\"/pwa/demo.html\",\"scope\":\"/\",\"display\":\"standalone\",\"orientation\":\"portrait\",\"background_color\":\"#F3F3F3\",\"theme_color\":\"#F3F3F3\",\"related_applications\":[],\"prefer_related_applications\":false}"}],"Post":[{"title":"由清除float原理到BFC","date":"2018-05-14T16:00:00.000Z","_content":"  \n## 关于浮动\n设置为浮动的元素会脱离当前文档流，向左或向右移动直到边缘遇到另一个浮动元素或者到达边界。普通元素不会对齐造成影响。  \n浮动是把双刃剑，在给我们的布局带来便利的同时有一些缺点需要我们去解决。例如最常见的父元素塌陷。如下图所示：  \n<!-- more -->\n\n```css  \n.warper{\n    width: 200px;\n    border:1px solid  #ff6633;\n}\n.float-1{\n    float: left;\n    background: blue;\n    height: 100px;\n    width: 100px;\n}\n.float-2{\n    float: left;\n    background: #ff0;\n    height: 50px;\n    width: 100px;\n}\n//html  \n<div class='warper'>\n    <div class=\"float-1\"></div>\n    <div class=\"float-2\"></div>\n</div>\n```  \n<img src='/img/bfc/1.png'/>\n可以看到父元素的高度为0,为了解决这种状况就要清除浮动了。  \n\n### 清楚浮动的方式   \n\n总结了一下，大致有如下几类:  \n\n    1. 结尾空元素或者after等伪元素或者br 来clear\n    2. 父元素同样浮动\n    3. 父元素设置overflow为hidden或者auto \n    4. 父元素display：table       \n\n大致归类，可以分为两大类，1使用clear的属性，后面的可以归为一类，都是通过触发BFC来实现的。\n下面详细看一下这两大类清除浮动的方式及原理。   \n\n#### clear属性    \n\nclear 属性规定元素盒子的边不能和浮动元素相邻。该属性只能影响使用清除的元素本身，不能影响其他元素。    \n换而言之，如果已经存在浮动元素的话，那么该元素就不会像原本元素一样受其影响了。\n第一种方式里我们的填补元素(我自己的称呼)，就是起这种作用。  \n\n```css  \n//这里当然可以换成一个空的div，<br/>等，原理和效果都是一致的  \n.warper:after {\n    content: '';\n    height: 0;\n    display: block;\n    clear: both;\n} \n```     \n\n此时after伪元素设置clear：both之后表明，我两边都不能接受浮动元素，原本受浮动元素影响，伪元素的位置在浮动元素下方如图：\n<img src='/img/bfc/2.png'/>  \n\n这样显然也不能撑起父元素的高度。设置之后，需要重新安排安排了。既然两边都不接受浮动元素，但浮动元素位置也确定了，那只能把伪元素放在下边，如图：  \n<img src='/img/bfc/3.png'/>  \n\n可以看到，伪元素的位置在最下方了，距顶部的高度为float元素的高度，顺带撑起了父元素的高度。同样适用其他填充元素（display为block），都能达到相同的目的。   \n在看后面几种原理之前我们需要先看一下BFC的定义。  \n\n### BFC    \n\n#### 块级格式化上下文：BFC(block formatting contexts)    \n\n照本宣科的定义看起来可能不大好理解，BFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。借用张鑫旭大大的一句话，BFC元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素。所以，避免margin穿透啊，清除浮动什么的也好理解了。  \n\n正如下面的解释：  \n\nIn a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats)   \n在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）。     \n \n#### BFC的特性     \n\n1. 块级格式化上下文会阻止外边距叠加\n2. 块级格式化上下文不会重叠浮动元素\n3. 块级格式化上下文通常可以包含浮动     \n\n换句话说创建了 BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时BFC任然属于文档中的普通流。所以呢浮动也就解决了，关于BFC以后要专门搞个文章仔细研究一下。  \n\n看到这里就可以知道了，为什么可以拿来清除浮动了，表现为BFC的元素都是一个十分个性的存在，无论里面怎么折腾，对外表现始终如一。大家肯定可以猜到，上面几种利用了BFC的清除方式肯定是触发了BFC的条件，让父元素变为BFC。我们来看一下触发BFC的条件，看是不是如我们所想。 \n\n#### BFC触发条件  \n    \nCSS3里面对这个规范做了改动，称之为：flow root，并且对触发条件进行了进一步说明。  \n\n```js\nfloat 除了none以外的值 \n \noverflow 除了visible 以外的值（hidden，auto，scroll ） \n \ndisplay (table-cell，table-caption，inline-block) \n \nposition（absolute，fixed） \n \nfieldset元素\n```   \n\n由上面可以对比一下，我们提到那几种方法，就是触发了BFC而已。  \n看个例子    \n\n```CSS  \n.warper{\n    width: 200px;\n    border:1px solid  #ff6633;\n    // 下面属性任选其一\n    overflow: hidden;\n    overflow: auto;\n    float: left;\n    display:inline-block;\n    position: fixed;\n}\n```      \n \n<img src='/img/bfc/4.png'/>  \n\n### 结束语   \n#### 参考文章  \n[CSS深入理解流体特性和BFC特性下多栏自适应布局](http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/)   \n[理解CSS中BFC](https://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html)\n到这里清除float相关的内容就说完了，知其然更要知其所以然，清除float的方式繁多无比，掌握其中原理才能不人云亦云。当然抛砖引玉，更多的是共同学习共同进步,[更多请移步博客]()。\n\n\n\n\n\n","source":"_posts/bfc.md","raw":"---\ntitle: 由清除float原理到BFC\ndate: 2018-05-15\n---\n  \n## 关于浮动\n设置为浮动的元素会脱离当前文档流，向左或向右移动直到边缘遇到另一个浮动元素或者到达边界。普通元素不会对齐造成影响。  \n浮动是把双刃剑，在给我们的布局带来便利的同时有一些缺点需要我们去解决。例如最常见的父元素塌陷。如下图所示：  \n<!-- more -->\n\n```css  \n.warper{\n    width: 200px;\n    border:1px solid  #ff6633;\n}\n.float-1{\n    float: left;\n    background: blue;\n    height: 100px;\n    width: 100px;\n}\n.float-2{\n    float: left;\n    background: #ff0;\n    height: 50px;\n    width: 100px;\n}\n//html  \n<div class='warper'>\n    <div class=\"float-1\"></div>\n    <div class=\"float-2\"></div>\n</div>\n```  \n<img src='/img/bfc/1.png'/>\n可以看到父元素的高度为0,为了解决这种状况就要清除浮动了。  \n\n### 清楚浮动的方式   \n\n总结了一下，大致有如下几类:  \n\n    1. 结尾空元素或者after等伪元素或者br 来clear\n    2. 父元素同样浮动\n    3. 父元素设置overflow为hidden或者auto \n    4. 父元素display：table       \n\n大致归类，可以分为两大类，1使用clear的属性，后面的可以归为一类，都是通过触发BFC来实现的。\n下面详细看一下这两大类清除浮动的方式及原理。   \n\n#### clear属性    \n\nclear 属性规定元素盒子的边不能和浮动元素相邻。该属性只能影响使用清除的元素本身，不能影响其他元素。    \n换而言之，如果已经存在浮动元素的话，那么该元素就不会像原本元素一样受其影响了。\n第一种方式里我们的填补元素(我自己的称呼)，就是起这种作用。  \n\n```css  \n//这里当然可以换成一个空的div，<br/>等，原理和效果都是一致的  \n.warper:after {\n    content: '';\n    height: 0;\n    display: block;\n    clear: both;\n} \n```     \n\n此时after伪元素设置clear：both之后表明，我两边都不能接受浮动元素，原本受浮动元素影响，伪元素的位置在浮动元素下方如图：\n<img src='/img/bfc/2.png'/>  \n\n这样显然也不能撑起父元素的高度。设置之后，需要重新安排安排了。既然两边都不接受浮动元素，但浮动元素位置也确定了，那只能把伪元素放在下边，如图：  \n<img src='/img/bfc/3.png'/>  \n\n可以看到，伪元素的位置在最下方了，距顶部的高度为float元素的高度，顺带撑起了父元素的高度。同样适用其他填充元素（display为block），都能达到相同的目的。   \n在看后面几种原理之前我们需要先看一下BFC的定义。  \n\n### BFC    \n\n#### 块级格式化上下文：BFC(block formatting contexts)    \n\n照本宣科的定义看起来可能不大好理解，BFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。借用张鑫旭大大的一句话，BFC元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素。所以，避免margin穿透啊，清除浮动什么的也好理解了。  \n\n正如下面的解释：  \n\nIn a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats)   \n在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）。     \n \n#### BFC的特性     \n\n1. 块级格式化上下文会阻止外边距叠加\n2. 块级格式化上下文不会重叠浮动元素\n3. 块级格式化上下文通常可以包含浮动     \n\n换句话说创建了 BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时BFC任然属于文档中的普通流。所以呢浮动也就解决了，关于BFC以后要专门搞个文章仔细研究一下。  \n\n看到这里就可以知道了，为什么可以拿来清除浮动了，表现为BFC的元素都是一个十分个性的存在，无论里面怎么折腾，对外表现始终如一。大家肯定可以猜到，上面几种利用了BFC的清除方式肯定是触发了BFC的条件，让父元素变为BFC。我们来看一下触发BFC的条件，看是不是如我们所想。 \n\n#### BFC触发条件  \n    \nCSS3里面对这个规范做了改动，称之为：flow root，并且对触发条件进行了进一步说明。  \n\n```js\nfloat 除了none以外的值 \n \noverflow 除了visible 以外的值（hidden，auto，scroll ） \n \ndisplay (table-cell，table-caption，inline-block) \n \nposition（absolute，fixed） \n \nfieldset元素\n```   \n\n由上面可以对比一下，我们提到那几种方法，就是触发了BFC而已。  \n看个例子    \n\n```CSS  \n.warper{\n    width: 200px;\n    border:1px solid  #ff6633;\n    // 下面属性任选其一\n    overflow: hidden;\n    overflow: auto;\n    float: left;\n    display:inline-block;\n    position: fixed;\n}\n```      \n \n<img src='/img/bfc/4.png'/>  \n\n### 结束语   \n#### 参考文章  \n[CSS深入理解流体特性和BFC特性下多栏自适应布局](http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/)   \n[理解CSS中BFC](https://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html)\n到这里清除float相关的内容就说完了，知其然更要知其所以然，清除float的方式繁多无比，掌握其中原理才能不人云亦云。当然抛砖引玉，更多的是共同学习共同进步,[更多请移步博客]()。\n\n\n\n\n\n","slug":"bfc","published":1,"updated":"2018-05-15T01:08:51.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7di00000nl92lnkvtu32","content":"<h2 id=\"关于浮动\"><a href=\"#关于浮动\" class=\"headerlink\" title=\"关于浮动\"></a>关于浮动</h2><p>设置为浮动的元素会脱离当前文档流，向左或向右移动直到边缘遇到另一个浮动元素或者到达边界。普通元素不会对齐造成影响。<br>浮动是把双刃剑，在给我们的布局带来便利的同时有一些缺点需要我们去解决。例如最常见的父元素塌陷。如下图所示：<br><a id=\"more\"></a></p>\n<pre><code class=\"css\"><span class=\"selector-class\">.warper</span>{\n    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;\n    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid  <span class=\"number\">#ff6633</span>;\n}\n<span class=\"selector-class\">.float-1</span>{\n    <span class=\"attribute\">float</span>: left;\n    <span class=\"attribute\">background</span>: blue;\n    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;\n    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;\n}\n<span class=\"selector-class\">.float-2</span>{\n    <span class=\"attribute\">float</span>: left;\n    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0</span>;\n    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;\n    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;\n}\n//html  \n&lt;div class='warper'&gt;\n    &lt;div class=\"float-1\"&gt;&lt;/div&gt;\n    &lt;div class=\"float-2\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p><img src=\"/img/bfc/1.png\"><br>可以看到父元素的高度为0,为了解决这种状况就要清除浮动了。  </p>\n<h3 id=\"清楚浮动的方式\"><a href=\"#清楚浮动的方式\" class=\"headerlink\" title=\"清楚浮动的方式\"></a>清楚浮动的方式</h3><p>总结了一下，大致有如下几类:  </p>\n<pre><code>1. 结尾空元素或者after等伪元素或者br 来clear\n2. 父元素同样浮动\n3. 父元素设置overflow为hidden或者auto \n4. 父元素display：table       \n</code></pre><p>大致归类，可以分为两大类，1使用clear的属性，后面的可以归为一类，都是通过触发BFC来实现的。<br>下面详细看一下这两大类清除浮动的方式及原理。   </p>\n<h4 id=\"clear属性\"><a href=\"#clear属性\" class=\"headerlink\" title=\"clear属性\"></a>clear属性</h4><p>clear 属性规定元素盒子的边不能和浮动元素相邻。该属性只能影响使用清除的元素本身，不能影响其他元素。<br>换而言之，如果已经存在浮动元素的话，那么该元素就不会像原本元素一样受其影响了。<br>第一种方式里我们的填补元素(我自己的称呼)，就是起这种作用。  </p>\n<pre><code class=\"css\">//这里当然可以换成一个空的div，&lt;br/&gt;等，原理和效果都是一致的  \n<span class=\"selector-class\">.warper</span><span class=\"selector-pseudo\">:after</span> {\n    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;\n    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;\n    <span class=\"attribute\">display</span>: block;\n    <span class=\"attribute\">clear</span>: both;\n}\n</code></pre>\n<p>此时after伪元素设置clear：both之后表明，我两边都不能接受浮动元素，原本受浮动元素影响，伪元素的位置在浮动元素下方如图：<br><img src=\"/img/bfc/2.png\">  </p>\n<p>这样显然也不能撑起父元素的高度。设置之后，需要重新安排安排了。既然两边都不接受浮动元素，但浮动元素位置也确定了，那只能把伪元素放在下边，如图：<br><img src=\"/img/bfc/3.png\">  </p>\n<p>可以看到，伪元素的位置在最下方了，距顶部的高度为float元素的高度，顺带撑起了父元素的高度。同样适用其他填充元素（display为block），都能达到相同的目的。<br>在看后面几种原理之前我们需要先看一下BFC的定义。  </p>\n<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><h4 id=\"块级格式化上下文：BFC-block-formatting-contexts\"><a href=\"#块级格式化上下文：BFC-block-formatting-contexts\" class=\"headerlink\" title=\"块级格式化上下文：BFC(block formatting contexts)\"></a>块级格式化上下文：BFC(block formatting contexts)</h4><p>照本宣科的定义看起来可能不大好理解，BFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。借用张鑫旭大大的一句话，BFC元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素。所以，避免margin穿透啊，清除浮动什么的也好理解了。  </p>\n<p>正如下面的解释：  </p>\n<p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats)<br>在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）。     </p>\n<h4 id=\"BFC的特性\"><a href=\"#BFC的特性\" class=\"headerlink\" title=\"BFC的特性\"></a>BFC的特性</h4><ol>\n<li>块级格式化上下文会阻止外边距叠加</li>\n<li>块级格式化上下文不会重叠浮动元素</li>\n<li>块级格式化上下文通常可以包含浮动     </li>\n</ol>\n<p>换句话说创建了 BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时BFC任然属于文档中的普通流。所以呢浮动也就解决了，关于BFC以后要专门搞个文章仔细研究一下。  </p>\n<p>看到这里就可以知道了，为什么可以拿来清除浮动了，表现为BFC的元素都是一个十分个性的存在，无论里面怎么折腾，对外表现始终如一。大家肯定可以猜到，上面几种利用了BFC的清除方式肯定是触发了BFC的条件，让父元素变为BFC。我们来看一下触发BFC的条件，看是不是如我们所想。 </p>\n<h4 id=\"BFC触发条件\"><a href=\"#BFC触发条件\" class=\"headerlink\" title=\"BFC触发条件\"></a>BFC触发条件</h4><p>CSS3里面对这个规范做了改动，称之为：flow root，并且对触发条件进行了进一步说明。  </p>\n<pre><code class=\"js\">float 除了none以外的值 \n\noverflow 除了visible 以外的值（hidden，auto，scroll ） \n\ndisplay (table-cell，table-caption，inline-block) \n\nposition（absolute，fixed） \n\nfieldset元素\n</code></pre>\n<p>由上面可以对比一下，我们提到那几种方法，就是触发了BFC而已。<br>看个例子    </p>\n<pre><code class=\"CSS\"><span class=\"selector-class\">.warper</span>{\n    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;\n    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid  <span class=\"number\">#ff6633</span>;\n    // 下面属性任选其一\n    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;\n    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;\n    <span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;\n    <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;\n    <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">fixed</span>;\n}\n</code></pre>\n<p><img src=\"/img/bfc/4.png\">  </p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/\" target=\"_blank\" rel=\"noopener\">CSS深入理解流体特性和BFC特性下多栏自适应布局</a><br><a href=\"https://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html\" target=\"_blank\" rel=\"noopener\">理解CSS中BFC</a><br>到这里清除float相关的内容就说完了，知其然更要知其所以然，清除float的方式繁多无比，掌握其中原理才能不人云亦云。当然抛砖引玉，更多的是共同学习共同进步,<a href=\"\">更多请移步博客</a>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"关于浮动\"><a href=\"#关于浮动\" class=\"headerlink\" title=\"关于浮动\"></a>关于浮动</h2><p>设置为浮动的元素会脱离当前文档流，向左或向右移动直到边缘遇到另一个浮动元素或者到达边界。普通元素不会对齐造成影响。<br>浮动是把双刃剑，在给我们的布局带来便利的同时有一些缺点需要我们去解决。例如最常见的父元素塌陷。如下图所示：<br>","more":"</p>\n<pre><code class=\"css\"><span class=\"selector-class\">.warper</span>{\n    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;\n    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid  <span class=\"number\">#ff6633</span>;\n}\n<span class=\"selector-class\">.float-1</span>{\n    <span class=\"attribute\">float</span>: left;\n    <span class=\"attribute\">background</span>: blue;\n    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;\n    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;\n}\n<span class=\"selector-class\">.float-2</span>{\n    <span class=\"attribute\">float</span>: left;\n    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0</span>;\n    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;\n    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;\n}\n//html  \n&lt;div class='warper'&gt;\n    &lt;div class=\"float-1\"&gt;&lt;/div&gt;\n    &lt;div class=\"float-2\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p><img src=\"/img/bfc/1.png\"><br>可以看到父元素的高度为0,为了解决这种状况就要清除浮动了。  </p>\n<h3 id=\"清楚浮动的方式\"><a href=\"#清楚浮动的方式\" class=\"headerlink\" title=\"清楚浮动的方式\"></a>清楚浮动的方式</h3><p>总结了一下，大致有如下几类:  </p>\n<pre><code>1. 结尾空元素或者after等伪元素或者br 来clear\n2. 父元素同样浮动\n3. 父元素设置overflow为hidden或者auto \n4. 父元素display：table       \n</code></pre><p>大致归类，可以分为两大类，1使用clear的属性，后面的可以归为一类，都是通过触发BFC来实现的。<br>下面详细看一下这两大类清除浮动的方式及原理。   </p>\n<h4 id=\"clear属性\"><a href=\"#clear属性\" class=\"headerlink\" title=\"clear属性\"></a>clear属性</h4><p>clear 属性规定元素盒子的边不能和浮动元素相邻。该属性只能影响使用清除的元素本身，不能影响其他元素。<br>换而言之，如果已经存在浮动元素的话，那么该元素就不会像原本元素一样受其影响了。<br>第一种方式里我们的填补元素(我自己的称呼)，就是起这种作用。  </p>\n<pre><code class=\"css\">//这里当然可以换成一个空的div，&lt;br/&gt;等，原理和效果都是一致的  \n<span class=\"selector-class\">.warper</span><span class=\"selector-pseudo\">:after</span> {\n    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;\n    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;\n    <span class=\"attribute\">display</span>: block;\n    <span class=\"attribute\">clear</span>: both;\n}\n</code></pre>\n<p>此时after伪元素设置clear：both之后表明，我两边都不能接受浮动元素，原本受浮动元素影响，伪元素的位置在浮动元素下方如图：<br><img src=\"/img/bfc/2.png\">  </p>\n<p>这样显然也不能撑起父元素的高度。设置之后，需要重新安排安排了。既然两边都不接受浮动元素，但浮动元素位置也确定了，那只能把伪元素放在下边，如图：<br><img src=\"/img/bfc/3.png\">  </p>\n<p>可以看到，伪元素的位置在最下方了，距顶部的高度为float元素的高度，顺带撑起了父元素的高度。同样适用其他填充元素（display为block），都能达到相同的目的。<br>在看后面几种原理之前我们需要先看一下BFC的定义。  </p>\n<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><h4 id=\"块级格式化上下文：BFC-block-formatting-contexts\"><a href=\"#块级格式化上下文：BFC-block-formatting-contexts\" class=\"headerlink\" title=\"块级格式化上下文：BFC(block formatting contexts)\"></a>块级格式化上下文：BFC(block formatting contexts)</h4><p>照本宣科的定义看起来可能不大好理解，BFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。借用张鑫旭大大的一句话，BFC元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素。所以，避免margin穿透啊，清除浮动什么的也好理解了。  </p>\n<p>正如下面的解释：  </p>\n<p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats)<br>在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）。     </p>\n<h4 id=\"BFC的特性\"><a href=\"#BFC的特性\" class=\"headerlink\" title=\"BFC的特性\"></a>BFC的特性</h4><ol>\n<li>块级格式化上下文会阻止外边距叠加</li>\n<li>块级格式化上下文不会重叠浮动元素</li>\n<li>块级格式化上下文通常可以包含浮动     </li>\n</ol>\n<p>换句话说创建了 BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时BFC任然属于文档中的普通流。所以呢浮动也就解决了，关于BFC以后要专门搞个文章仔细研究一下。  </p>\n<p>看到这里就可以知道了，为什么可以拿来清除浮动了，表现为BFC的元素都是一个十分个性的存在，无论里面怎么折腾，对外表现始终如一。大家肯定可以猜到，上面几种利用了BFC的清除方式肯定是触发了BFC的条件，让父元素变为BFC。我们来看一下触发BFC的条件，看是不是如我们所想。 </p>\n<h4 id=\"BFC触发条件\"><a href=\"#BFC触发条件\" class=\"headerlink\" title=\"BFC触发条件\"></a>BFC触发条件</h4><p>CSS3里面对这个规范做了改动，称之为：flow root，并且对触发条件进行了进一步说明。  </p>\n<pre><code class=\"js\">float 除了none以外的值 \n\noverflow 除了visible 以外的值（hidden，auto，scroll ） \n\ndisplay (table-cell，table-caption，inline-block) \n\nposition（absolute，fixed） \n\nfieldset元素\n</code></pre>\n<p>由上面可以对比一下，我们提到那几种方法，就是触发了BFC而已。<br>看个例子    </p>\n<pre><code class=\"CSS\"><span class=\"selector-class\">.warper</span>{\n    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;\n    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid  <span class=\"number\">#ff6633</span>;\n    // 下面属性任选其一\n    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;\n    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;\n    <span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;\n    <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;\n    <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">fixed</span>;\n}\n</code></pre>\n<p><img src=\"/img/bfc/4.png\">  </p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/\" target=\"_blank\" rel=\"noopener\">CSS深入理解流体特性和BFC特性下多栏自适应布局</a><br><a href=\"https://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html\" target=\"_blank\" rel=\"noopener\">理解CSS中BFC</a><br>到这里清除float相关的内容就说完了，知其然更要知其所以然，清除float的方式繁多无比，掌握其中原理才能不人云亦云。当然抛砖引玉，更多的是共同学习共同进步,<a href=\"\">更多请移步博客</a>。</p>"},{"title":"开篇","date":"2017-09-13T16:00:00.000Z","_content":"原本也有些技术总结和学习笔记，不给过一直都是放在[博客园](http://www.cnblogs.com/pqjwyn/)和[掘金](https://juejin.im/user/584e46a2ac502e006c749486)上面。当时的想法是，既然第三方已经提供了成熟的博客系统，其实也没必要自己折腾了，有这个时间还不如干点别的(说到底还是懒)。就这样坚持了一段时间，最终让我自己动起来的原因在于，搞了下PWA，结果发现只能自己本地调试，打算偷个懒发现还不能加载js。算了还是把gitpages利用起来好了。就这样开始折腾了，先大致搞出来东西再说\n<!-- more -->\n## [早期博客](http://www.cnblogs.com/pqjwyn/p/) \n","source":"_posts/index.md","raw":"---\ntitle: 开篇\ndate: 2017-09-14\n---\n原本也有些技术总结和学习笔记，不给过一直都是放在[博客园](http://www.cnblogs.com/pqjwyn/)和[掘金](https://juejin.im/user/584e46a2ac502e006c749486)上面。当时的想法是，既然第三方已经提供了成熟的博客系统，其实也没必要自己折腾了，有这个时间还不如干点别的(说到底还是懒)。就这样坚持了一段时间，最终让我自己动起来的原因在于，搞了下PWA，结果发现只能自己本地调试，打算偷个懒发现还不能加载js。算了还是把gitpages利用起来好了。就这样开始折腾了，先大致搞出来东西再说\n<!-- more -->\n## [早期博客](http://www.cnblogs.com/pqjwyn/p/) \n","slug":"index","published":1,"updated":"2017-12-15T11:54:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7did0002nl92ksyy3kjt","content":"<p>原本也有些技术总结和学习笔记，不给过一直都是放在<a href=\"http://www.cnblogs.com/pqjwyn/\" target=\"_blank\" rel=\"noopener\">博客园</a>和<a href=\"https://juejin.im/user/584e46a2ac502e006c749486\" target=\"_blank\" rel=\"noopener\">掘金</a>上面。当时的想法是，既然第三方已经提供了成熟的博客系统，其实也没必要自己折腾了，有这个时间还不如干点别的(说到底还是懒)。就这样坚持了一段时间，最终让我自己动起来的原因在于，搞了下PWA，结果发现只能自己本地调试，打算偷个懒发现还不能加载js。算了还是把gitpages利用起来好了。就这样开始折腾了，先大致搞出来东西再说<br><a id=\"more\"></a></p>\n<h2 id=\"早期博客\"><a href=\"#早期博客\" class=\"headerlink\" title=\"早期博客\"></a><a href=\"http://www.cnblogs.com/pqjwyn/p/\" target=\"_blank\" rel=\"noopener\">早期博客</a></h2>","site":{"data":{}},"excerpt":"<p>原本也有些技术总结和学习笔记，不给过一直都是放在<a href=\"http://www.cnblogs.com/pqjwyn/\" target=\"_blank\" rel=\"noopener\">博客园</a>和<a href=\"https://juejin.im/user/584e46a2ac502e006c749486\" target=\"_blank\" rel=\"noopener\">掘金</a>上面。当时的想法是，既然第三方已经提供了成熟的博客系统，其实也没必要自己折腾了，有这个时间还不如干点别的(说到底还是懒)。就这样坚持了一段时间，最终让我自己动起来的原因在于，搞了下PWA，结果发现只能自己本地调试，打算偷个懒发现还不能加载js。算了还是把gitpages利用起来好了。就这样开始折腾了，先大致搞出来东西再说<br>","more":"</p>\n<h2 id=\"早期博客\"><a href=\"#早期博客\" class=\"headerlink\" title=\"早期博客\"></a><a href=\"http://www.cnblogs.com/pqjwyn/p/\" target=\"_blank\" rel=\"noopener\">早期博客</a></h2>"},{"title":"DOMContentLoaded、readystatechange、load、ready详谈","date":"2017-12-16T16:00:00.000Z","_content":"对前端同学而言，loade,unload,DOMContentLoaded等页面加载过程中会触发的事件肯定是都接触过，不过要是具体问各个事件的区别，我就不是那么能清晰的解答上来的了。正好刚刚在无阻塞脚本那看到了DOMContentLoaded事件，就来翻翻具体文档详细看一下各个事件吧。常言道温故而知新，让我们一起回头看一下  \n<!-- more -->\n## 触发时机\n先看下各个事件的触发时机(参考自[MDN](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded))  \n### DOMContentLoaded   \n当初始html文档完全加载并解析之后触发，无需等待样式、图片、子frame结束。作为明显的对比，load事件只有一个页面完全被加载时才触发。改用DOMContentLoaded的地方常常是load来代替，这是错误的。\ntips: 有许多通用和独立的库提供跨浏览器方法来检测 DOM 是否已准备就绪即ready事件，后面我们可以看下zepto的实现\n### load\n当一个资源及其依赖的资源结束加载时触发。从这里可以看到需要等待依赖资源的结束加载。\n### readystatechange\ndocument有readyState属性来描述document的loading状态，readyState的改变会触发readystatechange事件.  \n\n* loading  \n\n    文档仍然在加载  \n* interactive  \n\n\n  文档结束加载并且被解析，但是想图片，样式，frame之类的子资源仍在加载  \n* complete    \n\n  \n  文档和子资源已经结束加载，该状态表明将要触发load事件。  \n\n因此，我们同样可以使用该事件来判断dom的加载状态。  \n但并非所有对象都会经历 readyState 的这几个阶段，有时候需要\n### beforeunload\n当浏览器窗口，文档或其资源将要卸载时，会触发beforeunload事件。这个文档是依然可见的，并且这个事件在这一刻是可以取消的.  \n如果处理函数为Event对象的returnValue属性赋值非空字符串，浏览器会弹出一个对话框，来询问用户是否确定要离开当前页面（如下示例）。有些浏览器会将返回的字符串展示在弹框里，但有些其他浏览器只展示它们自定义的信息。没有赋值时，该事件不做任何响应。\ntip:2011年5月25号起，html5中指出，该事件中调用window.alert(), window.confirm(), and window.prompt()方法将会被忽略。\n### unload\n当文档或者一个子资源将要被卸载时，在beforeunload 、pagehide两个事件之后触发。  \n文档会处于一个特定状态。  \n\n* 所有资源仍存在 (图片, iframe 等.)\n* 对于终端用户所有资源均不可见\n* 界面交互无效 (window.open, alert, confirm 等.)\n* 错误不会停止卸载文档的过程  \n\n\n## 页面加载中的执行顺序  \n  \n从上面的定义，我们可以得出一个比较清晰的顺序了。  \n  \n1. 页面加载开始，首先肯定是先发出加载资源的请求，加载未完成之前，不触发任何事件。\n2. document加载结束并解析，此时css等其他资源未加载完成。\n\n   此时readyState为'interactive'，表明document已经load并解析完成，触发 readystatechange，然后触发DOMContentLoaded(在大多数浏览器上的表现如此)。捎带提一句，此时，加载完成且带有defer标记的脚本，会按顺序开始执行。  \n      \n3.  css、img等子资源加载完成之后  \n\n    此时触发window.load事件  \n4.  点击关闭标签或者刷新时，会依次触发beforeunload、unload事件。  \n\n可能概念看的有点枯燥，还是看下代码比较清晰。大家可以看下，下面的代码会依次输出什么。  \n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <title>文档加载事件</title>\n    <script>\n            document.addEventListener(\"DOMContentLoaded\", function (event) {\n                console.log(\"初始DOM 加载并解析\");\n            });\n            window.addEventListener(\"load\", function (event) {\n                console.log(\"window 所有资源加载完成\");\n            });\n    \n            document.onreadystatechange = function () {\n                console.log(document.readyState)\n                if (document.readyState === \"complete\") {\n                    console.log('初始DOM,加载解析完成')\n                }\n            }\n            window.addEventListener(\"beforeunload\", function (event) {\n                console.log('即将关闭')\n                event.returnValue = \"\\o/\";\n            });\n            window.addEventListener('unload', function (event) {\n                console.log('即将关闭1');\n            });\n        </script>\n    <link rel=\"stylesheet\" href=\"./test.css\">\n</head>\n\n<body>\n    <div id=\"root\">dom事件</div>\n    <script src=\"./index.js\"></script>\n</body>\n\n</html>\n```  \n   \n依次输出如下:  \n    \n```js\n    interactive //(index):15\n    初始DOM 加载并解析 //(index):8\n    complet//(index):15 \n    初始DOM,加载解析完成//(index):17 \n    window 所有资源加载完成//(index):11 \n    //点击关闭按钮\n    即将关闭\n    即将关闭2  \n```    \n### 关于ready  \n像jquery、zepto等类库中都有document一个ready方法，来确保我们的操作在初始dom加载之后进行，原生dom定义里是没有这个api的，是大牛们封装了一下判断的过程，提供我们以便利。  \n有了前面的例子，让我们猜一下他们是怎么实现的。  \n  \n1. ready对应的状态是初始化dom已经加载完成，我们来看一下什么情况下对应该情况。\n\n   有下面几个状态，complete、interactive 还有一个DOMContentLoaded也是初始dom加载完成，当然还有load事件，显然这里不会用到它，相对其他状态而言有点太晚了。 \n2. 确定触发条件之后，下面的实现就简单了，判断就行了。  \n\n   \n以zepto为例，我们看下实现：   \n \n```js \n//声明变量，不只使用interactive，是因为前面提到这些状态不一定全部出现\nreadyRE = /complete|loaded|interactive/\n\nready: function(callback){\n      // need to check if document.body exists for IE as that browser reports\n      // document ready when it hasn't yet created the body element\n      if (readyRE.test(document.readyState) && document.body) callback($)\n      else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)\n      return this\n    } \n```  \n\n至此，介绍就结束了。对我而言，明了原来不太清楚的概念，希望对大家也有所帮助。    \n\n\n\n\n\n","source":"_posts/domevent.md","raw":"---\ntitle: DOMContentLoaded、readystatechange、load、ready详谈\ndate: 2017-12-17\n---\n对前端同学而言，loade,unload,DOMContentLoaded等页面加载过程中会触发的事件肯定是都接触过，不过要是具体问各个事件的区别，我就不是那么能清晰的解答上来的了。正好刚刚在无阻塞脚本那看到了DOMContentLoaded事件，就来翻翻具体文档详细看一下各个事件吧。常言道温故而知新，让我们一起回头看一下  \n<!-- more -->\n## 触发时机\n先看下各个事件的触发时机(参考自[MDN](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded))  \n### DOMContentLoaded   \n当初始html文档完全加载并解析之后触发，无需等待样式、图片、子frame结束。作为明显的对比，load事件只有一个页面完全被加载时才触发。改用DOMContentLoaded的地方常常是load来代替，这是错误的。\ntips: 有许多通用和独立的库提供跨浏览器方法来检测 DOM 是否已准备就绪即ready事件，后面我们可以看下zepto的实现\n### load\n当一个资源及其依赖的资源结束加载时触发。从这里可以看到需要等待依赖资源的结束加载。\n### readystatechange\ndocument有readyState属性来描述document的loading状态，readyState的改变会触发readystatechange事件.  \n\n* loading  \n\n    文档仍然在加载  \n* interactive  \n\n\n  文档结束加载并且被解析，但是想图片，样式，frame之类的子资源仍在加载  \n* complete    \n\n  \n  文档和子资源已经结束加载，该状态表明将要触发load事件。  \n\n因此，我们同样可以使用该事件来判断dom的加载状态。  \n但并非所有对象都会经历 readyState 的这几个阶段，有时候需要\n### beforeunload\n当浏览器窗口，文档或其资源将要卸载时，会触发beforeunload事件。这个文档是依然可见的，并且这个事件在这一刻是可以取消的.  \n如果处理函数为Event对象的returnValue属性赋值非空字符串，浏览器会弹出一个对话框，来询问用户是否确定要离开当前页面（如下示例）。有些浏览器会将返回的字符串展示在弹框里，但有些其他浏览器只展示它们自定义的信息。没有赋值时，该事件不做任何响应。\ntip:2011年5月25号起，html5中指出，该事件中调用window.alert(), window.confirm(), and window.prompt()方法将会被忽略。\n### unload\n当文档或者一个子资源将要被卸载时，在beforeunload 、pagehide两个事件之后触发。  \n文档会处于一个特定状态。  \n\n* 所有资源仍存在 (图片, iframe 等.)\n* 对于终端用户所有资源均不可见\n* 界面交互无效 (window.open, alert, confirm 等.)\n* 错误不会停止卸载文档的过程  \n\n\n## 页面加载中的执行顺序  \n  \n从上面的定义，我们可以得出一个比较清晰的顺序了。  \n  \n1. 页面加载开始，首先肯定是先发出加载资源的请求，加载未完成之前，不触发任何事件。\n2. document加载结束并解析，此时css等其他资源未加载完成。\n\n   此时readyState为'interactive'，表明document已经load并解析完成，触发 readystatechange，然后触发DOMContentLoaded(在大多数浏览器上的表现如此)。捎带提一句，此时，加载完成且带有defer标记的脚本，会按顺序开始执行。  \n      \n3.  css、img等子资源加载完成之后  \n\n    此时触发window.load事件  \n4.  点击关闭标签或者刷新时，会依次触发beforeunload、unload事件。  \n\n可能概念看的有点枯燥，还是看下代码比较清晰。大家可以看下，下面的代码会依次输出什么。  \n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <title>文档加载事件</title>\n    <script>\n            document.addEventListener(\"DOMContentLoaded\", function (event) {\n                console.log(\"初始DOM 加载并解析\");\n            });\n            window.addEventListener(\"load\", function (event) {\n                console.log(\"window 所有资源加载完成\");\n            });\n    \n            document.onreadystatechange = function () {\n                console.log(document.readyState)\n                if (document.readyState === \"complete\") {\n                    console.log('初始DOM,加载解析完成')\n                }\n            }\n            window.addEventListener(\"beforeunload\", function (event) {\n                console.log('即将关闭')\n                event.returnValue = \"\\o/\";\n            });\n            window.addEventListener('unload', function (event) {\n                console.log('即将关闭1');\n            });\n        </script>\n    <link rel=\"stylesheet\" href=\"./test.css\">\n</head>\n\n<body>\n    <div id=\"root\">dom事件</div>\n    <script src=\"./index.js\"></script>\n</body>\n\n</html>\n```  \n   \n依次输出如下:  \n    \n```js\n    interactive //(index):15\n    初始DOM 加载并解析 //(index):8\n    complet//(index):15 \n    初始DOM,加载解析完成//(index):17 \n    window 所有资源加载完成//(index):11 \n    //点击关闭按钮\n    即将关闭\n    即将关闭2  \n```    \n### 关于ready  \n像jquery、zepto等类库中都有document一个ready方法，来确保我们的操作在初始dom加载之后进行，原生dom定义里是没有这个api的，是大牛们封装了一下判断的过程，提供我们以便利。  \n有了前面的例子，让我们猜一下他们是怎么实现的。  \n  \n1. ready对应的状态是初始化dom已经加载完成，我们来看一下什么情况下对应该情况。\n\n   有下面几个状态，complete、interactive 还有一个DOMContentLoaded也是初始dom加载完成，当然还有load事件，显然这里不会用到它，相对其他状态而言有点太晚了。 \n2. 确定触发条件之后，下面的实现就简单了，判断就行了。  \n\n   \n以zepto为例，我们看下实现：   \n \n```js \n//声明变量，不只使用interactive，是因为前面提到这些状态不一定全部出现\nreadyRE = /complete|loaded|interactive/\n\nready: function(callback){\n      // need to check if document.body exists for IE as that browser reports\n      // document ready when it hasn't yet created the body element\n      if (readyRE.test(document.readyState) && document.body) callback($)\n      else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)\n      return this\n    } \n```  \n\n至此，介绍就结束了。对我而言，明了原来不太清楚的概念，希望对大家也有所帮助。    \n\n\n\n\n\n","slug":"domevent","published":1,"updated":"2017-12-17T10:44:57.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7dij0004nl92ufzwhpdr","content":"<p>对前端同学而言，loade,unload,DOMContentLoaded等页面加载过程中会触发的事件肯定是都接触过，不过要是具体问各个事件的区别，我就不是那么能清晰的解答上来的了。正好刚刚在无阻塞脚本那看到了DOMContentLoaded事件，就来翻翻具体文档详细看一下各个事件吧。常言道温故而知新，让我们一起回头看一下<br><a id=\"more\"></a></p>\n<h2 id=\"触发时机\"><a href=\"#触发时机\" class=\"headerlink\" title=\"触发时机\"></a>触发时机</h2><p>先看下各个事件的触发时机(参考自<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">MDN</a>)  </p>\n<h3 id=\"DOMContentLoaded\"><a href=\"#DOMContentLoaded\" class=\"headerlink\" title=\"DOMContentLoaded\"></a>DOMContentLoaded</h3><p>当初始html文档完全加载并解析之后触发，无需等待样式、图片、子frame结束。作为明显的对比，load事件只有一个页面完全被加载时才触发。改用DOMContentLoaded的地方常常是load来代替，这是错误的。<br>tips: 有许多通用和独立的库提供跨浏览器方法来检测 DOM 是否已准备就绪即ready事件，后面我们可以看下zepto的实现</p>\n<h3 id=\"load\"><a href=\"#load\" class=\"headerlink\" title=\"load\"></a>load</h3><p>当一个资源及其依赖的资源结束加载时触发。从这里可以看到需要等待依赖资源的结束加载。</p>\n<h3 id=\"readystatechange\"><a href=\"#readystatechange\" class=\"headerlink\" title=\"readystatechange\"></a>readystatechange</h3><p>document有readyState属性来描述document的loading状态，readyState的改变会触发readystatechange事件.  </p>\n<ul>\n<li><p>loading  </p>\n<p>  文档仍然在加载  </p>\n</li>\n<li>interactive  </li>\n</ul>\n<p>  文档结束加载并且被解析，但是想图片，样式，frame之类的子资源仍在加载  </p>\n<ul>\n<li>complete    </li>\n</ul>\n<p>  文档和子资源已经结束加载，该状态表明将要触发load事件。  </p>\n<p>因此，我们同样可以使用该事件来判断dom的加载状态。<br>但并非所有对象都会经历 readyState 的这几个阶段，有时候需要</p>\n<h3 id=\"beforeunload\"><a href=\"#beforeunload\" class=\"headerlink\" title=\"beforeunload\"></a>beforeunload</h3><p>当浏览器窗口，文档或其资源将要卸载时，会触发beforeunload事件。这个文档是依然可见的，并且这个事件在这一刻是可以取消的.<br>如果处理函数为Event对象的returnValue属性赋值非空字符串，浏览器会弹出一个对话框，来询问用户是否确定要离开当前页面（如下示例）。有些浏览器会将返回的字符串展示在弹框里，但有些其他浏览器只展示它们自定义的信息。没有赋值时，该事件不做任何响应。<br>tip:2011年5月25号起，html5中指出，该事件中调用window.alert(), window.confirm(), and window.prompt()方法将会被忽略。</p>\n<h3 id=\"unload\"><a href=\"#unload\" class=\"headerlink\" title=\"unload\"></a>unload</h3><p>当文档或者一个子资源将要被卸载时，在beforeunload 、pagehide两个事件之后触发。<br>文档会处于一个特定状态。  </p>\n<ul>\n<li>所有资源仍存在 (图片, iframe 等.)</li>\n<li>对于终端用户所有资源均不可见</li>\n<li>界面交互无效 (window.open, alert, confirm 等.)</li>\n<li>错误不会停止卸载文档的过程  </li>\n</ul>\n<h2 id=\"页面加载中的执行顺序\"><a href=\"#页面加载中的执行顺序\" class=\"headerlink\" title=\"页面加载中的执行顺序\"></a>页面加载中的执行顺序</h2><p>从上面的定义，我们可以得出一个比较清晰的顺序了。  </p>\n<ol>\n<li>页面加载开始，首先肯定是先发出加载资源的请求，加载未完成之前，不触发任何事件。</li>\n<li><p>document加载结束并解析，此时css等其他资源未加载完成。</p>\n<p>此时readyState为’interactive’，表明document已经load并解析完成，触发 readystatechange，然后触发DOMContentLoaded(在大多数浏览器上的表现如此)。捎带提一句，此时，加载完成且带有defer标记的脚本，会按顺序开始执行。  </p>\n</li>\n<li><p>css、img等子资源加载完成之后  </p>\n<p>此时触发window.load事件  </p>\n</li>\n<li>点击关闭标签或者刷新时，会依次触发beforeunload、unload事件。  </li>\n</ol>\n<p>可能概念看的有点枯燥，还是看下代码比较清晰。大家可以看下，下面的代码会依次输出什么。  </p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文档加载事件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span>\n<span class=\"javascript\">            <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"初始DOM 加载并解析\"</span>);</span>\n<span class=\"undefined\">            });</span>\n<span class=\"javascript\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"window 所有资源加载完成\"</span>);</span>\n<span class=\"undefined\">            });</span>\n<span class=\"undefined\"></span>\n<span class=\"javascript\">            <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState)</span>\n<span class=\"javascript\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span>) {</span>\n<span class=\"javascript\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'初始DOM,加载解析完成'</span>)</span>\n<span class=\"undefined\">                }</span>\n<span class=\"undefined\">            }</span>\n<span class=\"javascript\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"beforeunload\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'即将关闭'</span>)</span>\n<span class=\"javascript\">                event.returnValue = <span class=\"string\">\"\\o/\"</span>;</span>\n<span class=\"undefined\">            });</span>\n<span class=\"javascript\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'unload'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'即将关闭1'</span>);</span>\n<span class=\"undefined\">            });</span>\n<span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./test.css\"</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span>dom事件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>依次输出如下:  </p>\n<pre><code class=\"js\">interactive <span class=\"comment\">//(index):15</span>\n初始DOM 加载并解析 <span class=\"comment\">//(index):8</span>\ncomplet<span class=\"comment\">//(index):15 </span>\n初始DOM,加载解析完成<span class=\"comment\">//(index):17 </span>\n<span class=\"built_in\">window</span> 所有资源加载完成<span class=\"comment\">//(index):11 </span>\n<span class=\"comment\">//点击关闭按钮</span>\n即将关闭\n即将关闭<span class=\"number\">2</span>\n</code></pre>\n<h3 id=\"关于ready\"><a href=\"#关于ready\" class=\"headerlink\" title=\"关于ready\"></a>关于ready</h3><p>像jquery、zepto等类库中都有document一个ready方法，来确保我们的操作在初始dom加载之后进行，原生dom定义里是没有这个api的，是大牛们封装了一下判断的过程，提供我们以便利。<br>有了前面的例子，让我们猜一下他们是怎么实现的。  </p>\n<ol>\n<li><p>ready对应的状态是初始化dom已经加载完成，我们来看一下什么情况下对应该情况。</p>\n<p>有下面几个状态，complete、interactive 还有一个DOMContentLoaded也是初始dom加载完成，当然还有load事件，显然这里不会用到它，相对其他状态而言有点太晚了。 </p>\n</li>\n<li>确定触发条件之后，下面的实现就简单了，判断就行了。  </li>\n</ol>\n<p>以zepto为例，我们看下实现：   </p>\n<pre><code class=\"js\"><span class=\"comment\">//声明变量，不只使用interactive，是因为前面提到这些状态不一定全部出现</span>\nreadyRE = <span class=\"regexp\">/complete|loaded|interactive/</span>\n\nready: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>{\n      <span class=\"comment\">// need to check if document.body exists for IE as that browser reports</span>\n      <span class=\"comment\">// document ready when it hasn't yet created the body element</span>\n      <span class=\"keyword\">if</span> (readyRE.test(<span class=\"built_in\">document</span>.readyState) &amp;&amp; <span class=\"built_in\">document</span>.body) callback($)\n      <span class=\"keyword\">else</span> <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{ callback($) }, <span class=\"literal\">false</span>)\n      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>\n    }\n</code></pre>\n<p>至此，介绍就结束了。对我而言，明了原来不太清楚的概念，希望对大家也有所帮助。    </p>\n","site":{"data":{}},"excerpt":"<p>对前端同学而言，loade,unload,DOMContentLoaded等页面加载过程中会触发的事件肯定是都接触过，不过要是具体问各个事件的区别，我就不是那么能清晰的解答上来的了。正好刚刚在无阻塞脚本那看到了DOMContentLoaded事件，就来翻翻具体文档详细看一下各个事件吧。常言道温故而知新，让我们一起回头看一下<br>","more":"</p>\n<h2 id=\"触发时机\"><a href=\"#触发时机\" class=\"headerlink\" title=\"触发时机\"></a>触发时机</h2><p>先看下各个事件的触发时机(参考自<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">MDN</a>)  </p>\n<h3 id=\"DOMContentLoaded\"><a href=\"#DOMContentLoaded\" class=\"headerlink\" title=\"DOMContentLoaded\"></a>DOMContentLoaded</h3><p>当初始html文档完全加载并解析之后触发，无需等待样式、图片、子frame结束。作为明显的对比，load事件只有一个页面完全被加载时才触发。改用DOMContentLoaded的地方常常是load来代替，这是错误的。<br>tips: 有许多通用和独立的库提供跨浏览器方法来检测 DOM 是否已准备就绪即ready事件，后面我们可以看下zepto的实现</p>\n<h3 id=\"load\"><a href=\"#load\" class=\"headerlink\" title=\"load\"></a>load</h3><p>当一个资源及其依赖的资源结束加载时触发。从这里可以看到需要等待依赖资源的结束加载。</p>\n<h3 id=\"readystatechange\"><a href=\"#readystatechange\" class=\"headerlink\" title=\"readystatechange\"></a>readystatechange</h3><p>document有readyState属性来描述document的loading状态，readyState的改变会触发readystatechange事件.  </p>\n<ul>\n<li><p>loading  </p>\n<p>  文档仍然在加载  </p>\n</li>\n<li>interactive  </li>\n</ul>\n<p>  文档结束加载并且被解析，但是想图片，样式，frame之类的子资源仍在加载  </p>\n<ul>\n<li>complete    </li>\n</ul>\n<p>  文档和子资源已经结束加载，该状态表明将要触发load事件。  </p>\n<p>因此，我们同样可以使用该事件来判断dom的加载状态。<br>但并非所有对象都会经历 readyState 的这几个阶段，有时候需要</p>\n<h3 id=\"beforeunload\"><a href=\"#beforeunload\" class=\"headerlink\" title=\"beforeunload\"></a>beforeunload</h3><p>当浏览器窗口，文档或其资源将要卸载时，会触发beforeunload事件。这个文档是依然可见的，并且这个事件在这一刻是可以取消的.<br>如果处理函数为Event对象的returnValue属性赋值非空字符串，浏览器会弹出一个对话框，来询问用户是否确定要离开当前页面（如下示例）。有些浏览器会将返回的字符串展示在弹框里，但有些其他浏览器只展示它们自定义的信息。没有赋值时，该事件不做任何响应。<br>tip:2011年5月25号起，html5中指出，该事件中调用window.alert(), window.confirm(), and window.prompt()方法将会被忽略。</p>\n<h3 id=\"unload\"><a href=\"#unload\" class=\"headerlink\" title=\"unload\"></a>unload</h3><p>当文档或者一个子资源将要被卸载时，在beforeunload 、pagehide两个事件之后触发。<br>文档会处于一个特定状态。  </p>\n<ul>\n<li>所有资源仍存在 (图片, iframe 等.)</li>\n<li>对于终端用户所有资源均不可见</li>\n<li>界面交互无效 (window.open, alert, confirm 等.)</li>\n<li>错误不会停止卸载文档的过程  </li>\n</ul>\n<h2 id=\"页面加载中的执行顺序\"><a href=\"#页面加载中的执行顺序\" class=\"headerlink\" title=\"页面加载中的执行顺序\"></a>页面加载中的执行顺序</h2><p>从上面的定义，我们可以得出一个比较清晰的顺序了。  </p>\n<ol>\n<li>页面加载开始，首先肯定是先发出加载资源的请求，加载未完成之前，不触发任何事件。</li>\n<li><p>document加载结束并解析，此时css等其他资源未加载完成。</p>\n<p>此时readyState为’interactive’，表明document已经load并解析完成，触发 readystatechange，然后触发DOMContentLoaded(在大多数浏览器上的表现如此)。捎带提一句，此时，加载完成且带有defer标记的脚本，会按顺序开始执行。  </p>\n</li>\n<li><p>css、img等子资源加载完成之后  </p>\n<p>此时触发window.load事件  </p>\n</li>\n<li>点击关闭标签或者刷新时，会依次触发beforeunload、unload事件。  </li>\n</ol>\n<p>可能概念看的有点枯燥，还是看下代码比较清晰。大家可以看下，下面的代码会依次输出什么。  </p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文档加载事件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span>\n<span class=\"javascript\">            <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"初始DOM 加载并解析\"</span>);</span>\n<span class=\"undefined\">            });</span>\n<span class=\"javascript\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"window 所有资源加载完成\"</span>);</span>\n<span class=\"undefined\">            });</span>\n<span class=\"undefined\"></span>\n<span class=\"javascript\">            <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.readyState)</span>\n<span class=\"javascript\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span>) {</span>\n<span class=\"javascript\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'初始DOM,加载解析完成'</span>)</span>\n<span class=\"undefined\">                }</span>\n<span class=\"undefined\">            }</span>\n<span class=\"javascript\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"beforeunload\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'即将关闭'</span>)</span>\n<span class=\"javascript\">                event.returnValue = <span class=\"string\">\"\\o/\"</span>;</span>\n<span class=\"undefined\">            });</span>\n<span class=\"javascript\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'unload'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span>\n<span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'即将关闭1'</span>);</span>\n<span class=\"undefined\">            });</span>\n<span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./test.css\"</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span>dom事件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>依次输出如下:  </p>\n<pre><code class=\"js\">interactive <span class=\"comment\">//(index):15</span>\n初始DOM 加载并解析 <span class=\"comment\">//(index):8</span>\ncomplet<span class=\"comment\">//(index):15 </span>\n初始DOM,加载解析完成<span class=\"comment\">//(index):17 </span>\n<span class=\"built_in\">window</span> 所有资源加载完成<span class=\"comment\">//(index):11 </span>\n<span class=\"comment\">//点击关闭按钮</span>\n即将关闭\n即将关闭<span class=\"number\">2</span>\n</code></pre>\n<h3 id=\"关于ready\"><a href=\"#关于ready\" class=\"headerlink\" title=\"关于ready\"></a>关于ready</h3><p>像jquery、zepto等类库中都有document一个ready方法，来确保我们的操作在初始dom加载之后进行，原生dom定义里是没有这个api的，是大牛们封装了一下判断的过程，提供我们以便利。<br>有了前面的例子，让我们猜一下他们是怎么实现的。  </p>\n<ol>\n<li><p>ready对应的状态是初始化dom已经加载完成，我们来看一下什么情况下对应该情况。</p>\n<p>有下面几个状态，complete、interactive 还有一个DOMContentLoaded也是初始dom加载完成，当然还有load事件，显然这里不会用到它，相对其他状态而言有点太晚了。 </p>\n</li>\n<li>确定触发条件之后，下面的实现就简单了，判断就行了。  </li>\n</ol>\n<p>以zepto为例，我们看下实现：   </p>\n<pre><code class=\"js\"><span class=\"comment\">//声明变量，不只使用interactive，是因为前面提到这些状态不一定全部出现</span>\nreadyRE = <span class=\"regexp\">/complete|loaded|interactive/</span>\n\nready: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>{\n      <span class=\"comment\">// need to check if document.body exists for IE as that browser reports</span>\n      <span class=\"comment\">// document ready when it hasn't yet created the body element</span>\n      <span class=\"keyword\">if</span> (readyRE.test(<span class=\"built_in\">document</span>.readyState) &amp;&amp; <span class=\"built_in\">document</span>.body) callback($)\n      <span class=\"keyword\">else</span> <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{ callback($) }, <span class=\"literal\">false</span>)\n      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>\n    }\n</code></pre>\n<p>至此，介绍就结束了。对我而言，明了原来不太清楚的概念，希望对大家也有所帮助。    </p>"},{"title":"深入js隐式类型转换","date":"2018-05-23T00:00:29.000Z","_content":"## 前言  \n相信刚开始了解js的时候，都会遇到 2 =='2',但是 1+2 == 1+'2'为false的情况，这时候应该会是一脸懵逼的状态，不得不感慨js弱类型的灵活让人发指，隐式类型转换就是这么猝不及防。结合实际中的情况来看，有意或无意中涉及到隐式类型转换的情况还是很多的。既然要用到，就需要掌握其原理，知其然重要知其所以然更重要。   \n  <!--more  -->\n## js的变量类型  \nJavaScript 是弱类型语言，意味着JavaScript 变量没有预先确定的类型。    \n并且变量的类型是其值的类型。也就是说变量当前的类型由其值所决定,夸张点说上一秒种的string，下一秒可能就是个array了。此外当进行某些操作时，变量可以进行类型转换，我们主动进行的就是显式类型转换，另一种就是隐式类型转换了。例如:\n\n```js\nvar a = '1';   \ntypeof a;//string \n\na =parseInt(a); //显示转换为number\ntypeof a  //number   \n\na == '1' //true\n```\n\n弱类型的特性在给我们带来便利的同时，也会给我们带来困扰。趋利避害，充分利用该特性的前提就是掌握类型转换的原理，下面一起看一下。  \n## js数据类型   \n老生常谈的两大类数据类型：   \n \n1. 原始类型    \n   Undefined、 Null、 String、 Number、 Boolean      \n2. 引用类型  \n   object   \n此外还有一个es6新增的Symbol，先不讨论它。对于这五类原始类型，突然提问可能想不全，没必要去死记硬背，可以想一下为否的常见变量及其对应值即可。   \n  \n| 0 | Number |\n| --: | --: |\n| '' | String |\n| false | Boolean |\n| null | Null |\n| undefined | Undefined |\n\n对于不同的数据格式转换规则是不同的，我们需要分别对待。   \n## 转换规则  \n既然是规范定义的规则，那就不要问为什么了，先大致看一下，争取记住。是在不行经常翻翻看看大佬的博客[es5规范](http://yanhaijing.com/es5/#about)。转换有下面这么几类，我们分别看一下具体规范。（这部分转换规则，完全可以跳过去，看到下面的实例再回头看应该更容易接受一些）  \n   \n* 转换为原始值  \n* 转换为数字  \n* 转换为字符串    \n\n\n### ToPrimitive(转换为原始值)   \n\nToPrimitive 运算符接受一个值，和一个可选的 期望类型 作参数。ToPrimitive 运算符把其值参数转换为非对象类型。如果对象有能力被转换为不止一种原语类型，可以使用可选的 期望类型 来暗示那个类型。根据下表完成转换  \n<img src='http://xxdy.tech/img/jstype/1.png'> \n\n这段定义看起来有点枯燥。转换为原始值，其实就是针对引用数据的，其目的是转换为非对象类型。   \n如果已经是原始类型，当然就不做处理了   \n对于object，返回对应的原始类型，该原始类型是由期望类型决定的，期望类型其实就是我们传递的type。直接看下面比较清楚。  \nToPrimitive方法大概长这么个样子具体如下。  \n\n```js\n/**\n* @obj 需要转换的对象\n* @type 期望转换为的原始数据类型，可选\n*/\nToPrimitive(obj,type)\n```\n\ntype可以为number或者string，两者的执行顺序有一些差别   \n**string:**   \n   \n1. 调用obj的toString方法，如果为原始值，则返回，否则下一步   \n2. 调用obj的valueOf方法，后续同上\n3. 抛出TypeError 异常\n \n**number:**    \n\n1. 调用obj的valueOf方法，如果为原始值，则返回，否则下一步   \n2. 调用obj的toString方法，后续同上\n3. 抛出TypeError 异常    \n\n其实就是调用方法先后，毕竟期望数据类型不同，如果是string当然优先调用toString。反之亦然。   \n当然type参数可以为空，这时候type的默认值会按照下面的规则设置    \n\n1.  该对象为Date，则type被设置为String  \n2.  否则，type被设置为Number \n\n对于Date数据类型，我们更多期望获得的是其转为时间后的字符串，而非毫秒值，如果为number，则会取到对应的毫秒值，显然字符串使用更多。\n其他类型对象按照取值的类型操作即可。  \n\n概括而言，ToPrimitive转成何种原始类型，取决于type，type参数可选，若指定，则按照指定类型转换，若不指定，默认根据实用情况分两种情况，Date为string，其余对象为number。那么什么时候会指定type类型呢，那就要看下面两种转换方式了。  \n\n### toNumber \n\n某些特定情况下需要用到ToNumber方法来转成number \n运算符根据下表将其参数转换为数值类型的值\n<img src='http://xxdy.tech/img/jstype/2.png'>    \n\n对于string类型，情况比较多，只要掌握常见的就行了。和直接调用Number(str)的结果一致，这里就不多提了，主要是太多提不完。  \n需要注意的是，这里调用ToPrimitive的时候，type就指定为number了。下面的toString则为string。\n\n### toString   \n\nToString 运算符根据下表将其参数转换为字符串类型的值：  \n其实了解也很简单，毕竟是个规范，借用大佬一张图：  \n<img src='http://xxdy.tech/img/jstype/3.png'> \n\n虽然是需要死记的东西，还是有些规律可循的。\n对于原始值：  \n  \n* Undefined，null，boolean \n  直接加上引号，例如'null' \n* number 则有比较长的规范,毕竟范围比较大  \n  常见的就是 '1'   NaN则为'NaN'  基本等同于上面一条\n  对于负数，则返回-+字符串 例如 '-2'  其他的先不考虑了。   \n* 对象则是先转为原始值，再按照上面的步骤进行处理。   \n\n### valueOf  \n\n当调用 valueOf 方法，采用如下步骤：\n\n1. 调用ToObject方法得到一个对象O\n2. 原始数据类型转换为对应的内置对象， 引用类型则不变 \n3. 调用该对象(O)内置valueOf方法.\n\n\n不同内置对象的valueOf实现：\n* String => 返回字符串值\n* Number => 返回数字值  \n* Date => 返回一个数字，即时间值,字符串中内容是依赖于具体实现的\n* Boolean => 返回Boolean的this值\n* Object => 返回this  \n\n对照代码更清晰一点    \n\n```js\nvar str = new String('123')\n//123\nconsole.log(str.valueOf())\nvar num = new Number(123)\n//123\nconsole.log(num.valueOf())\nvar date = new Date()\n//1526990889729\nconsole.log(date.valueOf())\nvar bool = new Boolean('123')\n//true\nconsole.log(bool.valueOf())\nvar obj = new Object({valueOf:()=>{\n    return 1\n}})\n//依赖于内部实现\nconsole.log(obj.valueOf())\n\n```\n\n\n## 运算隐式转换  \n前面提了那么多抽象概念，就是为了这里来理解具体转换的。   \n对于+运算来说，规则如下：  \n\n* +号左右分别进行取值，进行ToPrimitive()操作\n* 分别获取左右转换之后的值，如果存在String，则对其进行ToString处理后进行拼接操作。\n* 其他的都进行ToNumber处理\n* 在转换时ToPrimitive，除去Date为string外都按照ToPrimitive type为Number进行处理\n说的自己都迷糊了快，一起结合代码来看一下   \n \n```js\n1+'2'+false\n```\n\n1. 左边取原始值，依旧是Number\n2. 中间为String，则都进行toString操作  \n3. 左边转换按照toString的规则，返回'1'\n4. 得到结果temp值'12'\n5. 右边布尔值和temp同样进行1步骤\n6. temp为string，则布尔值也转为string'false'\n7. 拼接两者 得到最后结果 '12false'\n\n我们看一个复杂的\n\n```js\nvar obj1 = {\n    valueOf:function(){\n        return 1\n    }\n}\nvar obj2 = {\n    toString:function(){\n        return 'a'\n    }\n}\n//2\nconsole.log(1+obj1)\n//1a\nconsole.log('1'+ obj2)\n//1a\nconsole.log(obj1+obj2)\n```\n\n\n不管多复杂，按照上面的顺序来吧。  \n\n* 1+obj1      \n  1. 左边就不说了，number\n  2. 右边obj转为基础类型，按照type为number进行\n  3. 先调用valueOf() 得到结果为1\n  4. 两遍都是number，则进行相加得到2  \n* 1+obj2  \n  1. 左边为number \n  2. 右边同样按照按照type为number进行转化\n  3. 调用obj2.valueOf()得到的不是原始值\n  4. 调用toString() return 'a'\n  5. 依据第二条规则，存在string，则都转换为string进行拼接\n  6. 得到结果1a\n* obj1+obj2  \n  1. 两边都是引用，进行转换 ToPrimitive 默认type为number\n  2. obj1.valueOf()为1 直接返回\n  3. obj2.valueOf()得到的不是原始值\n  4. 调用toString() return 'a'\n  5. 依据第二条规则，存在string，则都转换为string进行拼接\n  6. 得到结果1a \n\n到这里相信大家对+这种运算的类型转换了解的差不多了。下面就看一下另一种隐式类型转换  \n\n### == 抽象相等比较\n\n这种比较分为两大类，\n* 类型相同\n* 类型不同\n相同的就不说了,隐式转换发生在不同类型之间。规律比较复杂，规范比较长，这里也不列举了，[大家可以查看抽象相等算法](http://yanhaijing.com/es5/#104)。简单总结一句，相等比较就不想+运算那样string优先了，是以number优先级为最高。概括而言就是，都尽量转成number来进行处理，这样也可以理解，毕竟比较还是期望比较数值。那么规则大概如下：  \n对于x == y\n\n1. 如果x,y均为number，直接比较\n\n   ```js\n    没什么可解释的了\n    1 == 2 //false\n    ```\n\n2. 如果存在对象，ToPrimitive() type为number进行转换，再进行后面比较\n\n    ```js\n    var obj1 = {\n        valueOf:function(){\n            return '1'\n        }\n    }\n    1 == obj2  //true\n    //obj1转为原始值，调用obj1.valueOf()\n    //返回原始值'1'\n    //'1'toNumber得到 1 然后比较 1 == 1\n    [] == ![] //true\n    //[]作为对象ToPrimitive得到 ''  \n    //![]作为boolean转换得到0 \n    //'' == 0 \n    //转换为 0==0 //true\n    ```\n\n3. 存在boolean，按照ToNumber将boolean转换为1或者0，再进行后面比较   \n     \n   ```js\n   //boolean 先转成number，按照上面的规则得到1  \n   //3 == 1 false\n   //0 == 0 true\n   3 == true // false\n   '0' == false //true \n   ```\n\n4. 如果x为string，y为number，x转成number进行比较\n    \n    ```js\n    //'0' toNumber()得到 0  \n    //0 == 0 true\n    '0' == 0 //true \n    ```\n\n## 结束语   \n\n#### 参考文章  \n[ECMAScript5.1中文版 + ECMAScript3 + ECMAScript（合集）](http://yanhaijing.com/es5/#101)  \n[你所忽略的js隐式转换](https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651227769&idx=1&sn=617160e64d2be13169b1b8f4506d8801&chksm=bd495ffd8a3ed6eb226d4ef193ff2ce3958d2d03d1f3047b635915f8215af40996c2f64d5c20&scene=21#wechat_redirect)  \n这篇文章的本意是为自己解惑，写到后面真的感觉比较乏味，毕竟规范性的东西多一点，不过深入了解一下总好过死记硬背。[原文请移步我的博客](https://github.com/xiaoxiangdaiyu/blog)。对于有些观点说这些属于js糟粕，完全不应该深入，怎么说呢，结合自己情况判断吧。本人水平有限，抛砖引玉共同学习。\n\n\n","source":"_posts/jstype.md","raw":"---\ntitle: 深入js隐式类型转换\ndate: 2018-05-23 08:00:29\ntags:\n---\n## 前言  \n相信刚开始了解js的时候，都会遇到 2 =='2',但是 1+2 == 1+'2'为false的情况，这时候应该会是一脸懵逼的状态，不得不感慨js弱类型的灵活让人发指，隐式类型转换就是这么猝不及防。结合实际中的情况来看，有意或无意中涉及到隐式类型转换的情况还是很多的。既然要用到，就需要掌握其原理，知其然重要知其所以然更重要。   \n  <!--more  -->\n## js的变量类型  \nJavaScript 是弱类型语言，意味着JavaScript 变量没有预先确定的类型。    \n并且变量的类型是其值的类型。也就是说变量当前的类型由其值所决定,夸张点说上一秒种的string，下一秒可能就是个array了。此外当进行某些操作时，变量可以进行类型转换，我们主动进行的就是显式类型转换，另一种就是隐式类型转换了。例如:\n\n```js\nvar a = '1';   \ntypeof a;//string \n\na =parseInt(a); //显示转换为number\ntypeof a  //number   \n\na == '1' //true\n```\n\n弱类型的特性在给我们带来便利的同时，也会给我们带来困扰。趋利避害，充分利用该特性的前提就是掌握类型转换的原理，下面一起看一下。  \n## js数据类型   \n老生常谈的两大类数据类型：   \n \n1. 原始类型    \n   Undefined、 Null、 String、 Number、 Boolean      \n2. 引用类型  \n   object   \n此外还有一个es6新增的Symbol，先不讨论它。对于这五类原始类型，突然提问可能想不全，没必要去死记硬背，可以想一下为否的常见变量及其对应值即可。   \n  \n| 0 | Number |\n| --: | --: |\n| '' | String |\n| false | Boolean |\n| null | Null |\n| undefined | Undefined |\n\n对于不同的数据格式转换规则是不同的，我们需要分别对待。   \n## 转换规则  \n既然是规范定义的规则，那就不要问为什么了，先大致看一下，争取记住。是在不行经常翻翻看看大佬的博客[es5规范](http://yanhaijing.com/es5/#about)。转换有下面这么几类，我们分别看一下具体规范。（这部分转换规则，完全可以跳过去，看到下面的实例再回头看应该更容易接受一些）  \n   \n* 转换为原始值  \n* 转换为数字  \n* 转换为字符串    \n\n\n### ToPrimitive(转换为原始值)   \n\nToPrimitive 运算符接受一个值，和一个可选的 期望类型 作参数。ToPrimitive 运算符把其值参数转换为非对象类型。如果对象有能力被转换为不止一种原语类型，可以使用可选的 期望类型 来暗示那个类型。根据下表完成转换  \n<img src='http://xxdy.tech/img/jstype/1.png'> \n\n这段定义看起来有点枯燥。转换为原始值，其实就是针对引用数据的，其目的是转换为非对象类型。   \n如果已经是原始类型，当然就不做处理了   \n对于object，返回对应的原始类型，该原始类型是由期望类型决定的，期望类型其实就是我们传递的type。直接看下面比较清楚。  \nToPrimitive方法大概长这么个样子具体如下。  \n\n```js\n/**\n* @obj 需要转换的对象\n* @type 期望转换为的原始数据类型，可选\n*/\nToPrimitive(obj,type)\n```\n\ntype可以为number或者string，两者的执行顺序有一些差别   \n**string:**   \n   \n1. 调用obj的toString方法，如果为原始值，则返回，否则下一步   \n2. 调用obj的valueOf方法，后续同上\n3. 抛出TypeError 异常\n \n**number:**    \n\n1. 调用obj的valueOf方法，如果为原始值，则返回，否则下一步   \n2. 调用obj的toString方法，后续同上\n3. 抛出TypeError 异常    \n\n其实就是调用方法先后，毕竟期望数据类型不同，如果是string当然优先调用toString。反之亦然。   \n当然type参数可以为空，这时候type的默认值会按照下面的规则设置    \n\n1.  该对象为Date，则type被设置为String  \n2.  否则，type被设置为Number \n\n对于Date数据类型，我们更多期望获得的是其转为时间后的字符串，而非毫秒值，如果为number，则会取到对应的毫秒值，显然字符串使用更多。\n其他类型对象按照取值的类型操作即可。  \n\n概括而言，ToPrimitive转成何种原始类型，取决于type，type参数可选，若指定，则按照指定类型转换，若不指定，默认根据实用情况分两种情况，Date为string，其余对象为number。那么什么时候会指定type类型呢，那就要看下面两种转换方式了。  \n\n### toNumber \n\n某些特定情况下需要用到ToNumber方法来转成number \n运算符根据下表将其参数转换为数值类型的值\n<img src='http://xxdy.tech/img/jstype/2.png'>    \n\n对于string类型，情况比较多，只要掌握常见的就行了。和直接调用Number(str)的结果一致，这里就不多提了，主要是太多提不完。  \n需要注意的是，这里调用ToPrimitive的时候，type就指定为number了。下面的toString则为string。\n\n### toString   \n\nToString 运算符根据下表将其参数转换为字符串类型的值：  \n其实了解也很简单，毕竟是个规范，借用大佬一张图：  \n<img src='http://xxdy.tech/img/jstype/3.png'> \n\n虽然是需要死记的东西，还是有些规律可循的。\n对于原始值：  \n  \n* Undefined，null，boolean \n  直接加上引号，例如'null' \n* number 则有比较长的规范,毕竟范围比较大  \n  常见的就是 '1'   NaN则为'NaN'  基本等同于上面一条\n  对于负数，则返回-+字符串 例如 '-2'  其他的先不考虑了。   \n* 对象则是先转为原始值，再按照上面的步骤进行处理。   \n\n### valueOf  \n\n当调用 valueOf 方法，采用如下步骤：\n\n1. 调用ToObject方法得到一个对象O\n2. 原始数据类型转换为对应的内置对象， 引用类型则不变 \n3. 调用该对象(O)内置valueOf方法.\n\n\n不同内置对象的valueOf实现：\n* String => 返回字符串值\n* Number => 返回数字值  \n* Date => 返回一个数字，即时间值,字符串中内容是依赖于具体实现的\n* Boolean => 返回Boolean的this值\n* Object => 返回this  \n\n对照代码更清晰一点    \n\n```js\nvar str = new String('123')\n//123\nconsole.log(str.valueOf())\nvar num = new Number(123)\n//123\nconsole.log(num.valueOf())\nvar date = new Date()\n//1526990889729\nconsole.log(date.valueOf())\nvar bool = new Boolean('123')\n//true\nconsole.log(bool.valueOf())\nvar obj = new Object({valueOf:()=>{\n    return 1\n}})\n//依赖于内部实现\nconsole.log(obj.valueOf())\n\n```\n\n\n## 运算隐式转换  \n前面提了那么多抽象概念，就是为了这里来理解具体转换的。   \n对于+运算来说，规则如下：  \n\n* +号左右分别进行取值，进行ToPrimitive()操作\n* 分别获取左右转换之后的值，如果存在String，则对其进行ToString处理后进行拼接操作。\n* 其他的都进行ToNumber处理\n* 在转换时ToPrimitive，除去Date为string外都按照ToPrimitive type为Number进行处理\n说的自己都迷糊了快，一起结合代码来看一下   \n \n```js\n1+'2'+false\n```\n\n1. 左边取原始值，依旧是Number\n2. 中间为String，则都进行toString操作  \n3. 左边转换按照toString的规则，返回'1'\n4. 得到结果temp值'12'\n5. 右边布尔值和temp同样进行1步骤\n6. temp为string，则布尔值也转为string'false'\n7. 拼接两者 得到最后结果 '12false'\n\n我们看一个复杂的\n\n```js\nvar obj1 = {\n    valueOf:function(){\n        return 1\n    }\n}\nvar obj2 = {\n    toString:function(){\n        return 'a'\n    }\n}\n//2\nconsole.log(1+obj1)\n//1a\nconsole.log('1'+ obj2)\n//1a\nconsole.log(obj1+obj2)\n```\n\n\n不管多复杂，按照上面的顺序来吧。  \n\n* 1+obj1      \n  1. 左边就不说了，number\n  2. 右边obj转为基础类型，按照type为number进行\n  3. 先调用valueOf() 得到结果为1\n  4. 两遍都是number，则进行相加得到2  \n* 1+obj2  \n  1. 左边为number \n  2. 右边同样按照按照type为number进行转化\n  3. 调用obj2.valueOf()得到的不是原始值\n  4. 调用toString() return 'a'\n  5. 依据第二条规则，存在string，则都转换为string进行拼接\n  6. 得到结果1a\n* obj1+obj2  \n  1. 两边都是引用，进行转换 ToPrimitive 默认type为number\n  2. obj1.valueOf()为1 直接返回\n  3. obj2.valueOf()得到的不是原始值\n  4. 调用toString() return 'a'\n  5. 依据第二条规则，存在string，则都转换为string进行拼接\n  6. 得到结果1a \n\n到这里相信大家对+这种运算的类型转换了解的差不多了。下面就看一下另一种隐式类型转换  \n\n### == 抽象相等比较\n\n这种比较分为两大类，\n* 类型相同\n* 类型不同\n相同的就不说了,隐式转换发生在不同类型之间。规律比较复杂，规范比较长，这里也不列举了，[大家可以查看抽象相等算法](http://yanhaijing.com/es5/#104)。简单总结一句，相等比较就不想+运算那样string优先了，是以number优先级为最高。概括而言就是，都尽量转成number来进行处理，这样也可以理解，毕竟比较还是期望比较数值。那么规则大概如下：  \n对于x == y\n\n1. 如果x,y均为number，直接比较\n\n   ```js\n    没什么可解释的了\n    1 == 2 //false\n    ```\n\n2. 如果存在对象，ToPrimitive() type为number进行转换，再进行后面比较\n\n    ```js\n    var obj1 = {\n        valueOf:function(){\n            return '1'\n        }\n    }\n    1 == obj2  //true\n    //obj1转为原始值，调用obj1.valueOf()\n    //返回原始值'1'\n    //'1'toNumber得到 1 然后比较 1 == 1\n    [] == ![] //true\n    //[]作为对象ToPrimitive得到 ''  \n    //![]作为boolean转换得到0 \n    //'' == 0 \n    //转换为 0==0 //true\n    ```\n\n3. 存在boolean，按照ToNumber将boolean转换为1或者0，再进行后面比较   \n     \n   ```js\n   //boolean 先转成number，按照上面的规则得到1  \n   //3 == 1 false\n   //0 == 0 true\n   3 == true // false\n   '0' == false //true \n   ```\n\n4. 如果x为string，y为number，x转成number进行比较\n    \n    ```js\n    //'0' toNumber()得到 0  \n    //0 == 0 true\n    '0' == 0 //true \n    ```\n\n## 结束语   \n\n#### 参考文章  \n[ECMAScript5.1中文版 + ECMAScript3 + ECMAScript（合集）](http://yanhaijing.com/es5/#101)  \n[你所忽略的js隐式转换](https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651227769&idx=1&sn=617160e64d2be13169b1b8f4506d8801&chksm=bd495ffd8a3ed6eb226d4ef193ff2ce3958d2d03d1f3047b635915f8215af40996c2f64d5c20&scene=21#wechat_redirect)  \n这篇文章的本意是为自己解惑，写到后面真的感觉比较乏味，毕竟规范性的东西多一点，不过深入了解一下总好过死记硬背。[原文请移步我的博客](https://github.com/xiaoxiangdaiyu/blog)。对于有些观点说这些属于js糟粕，完全不应该深入，怎么说呢，结合自己情况判断吧。本人水平有限，抛砖引玉共同学习。\n\n\n","slug":"jstype","published":1,"updated":"2018-05-24T02:02:37.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7diq0006nl92v07utyyl","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>相信刚开始了解js的时候，都会遇到 2 ==’2’,但是 1+2 == 1+’2’为false的情况，这时候应该会是一脸懵逼的状态，不得不感慨js弱类型的灵活让人发指，隐式类型转换就是这么猝不及防。结合实际中的情况来看，有意或无意中涉及到隐式类型转换的情况还是很多的。既然要用到，就需要掌握其原理，知其然重要知其所以然更重要。<br>  <a id=\"more\"></a></p>\n<h2 id=\"js的变量类型\"><a href=\"#js的变量类型\" class=\"headerlink\" title=\"js的变量类型\"></a>js的变量类型</h2><p>JavaScript 是弱类型语言，意味着JavaScript 变量没有预先确定的类型。<br>并且变量的类型是其值的类型。也就是说变量当前的类型由其值所决定,夸张点说上一秒种的string，下一秒可能就是个array了。此外当进行某些操作时，变量可以进行类型转换，我们主动进行的就是显式类型转换，另一种就是隐式类型转换了。例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'1'</span>;   </span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a;<span class=\"comment\">//string </span></span><br><span class=\"line\"></span><br><span class=\"line\">a =<span class=\"built_in\">parseInt</span>(a); <span class=\"comment\">//显示转换为number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a  <span class=\"comment\">//number   </span></span><br><span class=\"line\"></span><br><span class=\"line\">a == <span class=\"string\">'1'</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>弱类型的特性在给我们带来便利的同时，也会给我们带来困扰。趋利避害，充分利用该特性的前提就是掌握类型转换的原理，下面一起看一下。  </p>\n<h2 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h2><p>老生常谈的两大类数据类型：   </p>\n<ol>\n<li>原始类型<br>Undefined、 Null、 String、 Number、 Boolean      </li>\n<li>引用类型<br>object<br>此外还有一个es6新增的Symbol，先不讨论它。对于这五类原始类型，突然提问可能想不全，没必要去死记硬背，可以想一下为否的常见变量及其对应值即可。   </li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">0</th>\n<th style=\"text-align:right\">Number</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">‘’</td>\n<td style=\"text-align:right\">String</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">false</td>\n<td style=\"text-align:right\">Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">null</td>\n<td style=\"text-align:right\">Null</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">undefined</td>\n<td style=\"text-align:right\">Undefined</td>\n</tr>\n</tbody>\n</table>\n<p>对于不同的数据格式转换规则是不同的，我们需要分别对待。   </p>\n<h2 id=\"转换规则\"><a href=\"#转换规则\" class=\"headerlink\" title=\"转换规则\"></a>转换规则</h2><p>既然是规范定义的规则，那就不要问为什么了，先大致看一下，争取记住。是在不行经常翻翻看看大佬的博客<a href=\"http://yanhaijing.com/es5/#about\" target=\"_blank\" rel=\"noopener\">es5规范</a>。转换有下面这么几类，我们分别看一下具体规范。（这部分转换规则，完全可以跳过去，看到下面的实例再回头看应该更容易接受一些）  </p>\n<ul>\n<li>转换为原始值  </li>\n<li>转换为数字  </li>\n<li>转换为字符串    </li>\n</ul>\n<h3 id=\"ToPrimitive-转换为原始值\"><a href=\"#ToPrimitive-转换为原始值\" class=\"headerlink\" title=\"ToPrimitive(转换为原始值)\"></a>ToPrimitive(转换为原始值)</h3><p>ToPrimitive 运算符接受一个值，和一个可选的 期望类型 作参数。ToPrimitive 运算符把其值参数转换为非对象类型。如果对象有能力被转换为不止一种原语类型，可以使用可选的 期望类型 来暗示那个类型。根据下表完成转换<br><img src=\"http://xxdy.tech/img/jstype/1.png\"> </p>\n<p>这段定义看起来有点枯燥。转换为原始值，其实就是针对引用数据的，其目的是转换为非对象类型。<br>如果已经是原始类型，当然就不做处理了<br>对于object，返回对应的原始类型，该原始类型是由期望类型决定的，期望类型其实就是我们传递的type。直接看下面比较清楚。<br>ToPrimitive方法大概长这么个样子具体如下。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @obj 需要转换的对象</span></span><br><span class=\"line\"><span class=\"comment\">* @type 期望转换为的原始数据类型，可选</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">ToPrimitive(obj,type)</span><br></pre></td></tr></table></figure>\n<p>type可以为number或者string，两者的执行顺序有一些差别<br><strong>string:</strong>   </p>\n<ol>\n<li>调用obj的toString方法，如果为原始值，则返回，否则下一步   </li>\n<li>调用obj的valueOf方法，后续同上</li>\n<li>抛出TypeError 异常</li>\n</ol>\n<p><strong>number:</strong>    </p>\n<ol>\n<li>调用obj的valueOf方法，如果为原始值，则返回，否则下一步   </li>\n<li>调用obj的toString方法，后续同上</li>\n<li>抛出TypeError 异常    </li>\n</ol>\n<p>其实就是调用方法先后，毕竟期望数据类型不同，如果是string当然优先调用toString。反之亦然。<br>当然type参数可以为空，这时候type的默认值会按照下面的规则设置    </p>\n<ol>\n<li>该对象为Date，则type被设置为String  </li>\n<li>否则，type被设置为Number </li>\n</ol>\n<p>对于Date数据类型，我们更多期望获得的是其转为时间后的字符串，而非毫秒值，如果为number，则会取到对应的毫秒值，显然字符串使用更多。<br>其他类型对象按照取值的类型操作即可。  </p>\n<p>概括而言，ToPrimitive转成何种原始类型，取决于type，type参数可选，若指定，则按照指定类型转换，若不指定，默认根据实用情况分两种情况，Date为string，其余对象为number。那么什么时候会指定type类型呢，那就要看下面两种转换方式了。  </p>\n<h3 id=\"toNumber\"><a href=\"#toNumber\" class=\"headerlink\" title=\"toNumber\"></a>toNumber</h3><p>某些特定情况下需要用到ToNumber方法来转成number<br>运算符根据下表将其参数转换为数值类型的值<br><img src=\"http://xxdy.tech/img/jstype/2.png\">    </p>\n<p>对于string类型，情况比较多，只要掌握常见的就行了。和直接调用Number(str)的结果一致，这里就不多提了，主要是太多提不完。<br>需要注意的是，这里调用ToPrimitive的时候，type就指定为number了。下面的toString则为string。</p>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h3><p>ToString 运算符根据下表将其参数转换为字符串类型的值：<br>其实了解也很简单，毕竟是个规范，借用大佬一张图：<br><img src=\"http://xxdy.tech/img/jstype/3.png\"> </p>\n<p>虽然是需要死记的东西，还是有些规律可循的。<br>对于原始值：  </p>\n<ul>\n<li>Undefined，null，boolean<br>直接加上引号，例如’null’ </li>\n<li>number 则有比较长的规范,毕竟范围比较大<br>常见的就是 ‘1’   NaN则为’NaN’  基本等同于上面一条<br>对于负数，则返回-+字符串 例如 ‘-2’  其他的先不考虑了。   </li>\n<li>对象则是先转为原始值，再按照上面的步骤进行处理。   </li>\n</ul>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf\"></a>valueOf</h3><p>当调用 valueOf 方法，采用如下步骤：</p>\n<ol>\n<li>调用ToObject方法得到一个对象O</li>\n<li>原始数据类型转换为对应的内置对象， 引用类型则不变 </li>\n<li>调用该对象(O)内置valueOf方法.</li>\n</ol>\n<p>不同内置对象的valueOf实现：</p>\n<ul>\n<li>String =&gt; 返回字符串值</li>\n<li>Number =&gt; 返回数字值  </li>\n<li>Date =&gt; 返回一个数字，即时间值,字符串中内容是依赖于具体实现的</li>\n<li>Boolean =&gt; 返回Boolean的this值</li>\n<li>Object =&gt; 返回this  </li>\n</ul>\n<p>对照代码更清晰一点    </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'123'</span>)</span><br><span class=\"line\"><span class=\"comment\">//123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.valueOf())</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"comment\">//123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.valueOf())</span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\"><span class=\"comment\">//1526990889729</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.valueOf())</span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"string\">'123'</span>)</span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bool.valueOf())</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(&#123;<span class=\"attr\">valueOf</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//依赖于内部实现</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.valueOf())</span><br></pre></td></tr></table></figure>\n<h2 id=\"运算隐式转换\"><a href=\"#运算隐式转换\" class=\"headerlink\" title=\"运算隐式转换\"></a>运算隐式转换</h2><p>前面提了那么多抽象概念，就是为了这里来理解具体转换的。<br>对于+运算来说，规则如下：  </p>\n<ul>\n<li>+号左右分别进行取值，进行ToPrimitive()操作</li>\n<li>分别获取左右转换之后的值，如果存在String，则对其进行ToString处理后进行拼接操作。</li>\n<li>其他的都进行ToNumber处理</li>\n<li>在转换时ToPrimitive，除去Date为string外都按照ToPrimitive type为Number进行处理<br>说的自己都迷糊了快，一起结合代码来看一下   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>+<span class=\"string\">'2'</span>+<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>左边取原始值，依旧是Number</li>\n<li>中间为String，则都进行toString操作  </li>\n<li>左边转换按照toString的规则，返回’1’</li>\n<li>得到结果temp值’12’</li>\n<li>右边布尔值和temp同样进行1步骤</li>\n<li>temp为string，则布尔值也转为string’false’</li>\n<li>拼接两者 得到最后结果 ‘12false’</li>\n</ol>\n<p>我们看一个复杂的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    valueOf:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    toString:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>+obj1)</span><br><span class=\"line\"><span class=\"comment\">//1a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>+ obj2)</span><br><span class=\"line\"><span class=\"comment\">//1a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1+obj2)</span><br></pre></td></tr></table></figure>\n<p>不管多复杂，按照上面的顺序来吧。  </p>\n<ul>\n<li>1+obj1      <ol>\n<li>左边就不说了，number</li>\n<li>右边obj转为基础类型，按照type为number进行</li>\n<li>先调用valueOf() 得到结果为1</li>\n<li>两遍都是number，则进行相加得到2  </li>\n</ol>\n</li>\n<li>1+obj2  <ol>\n<li>左边为number </li>\n<li>右边同样按照按照type为number进行转化</li>\n<li>调用obj2.valueOf()得到的不是原始值</li>\n<li>调用toString() return ‘a’</li>\n<li>依据第二条规则，存在string，则都转换为string进行拼接</li>\n<li>得到结果1a</li>\n</ol>\n</li>\n<li>obj1+obj2  <ol>\n<li>两边都是引用，进行转换 ToPrimitive 默认type为number</li>\n<li>obj1.valueOf()为1 直接返回</li>\n<li>obj2.valueOf()得到的不是原始值</li>\n<li>调用toString() return ‘a’</li>\n<li>依据第二条规则，存在string，则都转换为string进行拼接</li>\n<li>得到结果1a </li>\n</ol>\n</li>\n</ul>\n<p>到这里相信大家对+这种运算的类型转换了解的差不多了。下面就看一下另一种隐式类型转换  </p>\n<h3 id=\"抽象相等比较\"><a href=\"#抽象相等比较\" class=\"headerlink\" title=\"== 抽象相等比较\"></a>== 抽象相等比较</h3><p>这种比较分为两大类，</p>\n<ul>\n<li>类型相同</li>\n<li>类型不同<br>相同的就不说了,隐式转换发生在不同类型之间。规律比较复杂，规范比较长，这里也不列举了，<a href=\"http://yanhaijing.com/es5/#104\" target=\"_blank\" rel=\"noopener\">大家可以查看抽象相等算法</a>。简单总结一句，相等比较就不想+运算那样string优先了，是以number优先级为最高。概括而言就是，都尽量转成number来进行处理，这样也可以理解，毕竟比较还是期望比较数值。那么规则大概如下：<br>对于x == y</li>\n</ul>\n<ol>\n<li><p>如果x,y均为number，直接比较</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">没什么可解释的了</span><br><span class=\"line\"><span class=\"number\">1</span> == <span class=\"number\">2</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果存在对象，ToPrimitive() type为number进行转换，再进行后面比较</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    valueOf:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'1'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> == obj2  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//obj1转为原始值，调用obj1.valueOf()</span></span><br><span class=\"line\"><span class=\"comment\">//返回原始值'1'</span></span><br><span class=\"line\"><span class=\"comment\">//'1'toNumber得到 1 然后比较 1 == 1</span></span><br><span class=\"line\">[] == ![] <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//[]作为对象ToPrimitive得到 ''  </span></span><br><span class=\"line\"><span class=\"comment\">//![]作为boolean转换得到0 </span></span><br><span class=\"line\"><span class=\"comment\">//'' == 0 </span></span><br><span class=\"line\"><span class=\"comment\">//转换为 0==0 //true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>存在boolean，按照ToNumber将boolean转换为1或者0，再进行后面比较   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//boolean 先转成number，按照上面的规则得到1  </span></span><br><span class=\"line\"><span class=\"comment\">//3 == 1 false</span></span><br><span class=\"line\"><span class=\"comment\">//0 == 0 true</span></span><br><span class=\"line\"><span class=\"number\">3</span> == <span class=\"literal\">true</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">'0'</span> == <span class=\"literal\">false</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果x为string，y为number，x转成number进行比较</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//'0' toNumber()得到 0  </span></span><br><span class=\"line\"><span class=\"comment\">//0 == 0 true</span></span><br><span class=\"line\"><span class=\"string\">'0'</span> == <span class=\"number\">0</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"http://yanhaijing.com/es5/#101\" target=\"_blank\" rel=\"noopener\">ECMAScript5.1中文版 + ECMAScript3 + ECMAScript（合集）</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651227769&amp;idx=1&amp;sn=617160e64d2be13169b1b8f4506d8801&amp;chksm=bd495ffd8a3ed6eb226d4ef193ff2ce3958d2d03d1f3047b635915f8215af40996c2f64d5c20&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">你所忽略的js隐式转换</a><br>这篇文章的本意是为自己解惑，写到后面真的感觉比较乏味，毕竟规范性的东西多一点，不过深入了解一下总好过死记硬背。<a href=\"https://github.com/xiaoxiangdaiyu/blog\" target=\"_blank\" rel=\"noopener\">原文请移步我的博客</a>。对于有些观点说这些属于js糟粕，完全不应该深入，怎么说呢，结合自己情况判断吧。本人水平有限，抛砖引玉共同学习。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>相信刚开始了解js的时候，都会遇到 2 ==’2’,但是 1+2 == 1+’2’为false的情况，这时候应该会是一脸懵逼的状态，不得不感慨js弱类型的灵活让人发指，隐式类型转换就是这么猝不及防。结合实际中的情况来看，有意或无意中涉及到隐式类型转换的情况还是很多的。既然要用到，就需要掌握其原理，知其然重要知其所以然更重要。<br>","more":"</p>\n<h2 id=\"js的变量类型\"><a href=\"#js的变量类型\" class=\"headerlink\" title=\"js的变量类型\"></a>js的变量类型</h2><p>JavaScript 是弱类型语言，意味着JavaScript 变量没有预先确定的类型。<br>并且变量的类型是其值的类型。也就是说变量当前的类型由其值所决定,夸张点说上一秒种的string，下一秒可能就是个array了。此外当进行某些操作时，变量可以进行类型转换，我们主动进行的就是显式类型转换，另一种就是隐式类型转换了。例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'1'</span>;   </span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a;<span class=\"comment\">//string </span></span><br><span class=\"line\"></span><br><span class=\"line\">a =<span class=\"built_in\">parseInt</span>(a); <span class=\"comment\">//显示转换为number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a  <span class=\"comment\">//number   </span></span><br><span class=\"line\"></span><br><span class=\"line\">a == <span class=\"string\">'1'</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>弱类型的特性在给我们带来便利的同时，也会给我们带来困扰。趋利避害，充分利用该特性的前提就是掌握类型转换的原理，下面一起看一下。  </p>\n<h2 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h2><p>老生常谈的两大类数据类型：   </p>\n<ol>\n<li>原始类型<br>Undefined、 Null、 String、 Number、 Boolean      </li>\n<li>引用类型<br>object<br>此外还有一个es6新增的Symbol，先不讨论它。对于这五类原始类型，突然提问可能想不全，没必要去死记硬背，可以想一下为否的常见变量及其对应值即可。   </li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">0</th>\n<th style=\"text-align:right\">Number</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">‘’</td>\n<td style=\"text-align:right\">String</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">false</td>\n<td style=\"text-align:right\">Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">null</td>\n<td style=\"text-align:right\">Null</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">undefined</td>\n<td style=\"text-align:right\">Undefined</td>\n</tr>\n</tbody>\n</table>\n<p>对于不同的数据格式转换规则是不同的，我们需要分别对待。   </p>\n<h2 id=\"转换规则\"><a href=\"#转换规则\" class=\"headerlink\" title=\"转换规则\"></a>转换规则</h2><p>既然是规范定义的规则，那就不要问为什么了，先大致看一下，争取记住。是在不行经常翻翻看看大佬的博客<a href=\"http://yanhaijing.com/es5/#about\" target=\"_blank\" rel=\"noopener\">es5规范</a>。转换有下面这么几类，我们分别看一下具体规范。（这部分转换规则，完全可以跳过去，看到下面的实例再回头看应该更容易接受一些）  </p>\n<ul>\n<li>转换为原始值  </li>\n<li>转换为数字  </li>\n<li>转换为字符串    </li>\n</ul>\n<h3 id=\"ToPrimitive-转换为原始值\"><a href=\"#ToPrimitive-转换为原始值\" class=\"headerlink\" title=\"ToPrimitive(转换为原始值)\"></a>ToPrimitive(转换为原始值)</h3><p>ToPrimitive 运算符接受一个值，和一个可选的 期望类型 作参数。ToPrimitive 运算符把其值参数转换为非对象类型。如果对象有能力被转换为不止一种原语类型，可以使用可选的 期望类型 来暗示那个类型。根据下表完成转换<br><img src=\"http://xxdy.tech/img/jstype/1.png\"> </p>\n<p>这段定义看起来有点枯燥。转换为原始值，其实就是针对引用数据的，其目的是转换为非对象类型。<br>如果已经是原始类型，当然就不做处理了<br>对于object，返回对应的原始类型，该原始类型是由期望类型决定的，期望类型其实就是我们传递的type。直接看下面比较清楚。<br>ToPrimitive方法大概长这么个样子具体如下。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @obj 需要转换的对象</span></span><br><span class=\"line\"><span class=\"comment\">* @type 期望转换为的原始数据类型，可选</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">ToPrimitive(obj,type)</span><br></pre></td></tr></table></figure>\n<p>type可以为number或者string，两者的执行顺序有一些差别<br><strong>string:</strong>   </p>\n<ol>\n<li>调用obj的toString方法，如果为原始值，则返回，否则下一步   </li>\n<li>调用obj的valueOf方法，后续同上</li>\n<li>抛出TypeError 异常</li>\n</ol>\n<p><strong>number:</strong>    </p>\n<ol>\n<li>调用obj的valueOf方法，如果为原始值，则返回，否则下一步   </li>\n<li>调用obj的toString方法，后续同上</li>\n<li>抛出TypeError 异常    </li>\n</ol>\n<p>其实就是调用方法先后，毕竟期望数据类型不同，如果是string当然优先调用toString。反之亦然。<br>当然type参数可以为空，这时候type的默认值会按照下面的规则设置    </p>\n<ol>\n<li>该对象为Date，则type被设置为String  </li>\n<li>否则，type被设置为Number </li>\n</ol>\n<p>对于Date数据类型，我们更多期望获得的是其转为时间后的字符串，而非毫秒值，如果为number，则会取到对应的毫秒值，显然字符串使用更多。<br>其他类型对象按照取值的类型操作即可。  </p>\n<p>概括而言，ToPrimitive转成何种原始类型，取决于type，type参数可选，若指定，则按照指定类型转换，若不指定，默认根据实用情况分两种情况，Date为string，其余对象为number。那么什么时候会指定type类型呢，那就要看下面两种转换方式了。  </p>\n<h3 id=\"toNumber\"><a href=\"#toNumber\" class=\"headerlink\" title=\"toNumber\"></a>toNumber</h3><p>某些特定情况下需要用到ToNumber方法来转成number<br>运算符根据下表将其参数转换为数值类型的值<br><img src=\"http://xxdy.tech/img/jstype/2.png\">    </p>\n<p>对于string类型，情况比较多，只要掌握常见的就行了。和直接调用Number(str)的结果一致，这里就不多提了，主要是太多提不完。<br>需要注意的是，这里调用ToPrimitive的时候，type就指定为number了。下面的toString则为string。</p>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h3><p>ToString 运算符根据下表将其参数转换为字符串类型的值：<br>其实了解也很简单，毕竟是个规范，借用大佬一张图：<br><img src=\"http://xxdy.tech/img/jstype/3.png\"> </p>\n<p>虽然是需要死记的东西，还是有些规律可循的。<br>对于原始值：  </p>\n<ul>\n<li>Undefined，null，boolean<br>直接加上引号，例如’null’ </li>\n<li>number 则有比较长的规范,毕竟范围比较大<br>常见的就是 ‘1’   NaN则为’NaN’  基本等同于上面一条<br>对于负数，则返回-+字符串 例如 ‘-2’  其他的先不考虑了。   </li>\n<li>对象则是先转为原始值，再按照上面的步骤进行处理。   </li>\n</ul>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf\"></a>valueOf</h3><p>当调用 valueOf 方法，采用如下步骤：</p>\n<ol>\n<li>调用ToObject方法得到一个对象O</li>\n<li>原始数据类型转换为对应的内置对象， 引用类型则不变 </li>\n<li>调用该对象(O)内置valueOf方法.</li>\n</ol>\n<p>不同内置对象的valueOf实现：</p>\n<ul>\n<li>String =&gt; 返回字符串值</li>\n<li>Number =&gt; 返回数字值  </li>\n<li>Date =&gt; 返回一个数字，即时间值,字符串中内容是依赖于具体实现的</li>\n<li>Boolean =&gt; 返回Boolean的this值</li>\n<li>Object =&gt; 返回this  </li>\n</ul>\n<p>对照代码更清晰一点    </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'123'</span>)</span><br><span class=\"line\"><span class=\"comment\">//123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.valueOf())</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"comment\">//123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.valueOf())</span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\"><span class=\"comment\">//1526990889729</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.valueOf())</span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"string\">'123'</span>)</span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bool.valueOf())</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(&#123;<span class=\"attr\">valueOf</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//依赖于内部实现</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.valueOf())</span><br></pre></td></tr></table></figure>\n<h2 id=\"运算隐式转换\"><a href=\"#运算隐式转换\" class=\"headerlink\" title=\"运算隐式转换\"></a>运算隐式转换</h2><p>前面提了那么多抽象概念，就是为了这里来理解具体转换的。<br>对于+运算来说，规则如下：  </p>\n<ul>\n<li>+号左右分别进行取值，进行ToPrimitive()操作</li>\n<li>分别获取左右转换之后的值，如果存在String，则对其进行ToString处理后进行拼接操作。</li>\n<li>其他的都进行ToNumber处理</li>\n<li>在转换时ToPrimitive，除去Date为string外都按照ToPrimitive type为Number进行处理<br>说的自己都迷糊了快，一起结合代码来看一下   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>+<span class=\"string\">'2'</span>+<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>左边取原始值，依旧是Number</li>\n<li>中间为String，则都进行toString操作  </li>\n<li>左边转换按照toString的规则，返回’1’</li>\n<li>得到结果temp值’12’</li>\n<li>右边布尔值和temp同样进行1步骤</li>\n<li>temp为string，则布尔值也转为string’false’</li>\n<li>拼接两者 得到最后结果 ‘12false’</li>\n</ol>\n<p>我们看一个复杂的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    valueOf:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    toString:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>+obj1)</span><br><span class=\"line\"><span class=\"comment\">//1a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>+ obj2)</span><br><span class=\"line\"><span class=\"comment\">//1a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1+obj2)</span><br></pre></td></tr></table></figure>\n<p>不管多复杂，按照上面的顺序来吧。  </p>\n<ul>\n<li>1+obj1      <ol>\n<li>左边就不说了，number</li>\n<li>右边obj转为基础类型，按照type为number进行</li>\n<li>先调用valueOf() 得到结果为1</li>\n<li>两遍都是number，则进行相加得到2  </li>\n</ol>\n</li>\n<li>1+obj2  <ol>\n<li>左边为number </li>\n<li>右边同样按照按照type为number进行转化</li>\n<li>调用obj2.valueOf()得到的不是原始值</li>\n<li>调用toString() return ‘a’</li>\n<li>依据第二条规则，存在string，则都转换为string进行拼接</li>\n<li>得到结果1a</li>\n</ol>\n</li>\n<li>obj1+obj2  <ol>\n<li>两边都是引用，进行转换 ToPrimitive 默认type为number</li>\n<li>obj1.valueOf()为1 直接返回</li>\n<li>obj2.valueOf()得到的不是原始值</li>\n<li>调用toString() return ‘a’</li>\n<li>依据第二条规则，存在string，则都转换为string进行拼接</li>\n<li>得到结果1a </li>\n</ol>\n</li>\n</ul>\n<p>到这里相信大家对+这种运算的类型转换了解的差不多了。下面就看一下另一种隐式类型转换  </p>\n<h3 id=\"抽象相等比较\"><a href=\"#抽象相等比较\" class=\"headerlink\" title=\"== 抽象相等比较\"></a>== 抽象相等比较</h3><p>这种比较分为两大类，</p>\n<ul>\n<li>类型相同</li>\n<li>类型不同<br>相同的就不说了,隐式转换发生在不同类型之间。规律比较复杂，规范比较长，这里也不列举了，<a href=\"http://yanhaijing.com/es5/#104\" target=\"_blank\" rel=\"noopener\">大家可以查看抽象相等算法</a>。简单总结一句，相等比较就不想+运算那样string优先了，是以number优先级为最高。概括而言就是，都尽量转成number来进行处理，这样也可以理解，毕竟比较还是期望比较数值。那么规则大概如下：<br>对于x == y</li>\n</ul>\n<ol>\n<li><p>如果x,y均为number，直接比较</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">没什么可解释的了</span><br><span class=\"line\"><span class=\"number\">1</span> == <span class=\"number\">2</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果存在对象，ToPrimitive() type为number进行转换，再进行后面比较</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    valueOf:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'1'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> == obj2  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//obj1转为原始值，调用obj1.valueOf()</span></span><br><span class=\"line\"><span class=\"comment\">//返回原始值'1'</span></span><br><span class=\"line\"><span class=\"comment\">//'1'toNumber得到 1 然后比较 1 == 1</span></span><br><span class=\"line\">[] == ![] <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//[]作为对象ToPrimitive得到 ''  </span></span><br><span class=\"line\"><span class=\"comment\">//![]作为boolean转换得到0 </span></span><br><span class=\"line\"><span class=\"comment\">//'' == 0 </span></span><br><span class=\"line\"><span class=\"comment\">//转换为 0==0 //true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>存在boolean，按照ToNumber将boolean转换为1或者0，再进行后面比较   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//boolean 先转成number，按照上面的规则得到1  </span></span><br><span class=\"line\"><span class=\"comment\">//3 == 1 false</span></span><br><span class=\"line\"><span class=\"comment\">//0 == 0 true</span></span><br><span class=\"line\"><span class=\"number\">3</span> == <span class=\"literal\">true</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">'0'</span> == <span class=\"literal\">false</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果x为string，y为number，x转成number进行比较</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//'0' toNumber()得到 0  </span></span><br><span class=\"line\"><span class=\"comment\">//0 == 0 true</span></span><br><span class=\"line\"><span class=\"string\">'0'</span> == <span class=\"number\">0</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"http://yanhaijing.com/es5/#101\" target=\"_blank\" rel=\"noopener\">ECMAScript5.1中文版 + ECMAScript3 + ECMAScript（合集）</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651227769&amp;idx=1&amp;sn=617160e64d2be13169b1b8f4506d8801&amp;chksm=bd495ffd8a3ed6eb226d4ef193ff2ce3958d2d03d1f3047b635915f8215af40996c2f64d5c20&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">你所忽略的js隐式转换</a><br>这篇文章的本意是为自己解惑，写到后面真的感觉比较乏味，毕竟规范性的东西多一点，不过深入了解一下总好过死记硬背。<a href=\"https://github.com/xiaoxiangdaiyu/blog\" target=\"_blank\" rel=\"noopener\">原文请移步我的博客</a>。对于有些观点说这些属于js糟粕，完全不应该深入，怎么说呢，结合自己情况判断吧。本人水平有限，抛砖引玉共同学习。</p>"},{"title":"前端er应该了解的PWA","date":"2018-05-08T16:00:00.000Z","_content":"## 一、传统web 应用  \n当前web应用在移动时代并没有达到其在桌面设备上流行的程度，下面有张图来对比与原生应用之间的差别。     \n<img src='/img/pwa/1.png'/>   \n究其原因，无外乎下面不可避免的几点：\n* 移动设备网络限制-不可忽略的加载时间 \n* web应用依赖于浏览器作为入口  \n* 体验与原生的差距 \n<!-- more -->\n假如能解决以上的几点，对web app 来说会有多大的提升可以想象。\n## 二、PWA是什么  \nPWA 全称Progressive Web Apps(渐进式Web应用程序)，旨在使用现有的web技术提供用户更优的使用体验。\n基本要求    \n \n* 可靠（Reliable）\n    即使在不稳定的网络环境下，也能瞬间加载并展现\n* 快速响应（Fast）\n    快速响应，并且有平滑的动画响应用户的操作\n* 粘性(Engaging)\n    像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面   \n    \nPWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。  \n\n除以上的基准要求外，还应该包括以下特性：  \n\n* 渐进式 - 适用于所有浏览器，因为它是以渐进式增强作为宗旨开发的\n* 连接无关性 - 能够借助 Service Worker 在离线或者网络较差的情况下正常访问\n* 类似应用 - 由于是在 App Shell 模型基础上开发，因为应具有 Native App 的交互和导航，给用户 Native App 的体验\n* 持续更新 - 始终是最新的，无版本和更新问题\n* 安全 - 通过 HTTPS 协议提供服务，防止窥探和确保内容不被篡改\n* 可索引 - 应用清单文件和 Service Worker 可以让搜索引擎索引到，从而将其识别为『应用』\n* 粘性 - 通过推送离线通知等，可以让用户回流\n* 可安装 - 用户可以添加常用的 webapp 到桌面，免去去应用商店下载的麻烦\n* 可链接 - 通过链接即可分享内容，无需下载安装  \n\n\n看起来有点眼花缭乱，这又是一个新的飞起的轮子吗？这里重申一下,PWA背后不是一种新的技术，而是集合当前多种web技术的一种集合。分别利用各自的功能来完成渐进式的整体需求。下面就沿着前面提出的问题分别了解一下相关技术  \n\n## 三、技术组成  \n由以下几种技术构成：  \n\n* App Manifest\n* Service Worker\n* Notifications API\n* Push API  \n\n其中Service Worker是PWA技术的关键，它们可以让app满足上面的三基准。其他技术则是锦上添花，让app更加的强大。 \n### 3.1 service worker背景\n#### 离线缓存背景  \n针对网页的体验，从前到后都做了很多努力，极力去降低响应时间，这里就不表述多样的技术手段。\n另一个方向的就是缓存，减少与服务器非必要的交互，不过对于离线的情况下浏览器缓存就无力了，\n这样离线缓存的需求就出现了。\n#### 离线缓存的历程   \nweb应用在离线缓存发展的过程中也不是一簇而就的，经历了逐渐完善的过程。  \n初期的解决方案是AppCache(原来阿波罗的h5接入过)\n 然而，事实证明这是一个失败的尝试，缺陷太多，已经被废弃了。具体可以查看Application Cache is a douchebag\n但是方向还是正确的，那就继续孜孜不倦的探索。\n#### workers \n持久化先放一边，来谈谈另一个问题\n基于浏览器中的 javaScript 单线程的现实逐渐不能满足现代web需求的现状,例如耗时的计算，用户的交互显然会受影响。\n为了将这些耗时操作从主线程中解放出来，早期W3C新增了一个Web Worker 的 API，可以脱离主线程单独执行，并且可以与主线程交互。\n不过Web Worker是临时性的依赖于创建页面 ，不能满足我们持久化的需求。\n冲着这个目标，下面就比较容易解决了，搞个能持久存在的就行了。\n在Web Worker的基础上，W3C新增了service worker来满足我们持久化的需求。\n其生命周期与页面无关，关联页面未关闭时，它也可以退出，没有关联页面时，它也可以启动\n功能  \n\nService Worker虽然满足了离线缓存来，其功能可不仅仅局限于此。  可以提供  \n\n* 丰富的离线体验，\n* 周期的后台同步，\n* 消息推送通知，\n* 拦截和处理网络请求，\n* 管理资源缓存\n这些正好也是PWA的目的，所以说Service Worker是PWA的关键技术。 \n#### 前提条件\nService Worker 出于安全性和其实现原理，在使用的时候有一定的前提条件。\n* 由于 Service Worker 要求 HTTPS 的环境  \n    当然一般浏览器允许调试 Service Worker 的时候 host 为 localhost 或者 127.0.0.1 \n* Service Worker 的缓存机制是依赖 Cache API (略过)\n* 依赖 HTML5 fetch API（略过）\n* 依赖 Promise 实现   \n由上可知，不是所有的浏览器都支持的，支持情况大概如下：  \n\n <img src='/img/pwa/2.png'/>\niOS 内的所有的浏览器都基于 safari，所以iOS要在11.3以上\nIE是放弃支持了，不过Edge好歹支持了。     \n### 3.2 Cache  \n\nCache是Service Worker衍生出来的API，配合Service Worker实现对资源请求的缓存。\n不过cache并不直接缓存字符串，而是直接缓存资源请求（css、js、html等）。  \ncache也是key-value形式，一般来说key就是request，value就是response   \n \n* caches.open(cacheName) 打开一个cache   \n* caches是global对象，返回一个带有cache返回值的Promise\n* cache.keys() 遍历cache中所有键，得到value的集合\n* cache.match(Request|url) 在cache中匹配传入的request，返回Promise；  \n* cache.matchAll只有第一个参数与match不同，需要一个request的数组，当然返回的结果也是response的数组\n* cache.add(Request|url) 并不是单纯的add，因为传入的是request或者url，在cache.add内部会自动去调用fetch取回request的请求结果，然后才是把response存入cache；\n* cache.addAll类似，通常在sw install的时候用cache.addAll把所有需要缓存的文件都请求一遍\n* cache.put(Request, Response) 这个相当于cache.add的第二步，即fetch到response后存入cache\n* cache.delete(Request|url) 删除缓存     \n\n \n### 3.3 注册Service Worker         \n\n注册即声明sw文件的位置，显然应该在主js中引入。大概如下：  \n\n```js\n//基于promise\nfunction registerServiceWorker(){\n    // 注册service worker\n    return navigator.serviceWorker.register('./sw1.js').then(registration => {\n        console.log('注册成功');\n        // 返回\n        return registration;\n    })\n    .catch(err => {\n        console.error('注册失败', err);\n    });\n}\nwindow.onload = function () {\n    //是否支持\n    if (!('serviceWorker' in navigator)) {\n        return;\n    }\n    registerServiceWorker()\n}\n```   \n### 3.4 生命周期      \n\nService worker 有一个独立于web 页面的生命周期。\n如果在网站上安装 serice worker ，你需要注册，注册后浏览器会在后台安装 service worker。然后进入下面的不同阶段。\n激活之后，service worker 将控制所有的页面，纳入它的范围，不过第一次在页面注册 service worker 时不会控制页面，直到它再次加载。\n service worker 生效之后,它会处于下面两种状态之一：  \n \n* service worker 终止来节省内存，\n* 页面发起网络请求后，它将处理请求获取和消息事件。  \n\n\n由上图看知，分为这么几个阶段：  \n  \n* Installing   \n           发生在 Service Worker 注册之后，表示开始安装，触发 install 事件回调指定一些静态资源进行离线缓存 \n* Installed\n           Service Worker 已经完成了安装，并且等待其他的 Service Worker 线程被关闭。\n* Activating \n          在这个状态下没有被其他的 Service Worker 控制的客户端，允许当前的 worker 完成安装\n* Activated   \n          在这个状态会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)\n* Redundant\n         被替换，即被销毁  \n         \n了解声明周期其实是为了我们在不同时间段去监听事件来完成相应操作。对PWA来说主要两个事件。\n \n* install 事件回调：\n \nevent.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。\nself.skipWaiting()：self 是当前 context 的 global 变量，执行该方法表示强制当前处在 waiting 状态的 Service Worker 进入 activate 状态。\n \n* activate 回调：\n \nevent.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。\nself.clients.claim()：在 activate 事件回调中执行该方法表示取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面，之后会被停止。   \n\n```js \nconst CURCACHE = 'CURCACHE_test_1'\nconst RUNTIME = 'runtime';\nconst CURCACHE_URLS = [\n    './',\n    '/asset/sw.jpg',\n    'index.js'\n]\nself.addEventListener('install',e=>{\n    e.waitUntil(\n      //存储缓存路径对应的资源\n        caches.open(CURCACHE).then(cache=>{\n            cache.addAll(CURCACHE_URLS)\n        }).then(\n            self.skipWaiting()\n        )\n    )\n})  \n  //代理请求，使用缓存，请求发送之前\n  self.addEventListener('fetch', e => {\n    e.respondWith(\n      //缓存是否匹配 \n      caches.match(e.request).then(function(response) {\n        if (response != null) {\n          //命中缓存返回缓存，结束请求\n          return response\n        }\n        //未命中缓存，正常请求\n        return fetch(e.request.url)\n      })\n    )\n  });\n```  \n#### 更新service worker  \n\nservice worker 更新步骤如下：   \n\n* 更新 service worker 的文件   \n           网页打开时服务器会进行对比，保持最新  \n* 新的 service worker 启动install\n* 当前页面生效的依然是老的service worker，新的 service worker 会进入 “waiting” 状态。\n* 页面关闭之后，老的 service worker 会被干掉，新的 servicer worker 接管页面\n* 新的 service worker 生效后会触发 activate 事件  \n\n```js\nconst CURCACHE = 'precache_test_1'\n//假设上个版本的key为precache_test_2 反正不等于CURCACHE\nself.addEventListener('activate', e => {\n  e.waitUntil(\n      //遍历当前缓存keys\n      caches.keys().then(cacheNames=>{\n        return Promise.all(\n          cacheNames.map(function(cacheName) {\n            //是否等于当前key,保留自己\n            if (cacheName !== CURCACHE) {\n              return caches.delete(cacheName);\n            }\n          })\n    )}).then(() => self.clients.claim())\n )\n}) \n```  \n\n这样一个简单的service worker离线缓存完成了。控制台可以看到，来源是service worker  \n\n<img src='/img/pwa/3.png'>\n关闭网络之后再次访问，可以同样得到上面的结果，并且sw.js请求未能拿到，但是不影响，旧的文件依然在，这里证明了每次都回去对比sw文件以确保更新\n<img src='/img/pwa/4.png'>  \n到这里，离线缓存就实现了。   \n  \n## 四、添加到主屏幕  \n\n允许将站点添加至主屏幕，是 PWA 提供的一项重要功能。这样就不用再依赖于浏览器作为平台，符合移动端的用户习惯。  \n\n### manifest.json  \n\n需要 manifest.json 文件去配置应用的图标、名称等基本信息如下：\n \n```js\n{\n    //被提示安装应用时出现的文本\n    \"name\": \"PQJ-PWA\",\n    //添加至主屏幕后的文本\n    \"short_name\":\"PQJ\",\n    \"description\": \"测试demo\",\n    //添加之后，启动地址\n    \"start_url\": \"/index.html\",\n    //图标信息\n    \"icons\": {\n      \"128\": \"/asset/sw.jpg\"\n    },\n    \"developer\": {\n      \"name\": \"pqj\",\n      \"url\": \"\"\n    },\n    \"display\": \"standalone\",\n    \"background_color\": \"#287fc5\",\n    \"theme_color\": \"#fff\",\n    \"permissions\": {\n        \"desktop-notification\": {\n          \"description\": \"Needed for creating system notifications.\"\n        }\n      }\n}  \n```  \n然后以如下方式在html中引入\n\n```js\n<link rel=\"manifest\" href=\"/mainfest.json\" />\n```  \n这样完成之后，移动端安卓使用chrome(亲测),首次访问时会提示是否允许安装到主屏幕，以应用icon的形式出现。\n图片和文字即由配置决定。  \n  \n### 五、消息通知  \n消息通知也是使用service worker的通知功能进行的，允许服务器想用户发生通知，而非用户主动请求才去响应某些行为。   \n正常的通知逻辑需要服务器来参与实现，这次展示只实现功能。   \n \n* 首先申请通知权限\n* 注册service worker \n* 处理逻辑，发送通知  \n\n```js \nfunction getPermission(){\n    return new Promise((resolve, reject) => {\n        //权限获取\n        const permissionPromise = Notification.requestPermission(result => {\n            resolve(result);\n        });\n    }).then(result => {\n            //判断条件\n            if (result === 'granted') {\n                execute();\n            }\n            else {\n                console.log('no permission');\n            }\n        });\n} \n```  \n发送通知  \n\n```js\nfunction execute() {\n    // 允许之后执行\n    registerServiceWorker().then(registration => {\n        // 通知\n        registration.showNotification('Hello World!');\n    });\n}  \n```  \n### 结束语   \n#### 参考文档  \n[https://lavas.baidu.com/doc](https://lavas.baidu.com/doc)  \n[https://developer.mozilla.org/zh-CN/Apps/Progressive](https://developer.mozilla.org/zh-CN/Apps/Progressive)\n至此，本文介绍就结束了，更多请参考[实例](https://github.com/xiaoxiangdaiyu/PWA)虽然PWA目前来看，面对的限制还很多，但是也可以看出web组织在更好的提升web应用方向上做的努力。正如一直提到的那句话，未来可期。\n目前国内百度这方面做的比较成熟，新浪微博已经有了pwa 测试版。\n\n  \n\n","source":"_posts/pwa.md","raw":"---\ntitle: 前端er应该了解的PWA\ndate: 2018-05-09\n---\n## 一、传统web 应用  \n当前web应用在移动时代并没有达到其在桌面设备上流行的程度，下面有张图来对比与原生应用之间的差别。     \n<img src='/img/pwa/1.png'/>   \n究其原因，无外乎下面不可避免的几点：\n* 移动设备网络限制-不可忽略的加载时间 \n* web应用依赖于浏览器作为入口  \n* 体验与原生的差距 \n<!-- more -->\n假如能解决以上的几点，对web app 来说会有多大的提升可以想象。\n## 二、PWA是什么  \nPWA 全称Progressive Web Apps(渐进式Web应用程序)，旨在使用现有的web技术提供用户更优的使用体验。\n基本要求    \n \n* 可靠（Reliable）\n    即使在不稳定的网络环境下，也能瞬间加载并展现\n* 快速响应（Fast）\n    快速响应，并且有平滑的动画响应用户的操作\n* 粘性(Engaging)\n    像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面   \n    \nPWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。  \n\n除以上的基准要求外，还应该包括以下特性：  \n\n* 渐进式 - 适用于所有浏览器，因为它是以渐进式增强作为宗旨开发的\n* 连接无关性 - 能够借助 Service Worker 在离线或者网络较差的情况下正常访问\n* 类似应用 - 由于是在 App Shell 模型基础上开发，因为应具有 Native App 的交互和导航，给用户 Native App 的体验\n* 持续更新 - 始终是最新的，无版本和更新问题\n* 安全 - 通过 HTTPS 协议提供服务，防止窥探和确保内容不被篡改\n* 可索引 - 应用清单文件和 Service Worker 可以让搜索引擎索引到，从而将其识别为『应用』\n* 粘性 - 通过推送离线通知等，可以让用户回流\n* 可安装 - 用户可以添加常用的 webapp 到桌面，免去去应用商店下载的麻烦\n* 可链接 - 通过链接即可分享内容，无需下载安装  \n\n\n看起来有点眼花缭乱，这又是一个新的飞起的轮子吗？这里重申一下,PWA背后不是一种新的技术，而是集合当前多种web技术的一种集合。分别利用各自的功能来完成渐进式的整体需求。下面就沿着前面提出的问题分别了解一下相关技术  \n\n## 三、技术组成  \n由以下几种技术构成：  \n\n* App Manifest\n* Service Worker\n* Notifications API\n* Push API  \n\n其中Service Worker是PWA技术的关键，它们可以让app满足上面的三基准。其他技术则是锦上添花，让app更加的强大。 \n### 3.1 service worker背景\n#### 离线缓存背景  \n针对网页的体验，从前到后都做了很多努力，极力去降低响应时间，这里就不表述多样的技术手段。\n另一个方向的就是缓存，减少与服务器非必要的交互，不过对于离线的情况下浏览器缓存就无力了，\n这样离线缓存的需求就出现了。\n#### 离线缓存的历程   \nweb应用在离线缓存发展的过程中也不是一簇而就的，经历了逐渐完善的过程。  \n初期的解决方案是AppCache(原来阿波罗的h5接入过)\n 然而，事实证明这是一个失败的尝试，缺陷太多，已经被废弃了。具体可以查看Application Cache is a douchebag\n但是方向还是正确的，那就继续孜孜不倦的探索。\n#### workers \n持久化先放一边，来谈谈另一个问题\n基于浏览器中的 javaScript 单线程的现实逐渐不能满足现代web需求的现状,例如耗时的计算，用户的交互显然会受影响。\n为了将这些耗时操作从主线程中解放出来，早期W3C新增了一个Web Worker 的 API，可以脱离主线程单独执行，并且可以与主线程交互。\n不过Web Worker是临时性的依赖于创建页面 ，不能满足我们持久化的需求。\n冲着这个目标，下面就比较容易解决了，搞个能持久存在的就行了。\n在Web Worker的基础上，W3C新增了service worker来满足我们持久化的需求。\n其生命周期与页面无关，关联页面未关闭时，它也可以退出，没有关联页面时，它也可以启动\n功能  \n\nService Worker虽然满足了离线缓存来，其功能可不仅仅局限于此。  可以提供  \n\n* 丰富的离线体验，\n* 周期的后台同步，\n* 消息推送通知，\n* 拦截和处理网络请求，\n* 管理资源缓存\n这些正好也是PWA的目的，所以说Service Worker是PWA的关键技术。 \n#### 前提条件\nService Worker 出于安全性和其实现原理，在使用的时候有一定的前提条件。\n* 由于 Service Worker 要求 HTTPS 的环境  \n    当然一般浏览器允许调试 Service Worker 的时候 host 为 localhost 或者 127.0.0.1 \n* Service Worker 的缓存机制是依赖 Cache API (略过)\n* 依赖 HTML5 fetch API（略过）\n* 依赖 Promise 实现   \n由上可知，不是所有的浏览器都支持的，支持情况大概如下：  \n\n <img src='/img/pwa/2.png'/>\niOS 内的所有的浏览器都基于 safari，所以iOS要在11.3以上\nIE是放弃支持了，不过Edge好歹支持了。     \n### 3.2 Cache  \n\nCache是Service Worker衍生出来的API，配合Service Worker实现对资源请求的缓存。\n不过cache并不直接缓存字符串，而是直接缓存资源请求（css、js、html等）。  \ncache也是key-value形式，一般来说key就是request，value就是response   \n \n* caches.open(cacheName) 打开一个cache   \n* caches是global对象，返回一个带有cache返回值的Promise\n* cache.keys() 遍历cache中所有键，得到value的集合\n* cache.match(Request|url) 在cache中匹配传入的request，返回Promise；  \n* cache.matchAll只有第一个参数与match不同，需要一个request的数组，当然返回的结果也是response的数组\n* cache.add(Request|url) 并不是单纯的add，因为传入的是request或者url，在cache.add内部会自动去调用fetch取回request的请求结果，然后才是把response存入cache；\n* cache.addAll类似，通常在sw install的时候用cache.addAll把所有需要缓存的文件都请求一遍\n* cache.put(Request, Response) 这个相当于cache.add的第二步，即fetch到response后存入cache\n* cache.delete(Request|url) 删除缓存     \n\n \n### 3.3 注册Service Worker         \n\n注册即声明sw文件的位置，显然应该在主js中引入。大概如下：  \n\n```js\n//基于promise\nfunction registerServiceWorker(){\n    // 注册service worker\n    return navigator.serviceWorker.register('./sw1.js').then(registration => {\n        console.log('注册成功');\n        // 返回\n        return registration;\n    })\n    .catch(err => {\n        console.error('注册失败', err);\n    });\n}\nwindow.onload = function () {\n    //是否支持\n    if (!('serviceWorker' in navigator)) {\n        return;\n    }\n    registerServiceWorker()\n}\n```   \n### 3.4 生命周期      \n\nService worker 有一个独立于web 页面的生命周期。\n如果在网站上安装 serice worker ，你需要注册，注册后浏览器会在后台安装 service worker。然后进入下面的不同阶段。\n激活之后，service worker 将控制所有的页面，纳入它的范围，不过第一次在页面注册 service worker 时不会控制页面，直到它再次加载。\n service worker 生效之后,它会处于下面两种状态之一：  \n \n* service worker 终止来节省内存，\n* 页面发起网络请求后，它将处理请求获取和消息事件。  \n\n\n由上图看知，分为这么几个阶段：  \n  \n* Installing   \n           发生在 Service Worker 注册之后，表示开始安装，触发 install 事件回调指定一些静态资源进行离线缓存 \n* Installed\n           Service Worker 已经完成了安装，并且等待其他的 Service Worker 线程被关闭。\n* Activating \n          在这个状态下没有被其他的 Service Worker 控制的客户端，允许当前的 worker 完成安装\n* Activated   \n          在这个状态会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)\n* Redundant\n         被替换，即被销毁  \n         \n了解声明周期其实是为了我们在不同时间段去监听事件来完成相应操作。对PWA来说主要两个事件。\n \n* install 事件回调：\n \nevent.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。\nself.skipWaiting()：self 是当前 context 的 global 变量，执行该方法表示强制当前处在 waiting 状态的 Service Worker 进入 activate 状态。\n \n* activate 回调：\n \nevent.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。\nself.clients.claim()：在 activate 事件回调中执行该方法表示取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面，之后会被停止。   \n\n```js \nconst CURCACHE = 'CURCACHE_test_1'\nconst RUNTIME = 'runtime';\nconst CURCACHE_URLS = [\n    './',\n    '/asset/sw.jpg',\n    'index.js'\n]\nself.addEventListener('install',e=>{\n    e.waitUntil(\n      //存储缓存路径对应的资源\n        caches.open(CURCACHE).then(cache=>{\n            cache.addAll(CURCACHE_URLS)\n        }).then(\n            self.skipWaiting()\n        )\n    )\n})  \n  //代理请求，使用缓存，请求发送之前\n  self.addEventListener('fetch', e => {\n    e.respondWith(\n      //缓存是否匹配 \n      caches.match(e.request).then(function(response) {\n        if (response != null) {\n          //命中缓存返回缓存，结束请求\n          return response\n        }\n        //未命中缓存，正常请求\n        return fetch(e.request.url)\n      })\n    )\n  });\n```  \n#### 更新service worker  \n\nservice worker 更新步骤如下：   \n\n* 更新 service worker 的文件   \n           网页打开时服务器会进行对比，保持最新  \n* 新的 service worker 启动install\n* 当前页面生效的依然是老的service worker，新的 service worker 会进入 “waiting” 状态。\n* 页面关闭之后，老的 service worker 会被干掉，新的 servicer worker 接管页面\n* 新的 service worker 生效后会触发 activate 事件  \n\n```js\nconst CURCACHE = 'precache_test_1'\n//假设上个版本的key为precache_test_2 反正不等于CURCACHE\nself.addEventListener('activate', e => {\n  e.waitUntil(\n      //遍历当前缓存keys\n      caches.keys().then(cacheNames=>{\n        return Promise.all(\n          cacheNames.map(function(cacheName) {\n            //是否等于当前key,保留自己\n            if (cacheName !== CURCACHE) {\n              return caches.delete(cacheName);\n            }\n          })\n    )}).then(() => self.clients.claim())\n )\n}) \n```  \n\n这样一个简单的service worker离线缓存完成了。控制台可以看到，来源是service worker  \n\n<img src='/img/pwa/3.png'>\n关闭网络之后再次访问，可以同样得到上面的结果，并且sw.js请求未能拿到，但是不影响，旧的文件依然在，这里证明了每次都回去对比sw文件以确保更新\n<img src='/img/pwa/4.png'>  \n到这里，离线缓存就实现了。   \n  \n## 四、添加到主屏幕  \n\n允许将站点添加至主屏幕，是 PWA 提供的一项重要功能。这样就不用再依赖于浏览器作为平台，符合移动端的用户习惯。  \n\n### manifest.json  \n\n需要 manifest.json 文件去配置应用的图标、名称等基本信息如下：\n \n```js\n{\n    //被提示安装应用时出现的文本\n    \"name\": \"PQJ-PWA\",\n    //添加至主屏幕后的文本\n    \"short_name\":\"PQJ\",\n    \"description\": \"测试demo\",\n    //添加之后，启动地址\n    \"start_url\": \"/index.html\",\n    //图标信息\n    \"icons\": {\n      \"128\": \"/asset/sw.jpg\"\n    },\n    \"developer\": {\n      \"name\": \"pqj\",\n      \"url\": \"\"\n    },\n    \"display\": \"standalone\",\n    \"background_color\": \"#287fc5\",\n    \"theme_color\": \"#fff\",\n    \"permissions\": {\n        \"desktop-notification\": {\n          \"description\": \"Needed for creating system notifications.\"\n        }\n      }\n}  \n```  \n然后以如下方式在html中引入\n\n```js\n<link rel=\"manifest\" href=\"/mainfest.json\" />\n```  \n这样完成之后，移动端安卓使用chrome(亲测),首次访问时会提示是否允许安装到主屏幕，以应用icon的形式出现。\n图片和文字即由配置决定。  \n  \n### 五、消息通知  \n消息通知也是使用service worker的通知功能进行的，允许服务器想用户发生通知，而非用户主动请求才去响应某些行为。   \n正常的通知逻辑需要服务器来参与实现，这次展示只实现功能。   \n \n* 首先申请通知权限\n* 注册service worker \n* 处理逻辑，发送通知  \n\n```js \nfunction getPermission(){\n    return new Promise((resolve, reject) => {\n        //权限获取\n        const permissionPromise = Notification.requestPermission(result => {\n            resolve(result);\n        });\n    }).then(result => {\n            //判断条件\n            if (result === 'granted') {\n                execute();\n            }\n            else {\n                console.log('no permission');\n            }\n        });\n} \n```  \n发送通知  \n\n```js\nfunction execute() {\n    // 允许之后执行\n    registerServiceWorker().then(registration => {\n        // 通知\n        registration.showNotification('Hello World!');\n    });\n}  \n```  \n### 结束语   \n#### 参考文档  \n[https://lavas.baidu.com/doc](https://lavas.baidu.com/doc)  \n[https://developer.mozilla.org/zh-CN/Apps/Progressive](https://developer.mozilla.org/zh-CN/Apps/Progressive)\n至此，本文介绍就结束了，更多请参考[实例](https://github.com/xiaoxiangdaiyu/PWA)虽然PWA目前来看，面对的限制还很多，但是也可以看出web组织在更好的提升web应用方向上做的努力。正如一直提到的那句话，未来可期。\n目前国内百度这方面做的比较成熟，新浪微博已经有了pwa 测试版。\n\n  \n\n","slug":"pwa","published":1,"updated":"2018-05-09T13:48:45.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7dis0008nl92qbs60fcd","content":"<h2 id=\"一、传统web-应用\"><a href=\"#一、传统web-应用\" class=\"headerlink\" title=\"一、传统web 应用\"></a>一、传统web 应用</h2><p>当前web应用在移动时代并没有达到其在桌面设备上流行的程度，下面有张图来对比与原生应用之间的差别。<br><img src=\"/img/pwa/1.png\"><br>究其原因，无外乎下面不可避免的几点：</p>\n<ul>\n<li>移动设备网络限制-不可忽略的加载时间 </li>\n<li>web应用依赖于浏览器作为入口  </li>\n<li><p>体验与原生的差距 </p>\n<a id=\"more\"></a>\n<p>假如能解决以上的几点，对web app 来说会有多大的提升可以想象。</p>\n<h2 id=\"二、PWA是什么\"><a href=\"#二、PWA是什么\" class=\"headerlink\" title=\"二、PWA是什么\"></a>二、PWA是什么</h2><p>PWA 全称Progressive Web Apps(渐进式Web应用程序)，旨在使用现有的web技术提供用户更优的使用体验。<br>基本要求    </p>\n</li>\n<li><p>可靠（Reliable）<br>  即使在不稳定的网络环境下，也能瞬间加载并展现</p>\n</li>\n<li>快速响应（Fast）<br>  快速响应，并且有平滑的动画响应用户的操作</li>\n<li>粘性(Engaging)<br>  像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面   </li>\n</ul>\n<p>PWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。  </p>\n<p>除以上的基准要求外，还应该包括以下特性：  </p>\n<ul>\n<li>渐进式 - 适用于所有浏览器，因为它是以渐进式增强作为宗旨开发的</li>\n<li>连接无关性 - 能够借助 Service Worker 在离线或者网络较差的情况下正常访问</li>\n<li>类似应用 - 由于是在 App Shell 模型基础上开发，因为应具有 Native App 的交互和导航，给用户 Native App 的体验</li>\n<li>持续更新 - 始终是最新的，无版本和更新问题</li>\n<li>安全 - 通过 HTTPS 协议提供服务，防止窥探和确保内容不被篡改</li>\n<li>可索引 - 应用清单文件和 Service Worker 可以让搜索引擎索引到，从而将其识别为『应用』</li>\n<li>粘性 - 通过推送离线通知等，可以让用户回流</li>\n<li>可安装 - 用户可以添加常用的 webapp 到桌面，免去去应用商店下载的麻烦</li>\n<li>可链接 - 通过链接即可分享内容，无需下载安装  </li>\n</ul>\n<p>看起来有点眼花缭乱，这又是一个新的飞起的轮子吗？这里重申一下,PWA背后不是一种新的技术，而是集合当前多种web技术的一种集合。分别利用各自的功能来完成渐进式的整体需求。下面就沿着前面提出的问题分别了解一下相关技术  </p>\n<h2 id=\"三、技术组成\"><a href=\"#三、技术组成\" class=\"headerlink\" title=\"三、技术组成\"></a>三、技术组成</h2><p>由以下几种技术构成：  </p>\n<ul>\n<li>App Manifest</li>\n<li>Service Worker</li>\n<li>Notifications API</li>\n<li>Push API  </li>\n</ul>\n<p>其中Service Worker是PWA技术的关键，它们可以让app满足上面的三基准。其他技术则是锦上添花，让app更加的强大。 </p>\n<h3 id=\"3-1-service-worker背景\"><a href=\"#3-1-service-worker背景\" class=\"headerlink\" title=\"3.1 service worker背景\"></a>3.1 service worker背景</h3><h4 id=\"离线缓存背景\"><a href=\"#离线缓存背景\" class=\"headerlink\" title=\"离线缓存背景\"></a>离线缓存背景</h4><p>针对网页的体验，从前到后都做了很多努力，极力去降低响应时间，这里就不表述多样的技术手段。<br>另一个方向的就是缓存，减少与服务器非必要的交互，不过对于离线的情况下浏览器缓存就无力了，<br>这样离线缓存的需求就出现了。</p>\n<h4 id=\"离线缓存的历程\"><a href=\"#离线缓存的历程\" class=\"headerlink\" title=\"离线缓存的历程\"></a>离线缓存的历程</h4><p>web应用在离线缓存发展的过程中也不是一簇而就的，经历了逐渐完善的过程。<br>初期的解决方案是AppCache(原来阿波罗的h5接入过)<br> 然而，事实证明这是一个失败的尝试，缺陷太多，已经被废弃了。具体可以查看Application Cache is a douchebag<br>但是方向还是正确的，那就继续孜孜不倦的探索。</p>\n<h4 id=\"workers\"><a href=\"#workers\" class=\"headerlink\" title=\"workers\"></a>workers</h4><p>持久化先放一边，来谈谈另一个问题<br>基于浏览器中的 javaScript 单线程的现实逐渐不能满足现代web需求的现状,例如耗时的计算，用户的交互显然会受影响。<br>为了将这些耗时操作从主线程中解放出来，早期W3C新增了一个Web Worker 的 API，可以脱离主线程单独执行，并且可以与主线程交互。<br>不过Web Worker是临时性的依赖于创建页面 ，不能满足我们持久化的需求。<br>冲着这个目标，下面就比较容易解决了，搞个能持久存在的就行了。<br>在Web Worker的基础上，W3C新增了service worker来满足我们持久化的需求。<br>其生命周期与页面无关，关联页面未关闭时，它也可以退出，没有关联页面时，它也可以启动<br>功能  </p>\n<p>Service Worker虽然满足了离线缓存来，其功能可不仅仅局限于此。  可以提供  </p>\n<ul>\n<li>丰富的离线体验，</li>\n<li>周期的后台同步，</li>\n<li>消息推送通知，</li>\n<li>拦截和处理网络请求，</li>\n<li>管理资源缓存<br>这些正好也是PWA的目的，所以说Service Worker是PWA的关键技术。 <h4 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h4>Service Worker 出于安全性和其实现原理，在使用的时候有一定的前提条件。</li>\n<li>由于 Service Worker 要求 HTTPS 的环境<br>  当然一般浏览器允许调试 Service Worker 的时候 host 为 localhost 或者 127.0.0.1 </li>\n<li>Service Worker 的缓存机制是依赖 Cache API (略过)</li>\n<li>依赖 HTML5 fetch API（略过）</li>\n<li><p>依赖 Promise 实现<br>由上可知，不是所有的浏览器都支持的，支持情况大概如下：  </p>\n<p><img src=\"/img/pwa/2.png\"><br>iOS 内的所有的浏览器都基于 safari，所以iOS要在11.3以上<br>IE是放弃支持了，不过Edge好歹支持了。     </p>\n<h3 id=\"3-2-Cache\"><a href=\"#3-2-Cache\" class=\"headerlink\" title=\"3.2 Cache\"></a>3.2 Cache</h3></li>\n</ul>\n<p>Cache是Service Worker衍生出来的API，配合Service Worker实现对资源请求的缓存。<br>不过cache并不直接缓存字符串，而是直接缓存资源请求（css、js、html等）。<br>cache也是key-value形式，一般来说key就是request，value就是response   </p>\n<ul>\n<li>caches.open(cacheName) 打开一个cache   </li>\n<li>caches是global对象，返回一个带有cache返回值的Promise</li>\n<li>cache.keys() 遍历cache中所有键，得到value的集合</li>\n<li>cache.match(Request|url) 在cache中匹配传入的request，返回Promise；  </li>\n<li>cache.matchAll只有第一个参数与match不同，需要一个request的数组，当然返回的结果也是response的数组</li>\n<li>cache.add(Request|url) 并不是单纯的add，因为传入的是request或者url，在cache.add内部会自动去调用fetch取回request的请求结果，然后才是把response存入cache；</li>\n<li>cache.addAll类似，通常在sw install的时候用cache.addAll把所有需要缓存的文件都请求一遍</li>\n<li>cache.put(Request, Response) 这个相当于cache.add的第二步，即fetch到response后存入cache</li>\n<li>cache.delete(Request|url) 删除缓存     </li>\n</ul>\n<h3 id=\"3-3-注册Service-Worker\"><a href=\"#3-3-注册Service-Worker\" class=\"headerlink\" title=\"3.3 注册Service Worker\"></a>3.3 注册Service Worker</h3><p>注册即声明sw文件的位置，显然应该在主js中引入。大概如下：  </p>\n<pre><code class=\"js\"><span class=\"comment\">//基于promise</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerServiceWorker</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"comment\">// 注册service worker</span>\n    <span class=\"keyword\">return</span> navigator.serviceWorker.register(<span class=\"string\">'./sw1.js'</span>).then(<span class=\"function\"><span class=\"params\">registration</span> =&gt;</span> {\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>);\n        <span class=\"comment\">// 返回</span>\n        <span class=\"keyword\">return</span> registration;\n    })\n    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> {\n        <span class=\"built_in\">console</span>.error(<span class=\"string\">'注册失败'</span>, err);\n    });\n}\n<span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{\n    <span class=\"comment\">//是否支持</span>\n    <span class=\"keyword\">if</span> (!(<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> navigator)) {\n        <span class=\"keyword\">return</span>;\n    }\n    registerServiceWorker()\n}\n</code></pre>\n<h3 id=\"3-4-生命周期\"><a href=\"#3-4-生命周期\" class=\"headerlink\" title=\"3.4 生命周期\"></a>3.4 生命周期</h3><p>Service worker 有一个独立于web 页面的生命周期。<br>如果在网站上安装 serice worker ，你需要注册，注册后浏览器会在后台安装 service worker。然后进入下面的不同阶段。<br>激活之后，service worker 将控制所有的页面，纳入它的范围，不过第一次在页面注册 service worker 时不会控制页面，直到它再次加载。<br> service worker 生效之后,它会处于下面两种状态之一：  </p>\n<ul>\n<li>service worker 终止来节省内存，</li>\n<li>页面发起网络请求后，它将处理请求获取和消息事件。  </li>\n</ul>\n<p>由上图看知，分为这么几个阶段：  </p>\n<ul>\n<li>Installing   <pre><code>发生在 Service Worker 注册之后，表示开始安装，触发 install 事件回调指定一些静态资源进行离线缓存 \n</code></pre></li>\n<li>Installed<pre><code>Service Worker 已经完成了安装，并且等待其他的 Service Worker 线程被关闭。\n</code></pre></li>\n<li>Activating <pre><code>在这个状态下没有被其他的 Service Worker 控制的客户端，允许当前的 worker 完成安装\n</code></pre></li>\n<li>Activated   <pre><code>在这个状态会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)\n</code></pre></li>\n<li>Redundant<pre><code>被替换，即被销毁  \n</code></pre></li>\n</ul>\n<p>了解声明周期其实是为了我们在不同时间段去监听事件来完成相应操作。对PWA来说主要两个事件。</p>\n<ul>\n<li>install 事件回调：</li>\n</ul>\n<p>event.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。<br>self.skipWaiting()：self 是当前 context 的 global 变量，执行该方法表示强制当前处在 waiting 状态的 Service Worker 进入 activate 状态。</p>\n<ul>\n<li>activate 回调：</li>\n</ul>\n<p>event.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。<br>self.clients.claim()：在 activate 事件回调中执行该方法表示取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面，之后会被停止。   </p>\n<pre><code class=\"js\"><span class=\"keyword\">const</span> CURCACHE = <span class=\"string\">'CURCACHE_test_1'</span>\n<span class=\"keyword\">const</span> RUNTIME = <span class=\"string\">'runtime'</span>;\n<span class=\"keyword\">const</span> CURCACHE_URLS = [\n    <span class=\"string\">'./'</span>,\n    <span class=\"string\">'/asset/sw.jpg'</span>,\n    <span class=\"string\">'index.js'</span>\n]\nself.addEventListener(<span class=\"string\">'install'</span>,e=&gt;{\n    e.waitUntil(\n      <span class=\"comment\">//存储缓存路径对应的资源</span>\n        caches.open(CURCACHE).then(<span class=\"function\"><span class=\"params\">cache</span>=&gt;</span>{\n            cache.addAll(CURCACHE_URLS)\n        }).then(\n            self.skipWaiting()\n        )\n    )\n})  \n  <span class=\"comment\">//代理请求，使用缓存，请求发送之前</span>\n  self.addEventListener(<span class=\"string\">'fetch'</span>, e =&gt; {\n    e.respondWith(\n      <span class=\"comment\">//缓存是否匹配 </span>\n      caches.match(e.request).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>{\n        <span class=\"keyword\">if</span> (response != <span class=\"literal\">null</span>) {\n          <span class=\"comment\">//命中缓存返回缓存，结束请求</span>\n          <span class=\"keyword\">return</span> response\n        }\n        <span class=\"comment\">//未命中缓存，正常请求</span>\n        <span class=\"keyword\">return</span> fetch(e.request.url)\n      })\n    )\n  });\n</code></pre>\n<h4 id=\"更新service-worker\"><a href=\"#更新service-worker\" class=\"headerlink\" title=\"更新service worker\"></a>更新service worker</h4><p>service worker 更新步骤如下：   </p>\n<ul>\n<li>更新 service worker 的文件   <pre><code>网页打开时服务器会进行对比，保持最新  \n</code></pre></li>\n<li>新的 service worker 启动install</li>\n<li>当前页面生效的依然是老的service worker，新的 service worker 会进入 “waiting” 状态。</li>\n<li>页面关闭之后，老的 service worker 会被干掉，新的 servicer worker 接管页面</li>\n<li>新的 service worker 生效后会触发 activate 事件  </li>\n</ul>\n<pre><code class=\"js\"><span class=\"keyword\">const</span> CURCACHE = <span class=\"string\">'precache_test_1'</span>\n<span class=\"comment\">//假设上个版本的key为precache_test_2 反正不等于CURCACHE</span>\nself.addEventListener(<span class=\"string\">'activate'</span>, e =&gt; {\n  e.waitUntil(\n      <span class=\"comment\">//遍历当前缓存keys</span>\n      caches.keys().then(<span class=\"function\"><span class=\"params\">cacheNames</span>=&gt;</span>{\n        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(\n          cacheNames.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cacheName</span>) </span>{\n            <span class=\"comment\">//是否等于当前key,保留自己</span>\n            <span class=\"keyword\">if</span> (cacheName !== CURCACHE) {\n              <span class=\"keyword\">return</span> caches.delete(cacheName);\n            }\n          })\n    )}).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> self.clients.claim())\n )\n})\n</code></pre>\n<p>这样一个简单的service worker离线缓存完成了。控制台可以看到，来源是service worker  </p>\n<p><img src=\"/img/pwa/3.png\"><br>关闭网络之后再次访问，可以同样得到上面的结果，并且sw.js请求未能拿到，但是不影响，旧的文件依然在，这里证明了每次都回去对比sw文件以确保更新<br><img src=\"/img/pwa/4.png\"><br>到这里，离线缓存就实现了。   </p>\n<h2 id=\"四、添加到主屏幕\"><a href=\"#四、添加到主屏幕\" class=\"headerlink\" title=\"四、添加到主屏幕\"></a>四、添加到主屏幕</h2><p>允许将站点添加至主屏幕，是 PWA 提供的一项重要功能。这样就不用再依赖于浏览器作为平台，符合移动端的用户习惯。  </p>\n<h3 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a>manifest.json</h3><p>需要 manifest.json 文件去配置应用的图标、名称等基本信息如下：</p>\n<pre><code class=\"js\">{\n    <span class=\"comment\">//被提示安装应用时出现的文本</span>\n    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"PQJ-PWA\"</span>,\n    <span class=\"comment\">//添加至主屏幕后的文本</span>\n    <span class=\"string\">\"short_name\"</span>:<span class=\"string\">\"PQJ\"</span>,\n    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"测试demo\"</span>,\n    <span class=\"comment\">//添加之后，启动地址</span>\n    <span class=\"string\">\"start_url\"</span>: <span class=\"string\">\"/index.html\"</span>,\n    <span class=\"comment\">//图标信息</span>\n    <span class=\"string\">\"icons\"</span>: {\n      <span class=\"string\">\"128\"</span>: <span class=\"string\">\"/asset/sw.jpg\"</span>\n    },\n    <span class=\"string\">\"developer\"</span>: {\n      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"pqj\"</span>,\n      <span class=\"string\">\"url\"</span>: <span class=\"string\">\"\"</span>\n    },\n    <span class=\"string\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,\n    <span class=\"string\">\"background_color\"</span>: <span class=\"string\">\"#287fc5\"</span>,\n    <span class=\"string\">\"theme_color\"</span>: <span class=\"string\">\"#fff\"</span>,\n    <span class=\"string\">\"permissions\"</span>: {\n        <span class=\"string\">\"desktop-notification\"</span>: {\n          <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Needed for creating system notifications.\"</span>\n        }\n      }\n}\n</code></pre>\n<p>然后以如下方式在html中引入</p>\n<pre><code class=\"js\">&lt;link rel=<span class=\"string\">\"manifest\"</span> href=<span class=\"string\">\"/mainfest.json\"</span> /&gt;\n</code></pre>\n<p>这样完成之后，移动端安卓使用chrome(亲测),首次访问时会提示是否允许安装到主屏幕，以应用icon的形式出现。<br>图片和文字即由配置决定。  </p>\n<h3 id=\"五、消息通知\"><a href=\"#五、消息通知\" class=\"headerlink\" title=\"五、消息通知\"></a>五、消息通知</h3><p>消息通知也是使用service worker的通知功能进行的，允许服务器想用户发生通知，而非用户主动请求才去响应某些行为。<br>正常的通知逻辑需要服务器来参与实现，这次展示只实现功能。   </p>\n<ul>\n<li>首先申请通知权限</li>\n<li>注册service worker </li>\n<li>处理逻辑，发送通知  </li>\n</ul>\n<pre><code class=\"js\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPermission</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> {\n        <span class=\"comment\">//权限获取</span>\n        <span class=\"keyword\">const</span> permissionPromise = Notification.requestPermission(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> {\n            resolve(result);\n        });\n    }).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> {\n            <span class=\"comment\">//判断条件</span>\n            <span class=\"keyword\">if</span> (result === <span class=\"string\">'granted'</span>) {\n                execute();\n            }\n            <span class=\"keyword\">else</span> {\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'no permission'</span>);\n            }\n        });\n}\n</code></pre>\n<p>发送通知  </p>\n<pre><code class=\"js\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"comment\">// 允许之后执行</span>\n    registerServiceWorker().then(<span class=\"function\"><span class=\"params\">registration</span> =&gt;</span> {\n        <span class=\"comment\">// 通知</span>\n        registration.showNotification(<span class=\"string\">'Hello World!'</span>);\n    });\n}\n</code></pre>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><p><a href=\"https://lavas.baidu.com/doc\" target=\"_blank\" rel=\"noopener\">https://lavas.baidu.com/doc</a><br><a href=\"https://developer.mozilla.org/zh-CN/Apps/Progressive\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/Apps/Progressive</a><br>至此，本文介绍就结束了，更多请参考<a href=\"https://github.com/xiaoxiangdaiyu/PWA\" target=\"_blank\" rel=\"noopener\">实例</a>虽然PWA目前来看，面对的限制还很多，但是也可以看出web组织在更好的提升web应用方向上做的努力。正如一直提到的那句话，未来可期。<br>目前国内百度这方面做的比较成熟，新浪微博已经有了pwa 测试版。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、传统web-应用\"><a href=\"#一、传统web-应用\" class=\"headerlink\" title=\"一、传统web 应用\"></a>一、传统web 应用</h2><p>当前web应用在移动时代并没有达到其在桌面设备上流行的程度，下面有张图来对比与原生应用之间的差别。<br><img src=\"/img/pwa/1.png\"><br>究其原因，无外乎下面不可避免的几点：</p>\n<ul>\n<li>移动设备网络限制-不可忽略的加载时间 </li>\n<li>web应用依赖于浏览器作为入口  </li>\n<li><p>体验与原生的差距 </p>","more":"<p>假如能解决以上的几点，对web app 来说会有多大的提升可以想象。</p>\n<h2 id=\"二、PWA是什么\"><a href=\"#二、PWA是什么\" class=\"headerlink\" title=\"二、PWA是什么\"></a>二、PWA是什么</h2><p>PWA 全称Progressive Web Apps(渐进式Web应用程序)，旨在使用现有的web技术提供用户更优的使用体验。<br>基本要求    </p>\n</li>\n<li><p>可靠（Reliable）<br>  即使在不稳定的网络环境下，也能瞬间加载并展现</p>\n</li>\n<li>快速响应（Fast）<br>  快速响应，并且有平滑的动画响应用户的操作</li>\n<li>粘性(Engaging)<br>  像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面   </li>\n</ul>\n<p>PWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。  </p>\n<p>除以上的基准要求外，还应该包括以下特性：  </p>\n<ul>\n<li>渐进式 - 适用于所有浏览器，因为它是以渐进式增强作为宗旨开发的</li>\n<li>连接无关性 - 能够借助 Service Worker 在离线或者网络较差的情况下正常访问</li>\n<li>类似应用 - 由于是在 App Shell 模型基础上开发，因为应具有 Native App 的交互和导航，给用户 Native App 的体验</li>\n<li>持续更新 - 始终是最新的，无版本和更新问题</li>\n<li>安全 - 通过 HTTPS 协议提供服务，防止窥探和确保内容不被篡改</li>\n<li>可索引 - 应用清单文件和 Service Worker 可以让搜索引擎索引到，从而将其识别为『应用』</li>\n<li>粘性 - 通过推送离线通知等，可以让用户回流</li>\n<li>可安装 - 用户可以添加常用的 webapp 到桌面，免去去应用商店下载的麻烦</li>\n<li>可链接 - 通过链接即可分享内容，无需下载安装  </li>\n</ul>\n<p>看起来有点眼花缭乱，这又是一个新的飞起的轮子吗？这里重申一下,PWA背后不是一种新的技术，而是集合当前多种web技术的一种集合。分别利用各自的功能来完成渐进式的整体需求。下面就沿着前面提出的问题分别了解一下相关技术  </p>\n<h2 id=\"三、技术组成\"><a href=\"#三、技术组成\" class=\"headerlink\" title=\"三、技术组成\"></a>三、技术组成</h2><p>由以下几种技术构成：  </p>\n<ul>\n<li>App Manifest</li>\n<li>Service Worker</li>\n<li>Notifications API</li>\n<li>Push API  </li>\n</ul>\n<p>其中Service Worker是PWA技术的关键，它们可以让app满足上面的三基准。其他技术则是锦上添花，让app更加的强大。 </p>\n<h3 id=\"3-1-service-worker背景\"><a href=\"#3-1-service-worker背景\" class=\"headerlink\" title=\"3.1 service worker背景\"></a>3.1 service worker背景</h3><h4 id=\"离线缓存背景\"><a href=\"#离线缓存背景\" class=\"headerlink\" title=\"离线缓存背景\"></a>离线缓存背景</h4><p>针对网页的体验，从前到后都做了很多努力，极力去降低响应时间，这里就不表述多样的技术手段。<br>另一个方向的就是缓存，减少与服务器非必要的交互，不过对于离线的情况下浏览器缓存就无力了，<br>这样离线缓存的需求就出现了。</p>\n<h4 id=\"离线缓存的历程\"><a href=\"#离线缓存的历程\" class=\"headerlink\" title=\"离线缓存的历程\"></a>离线缓存的历程</h4><p>web应用在离线缓存发展的过程中也不是一簇而就的，经历了逐渐完善的过程。<br>初期的解决方案是AppCache(原来阿波罗的h5接入过)<br> 然而，事实证明这是一个失败的尝试，缺陷太多，已经被废弃了。具体可以查看Application Cache is a douchebag<br>但是方向还是正确的，那就继续孜孜不倦的探索。</p>\n<h4 id=\"workers\"><a href=\"#workers\" class=\"headerlink\" title=\"workers\"></a>workers</h4><p>持久化先放一边，来谈谈另一个问题<br>基于浏览器中的 javaScript 单线程的现实逐渐不能满足现代web需求的现状,例如耗时的计算，用户的交互显然会受影响。<br>为了将这些耗时操作从主线程中解放出来，早期W3C新增了一个Web Worker 的 API，可以脱离主线程单独执行，并且可以与主线程交互。<br>不过Web Worker是临时性的依赖于创建页面 ，不能满足我们持久化的需求。<br>冲着这个目标，下面就比较容易解决了，搞个能持久存在的就行了。<br>在Web Worker的基础上，W3C新增了service worker来满足我们持久化的需求。<br>其生命周期与页面无关，关联页面未关闭时，它也可以退出，没有关联页面时，它也可以启动<br>功能  </p>\n<p>Service Worker虽然满足了离线缓存来，其功能可不仅仅局限于此。  可以提供  </p>\n<ul>\n<li>丰富的离线体验，</li>\n<li>周期的后台同步，</li>\n<li>消息推送通知，</li>\n<li>拦截和处理网络请求，</li>\n<li>管理资源缓存<br>这些正好也是PWA的目的，所以说Service Worker是PWA的关键技术。 <h4 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h4>Service Worker 出于安全性和其实现原理，在使用的时候有一定的前提条件。</li>\n<li>由于 Service Worker 要求 HTTPS 的环境<br>  当然一般浏览器允许调试 Service Worker 的时候 host 为 localhost 或者 127.0.0.1 </li>\n<li>Service Worker 的缓存机制是依赖 Cache API (略过)</li>\n<li>依赖 HTML5 fetch API（略过）</li>\n<li><p>依赖 Promise 实现<br>由上可知，不是所有的浏览器都支持的，支持情况大概如下：  </p>\n<p><img src=\"/img/pwa/2.png\"><br>iOS 内的所有的浏览器都基于 safari，所以iOS要在11.3以上<br>IE是放弃支持了，不过Edge好歹支持了。     </p>\n<h3 id=\"3-2-Cache\"><a href=\"#3-2-Cache\" class=\"headerlink\" title=\"3.2 Cache\"></a>3.2 Cache</h3></li>\n</ul>\n<p>Cache是Service Worker衍生出来的API，配合Service Worker实现对资源请求的缓存。<br>不过cache并不直接缓存字符串，而是直接缓存资源请求（css、js、html等）。<br>cache也是key-value形式，一般来说key就是request，value就是response   </p>\n<ul>\n<li>caches.open(cacheName) 打开一个cache   </li>\n<li>caches是global对象，返回一个带有cache返回值的Promise</li>\n<li>cache.keys() 遍历cache中所有键，得到value的集合</li>\n<li>cache.match(Request|url) 在cache中匹配传入的request，返回Promise；  </li>\n<li>cache.matchAll只有第一个参数与match不同，需要一个request的数组，当然返回的结果也是response的数组</li>\n<li>cache.add(Request|url) 并不是单纯的add，因为传入的是request或者url，在cache.add内部会自动去调用fetch取回request的请求结果，然后才是把response存入cache；</li>\n<li>cache.addAll类似，通常在sw install的时候用cache.addAll把所有需要缓存的文件都请求一遍</li>\n<li>cache.put(Request, Response) 这个相当于cache.add的第二步，即fetch到response后存入cache</li>\n<li>cache.delete(Request|url) 删除缓存     </li>\n</ul>\n<h3 id=\"3-3-注册Service-Worker\"><a href=\"#3-3-注册Service-Worker\" class=\"headerlink\" title=\"3.3 注册Service Worker\"></a>3.3 注册Service Worker</h3><p>注册即声明sw文件的位置，显然应该在主js中引入。大概如下：  </p>\n<pre><code class=\"js\"><span class=\"comment\">//基于promise</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerServiceWorker</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"comment\">// 注册service worker</span>\n    <span class=\"keyword\">return</span> navigator.serviceWorker.register(<span class=\"string\">'./sw1.js'</span>).then(<span class=\"function\"><span class=\"params\">registration</span> =&gt;</span> {\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>);\n        <span class=\"comment\">// 返回</span>\n        <span class=\"keyword\">return</span> registration;\n    })\n    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> {\n        <span class=\"built_in\">console</span>.error(<span class=\"string\">'注册失败'</span>, err);\n    });\n}\n<span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{\n    <span class=\"comment\">//是否支持</span>\n    <span class=\"keyword\">if</span> (!(<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> navigator)) {\n        <span class=\"keyword\">return</span>;\n    }\n    registerServiceWorker()\n}\n</code></pre>\n<h3 id=\"3-4-生命周期\"><a href=\"#3-4-生命周期\" class=\"headerlink\" title=\"3.4 生命周期\"></a>3.4 生命周期</h3><p>Service worker 有一个独立于web 页面的生命周期。<br>如果在网站上安装 serice worker ，你需要注册，注册后浏览器会在后台安装 service worker。然后进入下面的不同阶段。<br>激活之后，service worker 将控制所有的页面，纳入它的范围，不过第一次在页面注册 service worker 时不会控制页面，直到它再次加载。<br> service worker 生效之后,它会处于下面两种状态之一：  </p>\n<ul>\n<li>service worker 终止来节省内存，</li>\n<li>页面发起网络请求后，它将处理请求获取和消息事件。  </li>\n</ul>\n<p>由上图看知，分为这么几个阶段：  </p>\n<ul>\n<li>Installing   <pre><code>发生在 Service Worker 注册之后，表示开始安装，触发 install 事件回调指定一些静态资源进行离线缓存 \n</code></pre></li>\n<li>Installed<pre><code>Service Worker 已经完成了安装，并且等待其他的 Service Worker 线程被关闭。\n</code></pre></li>\n<li>Activating <pre><code>在这个状态下没有被其他的 Service Worker 控制的客户端，允许当前的 worker 完成安装\n</code></pre></li>\n<li>Activated   <pre><code>在这个状态会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)\n</code></pre></li>\n<li>Redundant<pre><code>被替换，即被销毁  \n</code></pre></li>\n</ul>\n<p>了解声明周期其实是为了我们在不同时间段去监听事件来完成相应操作。对PWA来说主要两个事件。</p>\n<ul>\n<li>install 事件回调：</li>\n</ul>\n<p>event.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。<br>self.skipWaiting()：self 是当前 context 的 global 变量，执行该方法表示强制当前处在 waiting 状态的 Service Worker 进入 activate 状态。</p>\n<ul>\n<li>activate 回调：</li>\n</ul>\n<p>event.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。<br>self.clients.claim()：在 activate 事件回调中执行该方法表示取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面，之后会被停止。   </p>\n<pre><code class=\"js\"><span class=\"keyword\">const</span> CURCACHE = <span class=\"string\">'CURCACHE_test_1'</span>\n<span class=\"keyword\">const</span> RUNTIME = <span class=\"string\">'runtime'</span>;\n<span class=\"keyword\">const</span> CURCACHE_URLS = [\n    <span class=\"string\">'./'</span>,\n    <span class=\"string\">'/asset/sw.jpg'</span>,\n    <span class=\"string\">'index.js'</span>\n]\nself.addEventListener(<span class=\"string\">'install'</span>,e=&gt;{\n    e.waitUntil(\n      <span class=\"comment\">//存储缓存路径对应的资源</span>\n        caches.open(CURCACHE).then(<span class=\"function\"><span class=\"params\">cache</span>=&gt;</span>{\n            cache.addAll(CURCACHE_URLS)\n        }).then(\n            self.skipWaiting()\n        )\n    )\n})  \n  <span class=\"comment\">//代理请求，使用缓存，请求发送之前</span>\n  self.addEventListener(<span class=\"string\">'fetch'</span>, e =&gt; {\n    e.respondWith(\n      <span class=\"comment\">//缓存是否匹配 </span>\n      caches.match(e.request).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>{\n        <span class=\"keyword\">if</span> (response != <span class=\"literal\">null</span>) {\n          <span class=\"comment\">//命中缓存返回缓存，结束请求</span>\n          <span class=\"keyword\">return</span> response\n        }\n        <span class=\"comment\">//未命中缓存，正常请求</span>\n        <span class=\"keyword\">return</span> fetch(e.request.url)\n      })\n    )\n  });\n</code></pre>\n<h4 id=\"更新service-worker\"><a href=\"#更新service-worker\" class=\"headerlink\" title=\"更新service worker\"></a>更新service worker</h4><p>service worker 更新步骤如下：   </p>\n<ul>\n<li>更新 service worker 的文件   <pre><code>网页打开时服务器会进行对比，保持最新  \n</code></pre></li>\n<li>新的 service worker 启动install</li>\n<li>当前页面生效的依然是老的service worker，新的 service worker 会进入 “waiting” 状态。</li>\n<li>页面关闭之后，老的 service worker 会被干掉，新的 servicer worker 接管页面</li>\n<li>新的 service worker 生效后会触发 activate 事件  </li>\n</ul>\n<pre><code class=\"js\"><span class=\"keyword\">const</span> CURCACHE = <span class=\"string\">'precache_test_1'</span>\n<span class=\"comment\">//假设上个版本的key为precache_test_2 反正不等于CURCACHE</span>\nself.addEventListener(<span class=\"string\">'activate'</span>, e =&gt; {\n  e.waitUntil(\n      <span class=\"comment\">//遍历当前缓存keys</span>\n      caches.keys().then(<span class=\"function\"><span class=\"params\">cacheNames</span>=&gt;</span>{\n        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(\n          cacheNames.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cacheName</span>) </span>{\n            <span class=\"comment\">//是否等于当前key,保留自己</span>\n            <span class=\"keyword\">if</span> (cacheName !== CURCACHE) {\n              <span class=\"keyword\">return</span> caches.delete(cacheName);\n            }\n          })\n    )}).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> self.clients.claim())\n )\n})\n</code></pre>\n<p>这样一个简单的service worker离线缓存完成了。控制台可以看到，来源是service worker  </p>\n<p><img src=\"/img/pwa/3.png\"><br>关闭网络之后再次访问，可以同样得到上面的结果，并且sw.js请求未能拿到，但是不影响，旧的文件依然在，这里证明了每次都回去对比sw文件以确保更新<br><img src=\"/img/pwa/4.png\"><br>到这里，离线缓存就实现了。   </p>\n<h2 id=\"四、添加到主屏幕\"><a href=\"#四、添加到主屏幕\" class=\"headerlink\" title=\"四、添加到主屏幕\"></a>四、添加到主屏幕</h2><p>允许将站点添加至主屏幕，是 PWA 提供的一项重要功能。这样就不用再依赖于浏览器作为平台，符合移动端的用户习惯。  </p>\n<h3 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a>manifest.json</h3><p>需要 manifest.json 文件去配置应用的图标、名称等基本信息如下：</p>\n<pre><code class=\"js\">{\n    <span class=\"comment\">//被提示安装应用时出现的文本</span>\n    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"PQJ-PWA\"</span>,\n    <span class=\"comment\">//添加至主屏幕后的文本</span>\n    <span class=\"string\">\"short_name\"</span>:<span class=\"string\">\"PQJ\"</span>,\n    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"测试demo\"</span>,\n    <span class=\"comment\">//添加之后，启动地址</span>\n    <span class=\"string\">\"start_url\"</span>: <span class=\"string\">\"/index.html\"</span>,\n    <span class=\"comment\">//图标信息</span>\n    <span class=\"string\">\"icons\"</span>: {\n      <span class=\"string\">\"128\"</span>: <span class=\"string\">\"/asset/sw.jpg\"</span>\n    },\n    <span class=\"string\">\"developer\"</span>: {\n      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"pqj\"</span>,\n      <span class=\"string\">\"url\"</span>: <span class=\"string\">\"\"</span>\n    },\n    <span class=\"string\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,\n    <span class=\"string\">\"background_color\"</span>: <span class=\"string\">\"#287fc5\"</span>,\n    <span class=\"string\">\"theme_color\"</span>: <span class=\"string\">\"#fff\"</span>,\n    <span class=\"string\">\"permissions\"</span>: {\n        <span class=\"string\">\"desktop-notification\"</span>: {\n          <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Needed for creating system notifications.\"</span>\n        }\n      }\n}\n</code></pre>\n<p>然后以如下方式在html中引入</p>\n<pre><code class=\"js\">&lt;link rel=<span class=\"string\">\"manifest\"</span> href=<span class=\"string\">\"/mainfest.json\"</span> /&gt;\n</code></pre>\n<p>这样完成之后，移动端安卓使用chrome(亲测),首次访问时会提示是否允许安装到主屏幕，以应用icon的形式出现。<br>图片和文字即由配置决定。  </p>\n<h3 id=\"五、消息通知\"><a href=\"#五、消息通知\" class=\"headerlink\" title=\"五、消息通知\"></a>五、消息通知</h3><p>消息通知也是使用service worker的通知功能进行的，允许服务器想用户发生通知，而非用户主动请求才去响应某些行为。<br>正常的通知逻辑需要服务器来参与实现，这次展示只实现功能。   </p>\n<ul>\n<li>首先申请通知权限</li>\n<li>注册service worker </li>\n<li>处理逻辑，发送通知  </li>\n</ul>\n<pre><code class=\"js\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPermission</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> {\n        <span class=\"comment\">//权限获取</span>\n        <span class=\"keyword\">const</span> permissionPromise = Notification.requestPermission(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> {\n            resolve(result);\n        });\n    }).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> {\n            <span class=\"comment\">//判断条件</span>\n            <span class=\"keyword\">if</span> (result === <span class=\"string\">'granted'</span>) {\n                execute();\n            }\n            <span class=\"keyword\">else</span> {\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'no permission'</span>);\n            }\n        });\n}\n</code></pre>\n<p>发送通知  </p>\n<pre><code class=\"js\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"comment\">// 允许之后执行</span>\n    registerServiceWorker().then(<span class=\"function\"><span class=\"params\">registration</span> =&gt;</span> {\n        <span class=\"comment\">// 通知</span>\n        registration.showNotification(<span class=\"string\">'Hello World!'</span>);\n    });\n}\n</code></pre>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><p><a href=\"https://lavas.baidu.com/doc\" target=\"_blank\" rel=\"noopener\">https://lavas.baidu.com/doc</a><br><a href=\"https://developer.mozilla.org/zh-CN/Apps/Progressive\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/Apps/Progressive</a><br>至此，本文介绍就结束了，更多请参考<a href=\"https://github.com/xiaoxiangdaiyu/PWA\" target=\"_blank\" rel=\"noopener\">实例</a>虽然PWA目前来看，面对的限制还很多，但是也可以看出web组织在更好的提升web应用方向上做的努力。正如一直提到的那句话，未来可期。<br>目前国内百度这方面做的比较成熟，新浪微博已经有了pwa 测试版。</p>"},{"title":"硬件、网络及性能","date":"2018-05-06T16:00:00.000Z","_content":"## 提升现代web app的中的页面性能\n前言，本文翻译自[https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0](https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0)看到之后感觉讲解的系统清晰明了，实属一篇好文。就加上自己的理解翻译了一下，聊以加深印象。\n<!-- more -->\n### 硬件、网络，对性能的而言始终不能避开的两个物理因素 \n  \n### 一、 硬件如何影响性能  \n硬件（即处理能力）决定了计算密集型任务的表现  \n浏览器必须解析、编译并执行所有的js，如下如所示：\n<img src='/img/performance/1.png'> \n对于每个阶段而言，代码量的差异显然会影响其变现即影响性能，这种差异在低处理能力的机器上的体现尤为明显。  \n当然其他类型的资源请求也会影响性能，相比之下js的影响是比较突出的。  \n所以考虑不同用户cpu的状况，减少js怪物(即缩小js体积)是很必要的。可以从以下几方面着手：\n1. 删除不必要js\n2. 延迟加载非关键js\n3. 借助相关工具\n### 1.1 删除不必要js\n#### 只在必要的时候进行转换 \n仅仅对需要ES5的客户端才进行转换，80%的浏览器已经支持ES2015。(结合自己实际开发情况，移动端而言确实80%+的手机已经支持ES2015，仅仅只遇到oppop，vivio这两中手机不支持。)因为转换之后的代价还是有的，如下所示:   \n\n```js\n//ES2015\nbooks.map(b => b.title);\n//ES5\nbooks.map(function(b) { return b.title; }, this);\n//体积大了一倍\n```\n#### 使用压缩工具/优化工具  \n像UglifyJS & Closure Compiler 之类的工具，在压缩之外还有一些优化功能。\n对大多数的js而言压缩代码中空格移除和符号修改占了95%的工作量，并非是精心的代码转换。\n压缩不应该是盲目的，应该平衡下面几点。  \n* 更好的压缩比\n* 高额的计算机资源消耗\n* 前期准备\n* 可能的副作用 \n压缩可能不是一味的追求体积更小，相对而言，压缩也应该权衡一下其他方面。比较常见就是代码压缩时相比于其他流程，超长的时间消耗。压缩之后可能遇到关键字的问题。  \n如何解决其实应该是从本身项目出发。\n* 尽可能的优化可缓存的静态资源\n* 在压缩体积和时间之间找到一个平衡点  \n\n#### 使用tree-shaking移除没用的代码  \n和压缩代码的目的一致，减小资源大小，不过是从另一个层面的解决方案。像webpack，rollup都提供了该功能。  \ntree-shaking会将没有被用到的exports移除  \n\n```js\n//tool \n//used\nexport function a(){\n    console.log('1')\n}\nexport function b(){\n    console.log('2')\n}\n//app.js\nimport {a} from './tool'\na()\n```   \n \nfunction b 未被使用，最终的打包文件中b将会被删除。\n#### ES2015的模块是静态的，可以使用tree-shaking  \nimport/export 在执行之前就被确定，并且两者只能在顶层，没有条件逻辑的情况下使用(毕竟未执行)  \n#### tree-shaking的局限  \n  \n* 仅仅删除未被使用的导出  \n* 不支持所有的代码库（仅仅ES2015） \n* 可能做不到极致  \n   难以确定删除是否会有副作用，这种打包器只能保留    \n   \n#### 自我排查  \n工具不能做到尽善尽美，并且在执行之前确定某项问题是困难的。  \n当前来说应该从代码规范和代码注释来自我完善。  \n#### 对于框架   \n如果非必须，请不要使用。大的框架至少300kb的体积。   \n当然必要，请基于下面几点来选择：   \n \n* 服务端渲染  \n* 懒加载 \n* 代码优化    \n* 性能  \n\n\n### 1.2 延迟加载非必需js   \n  \n先看一下js不同引入方式的差别  \n\n|  | 默认方式 | Async | Defer |\n| --- | --- | --- | --- |\n| 阻塞渲染 | 是 | 否 | 否 |\n| 执行时机 | 加载完成 | 加载完成 | document解析完成 |\n\n#### 使用代码分割和懒加载  \n* 减少启动时需要加载的js  \n* 尽可能少的加载不相关的js   \n传统的做法是加载Bundle js，代码分割是将代码分成不同的chunk  \n这里同样有两种极端：  \n* 每个模块对应一个js  \n    不好压缩  \n    利于缓存  \n    粒度更小\n* 整个应用只对应一个js   \n    便于压缩  \n    不利于缓存  \n    粒度太大，即可维护性\n忽然有种中庸的感觉了，凡事皆有度，所有单一操作都不能过分苛求极致，兼顾才是合理\n### 1.3 使用其他工具  \n#### 使用html和css   \n某些状况下可能需要vanilla JS(即原生js)，框架带来便利的同时不可避免的有其他的一些性能消耗。提到这里有一篇文章大家可以看一下[我是怎么把我的 React 应用换成 VanillaJS 的（这是不是一个坏主意）](https://www.w3ctech.com/topic/1978)\n举个例子：\nNetflix 降低了他们登录页50%的TTI（传输时间间隔）通过下面的方式：\n* 使用原生js来代替React\n* 当用户登录的时候加载余下的部分   \n\n#### 使用server\n将代价昂贵的库放到server端,使用ssr来代替client-side-render.  \nssr可以将我们初始页面加载事件减少到原来的1/5并减少不同浏览器之间的差异。\nssr确实首屏的优化确实很大，优点不多说。但这里提一句，不要盲目ssr，特别是初次请求响应时间较长的接口\n\n## 二、网络的影响  \n首先了解两个概念：  \n\n* 带宽:  数据吞吐量(比特/秒)\n* 延迟: 延迟数据传输时间(ms)\n\n  \n对于大部分市场来说，带宽是可以满足需求的(这里统计是国外的，平均26兆，国内略低一点)，平均页面大小3.5Mb。传输时间（3.5/26）0.13s。国内会差一点。\n延迟对性能影响比较明显。\n移动网络的延迟  \n\n| 网络 | 延迟ms |\n| --- | :-- |\n| 5G | <=4 |\n| 4G | <=100 |\n| 3G | 100-500 |\n| 3G | 300-1000 |\n\n### 适应移动网络的限制   \n\n应该从下面几方面来分别考虑。   \n  \n* 减少请求数量\n* 优化关键路径  \n* 减少请求大小  \n\n### 2.1 减少请求数量   \n\n#### 新建一次连接的代价是昂贵的，要重复以下过程  \n建立连接需要1至3+响应在数据相应之前。   \n \n1. DNS 查询(可能) \n2. TLS 握手(可能)\n3. 请求资源      \n\n\n#### 初始状态连接不能被充分利用  \n\nTCP slow-start限制了在初始响应里里数据被发送的数量  \n\n#### 发送更多的数据通常情况下比新建连接要划算。    \n\n请求的体积与相应时间并不是线性关系。  \n两次50k的请求消耗比一次100k的大了不少。   \n  \n#### 减少重定向的使用    \n\n* 重定向增加了服务器昂贵的循环  \n* server-side 相对于client-side来说重定向优秀一点（快并且可缓存）\n* 看一下301和302的响应code    \n\n\n#### 使用缓存  \n理想状态下，确实资源是否最新不应该通过网络请求  \n可以通过下面的方式：    \n\n* 使用Content-addressed URLs: \n      即内容与地址对应，log13234d.jpg而非log.jpg    \n* 使用max-age   \n\n这种浏览器调整为Facebook节省了60%的请求  \n\n#### 使用service workers来增强缓存  \n\nservice worker可以帮组我们：  \n  \n* 拦截网络请求 \n* 访问浏览器缓存  \n* 代替发送网络请求来处理过期的资源  \n\n#### 使用http2  \n使用HTTP2时，每个来源只需要一个连接，减少了连接创建的开销。   \n### 2.2 优化关键路径  \n优化页面渲染或者加载时所需的事件以便尽可能的加快完成。  \n\n#### 浏览器优化资源请求   \n对于所有的请求，浏览器对其是有权重处理的，即分不同的优先级来加载。具体来说就是重要会阻塞渲染的优先级比较高。  \n如下图所示： \n<img src='/img/performance/2.png'> \n  \n#### 使用资源提示  \n通过以下方式，提前加载或者请求将要用到的内容：    \n\n* Dns-prefresh  \n* preconnect\n* preconnect\n* Preload（当前页面）\n* Prefetch(下个页面)  \n\n### 2.3 降低请求大小   \n \n* 使用Brotli压缩    \n   相对于gzip \n    更好的压缩比，文件越大越明显\n    更快的解压缩  \n    压缩速度极大提升\n* 减少js体积  \n* 优化图片\n23就不再多提了，方式有很多。   \n \n### 结束语  \n对于好的资源，多读收益还是很明显的。这次翻译感觉体会又多了一些，不过由于本人才疏学浅，如有错误还望多多指正。一言概之，共同学习。   \n","source":"_posts/performance.md","raw":"---\ntitle: 硬件、网络及性能\ndate: 2018-05-07\n---\n## 提升现代web app的中的页面性能\n前言，本文翻译自[https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0](https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0)看到之后感觉讲解的系统清晰明了，实属一篇好文。就加上自己的理解翻译了一下，聊以加深印象。\n<!-- more -->\n### 硬件、网络，对性能的而言始终不能避开的两个物理因素 \n  \n### 一、 硬件如何影响性能  \n硬件（即处理能力）决定了计算密集型任务的表现  \n浏览器必须解析、编译并执行所有的js，如下如所示：\n<img src='/img/performance/1.png'> \n对于每个阶段而言，代码量的差异显然会影响其变现即影响性能，这种差异在低处理能力的机器上的体现尤为明显。  \n当然其他类型的资源请求也会影响性能，相比之下js的影响是比较突出的。  \n所以考虑不同用户cpu的状况，减少js怪物(即缩小js体积)是很必要的。可以从以下几方面着手：\n1. 删除不必要js\n2. 延迟加载非关键js\n3. 借助相关工具\n### 1.1 删除不必要js\n#### 只在必要的时候进行转换 \n仅仅对需要ES5的客户端才进行转换，80%的浏览器已经支持ES2015。(结合自己实际开发情况，移动端而言确实80%+的手机已经支持ES2015，仅仅只遇到oppop，vivio这两中手机不支持。)因为转换之后的代价还是有的，如下所示:   \n\n```js\n//ES2015\nbooks.map(b => b.title);\n//ES5\nbooks.map(function(b) { return b.title; }, this);\n//体积大了一倍\n```\n#### 使用压缩工具/优化工具  \n像UglifyJS & Closure Compiler 之类的工具，在压缩之外还有一些优化功能。\n对大多数的js而言压缩代码中空格移除和符号修改占了95%的工作量，并非是精心的代码转换。\n压缩不应该是盲目的，应该平衡下面几点。  \n* 更好的压缩比\n* 高额的计算机资源消耗\n* 前期准备\n* 可能的副作用 \n压缩可能不是一味的追求体积更小，相对而言，压缩也应该权衡一下其他方面。比较常见就是代码压缩时相比于其他流程，超长的时间消耗。压缩之后可能遇到关键字的问题。  \n如何解决其实应该是从本身项目出发。\n* 尽可能的优化可缓存的静态资源\n* 在压缩体积和时间之间找到一个平衡点  \n\n#### 使用tree-shaking移除没用的代码  \n和压缩代码的目的一致，减小资源大小，不过是从另一个层面的解决方案。像webpack，rollup都提供了该功能。  \ntree-shaking会将没有被用到的exports移除  \n\n```js\n//tool \n//used\nexport function a(){\n    console.log('1')\n}\nexport function b(){\n    console.log('2')\n}\n//app.js\nimport {a} from './tool'\na()\n```   \n \nfunction b 未被使用，最终的打包文件中b将会被删除。\n#### ES2015的模块是静态的，可以使用tree-shaking  \nimport/export 在执行之前就被确定，并且两者只能在顶层，没有条件逻辑的情况下使用(毕竟未执行)  \n#### tree-shaking的局限  \n  \n* 仅仅删除未被使用的导出  \n* 不支持所有的代码库（仅仅ES2015） \n* 可能做不到极致  \n   难以确定删除是否会有副作用，这种打包器只能保留    \n   \n#### 自我排查  \n工具不能做到尽善尽美，并且在执行之前确定某项问题是困难的。  \n当前来说应该从代码规范和代码注释来自我完善。  \n#### 对于框架   \n如果非必须，请不要使用。大的框架至少300kb的体积。   \n当然必要，请基于下面几点来选择：   \n \n* 服务端渲染  \n* 懒加载 \n* 代码优化    \n* 性能  \n\n\n### 1.2 延迟加载非必需js   \n  \n先看一下js不同引入方式的差别  \n\n|  | 默认方式 | Async | Defer |\n| --- | --- | --- | --- |\n| 阻塞渲染 | 是 | 否 | 否 |\n| 执行时机 | 加载完成 | 加载完成 | document解析完成 |\n\n#### 使用代码分割和懒加载  \n* 减少启动时需要加载的js  \n* 尽可能少的加载不相关的js   \n传统的做法是加载Bundle js，代码分割是将代码分成不同的chunk  \n这里同样有两种极端：  \n* 每个模块对应一个js  \n    不好压缩  \n    利于缓存  \n    粒度更小\n* 整个应用只对应一个js   \n    便于压缩  \n    不利于缓存  \n    粒度太大，即可维护性\n忽然有种中庸的感觉了，凡事皆有度，所有单一操作都不能过分苛求极致，兼顾才是合理\n### 1.3 使用其他工具  \n#### 使用html和css   \n某些状况下可能需要vanilla JS(即原生js)，框架带来便利的同时不可避免的有其他的一些性能消耗。提到这里有一篇文章大家可以看一下[我是怎么把我的 React 应用换成 VanillaJS 的（这是不是一个坏主意）](https://www.w3ctech.com/topic/1978)\n举个例子：\nNetflix 降低了他们登录页50%的TTI（传输时间间隔）通过下面的方式：\n* 使用原生js来代替React\n* 当用户登录的时候加载余下的部分   \n\n#### 使用server\n将代价昂贵的库放到server端,使用ssr来代替client-side-render.  \nssr可以将我们初始页面加载事件减少到原来的1/5并减少不同浏览器之间的差异。\nssr确实首屏的优化确实很大，优点不多说。但这里提一句，不要盲目ssr，特别是初次请求响应时间较长的接口\n\n## 二、网络的影响  \n首先了解两个概念：  \n\n* 带宽:  数据吞吐量(比特/秒)\n* 延迟: 延迟数据传输时间(ms)\n\n  \n对于大部分市场来说，带宽是可以满足需求的(这里统计是国外的，平均26兆，国内略低一点)，平均页面大小3.5Mb。传输时间（3.5/26）0.13s。国内会差一点。\n延迟对性能影响比较明显。\n移动网络的延迟  \n\n| 网络 | 延迟ms |\n| --- | :-- |\n| 5G | <=4 |\n| 4G | <=100 |\n| 3G | 100-500 |\n| 3G | 300-1000 |\n\n### 适应移动网络的限制   \n\n应该从下面几方面来分别考虑。   \n  \n* 减少请求数量\n* 优化关键路径  \n* 减少请求大小  \n\n### 2.1 减少请求数量   \n\n#### 新建一次连接的代价是昂贵的，要重复以下过程  \n建立连接需要1至3+响应在数据相应之前。   \n \n1. DNS 查询(可能) \n2. TLS 握手(可能)\n3. 请求资源      \n\n\n#### 初始状态连接不能被充分利用  \n\nTCP slow-start限制了在初始响应里里数据被发送的数量  \n\n#### 发送更多的数据通常情况下比新建连接要划算。    \n\n请求的体积与相应时间并不是线性关系。  \n两次50k的请求消耗比一次100k的大了不少。   \n  \n#### 减少重定向的使用    \n\n* 重定向增加了服务器昂贵的循环  \n* server-side 相对于client-side来说重定向优秀一点（快并且可缓存）\n* 看一下301和302的响应code    \n\n\n#### 使用缓存  \n理想状态下，确实资源是否最新不应该通过网络请求  \n可以通过下面的方式：    \n\n* 使用Content-addressed URLs: \n      即内容与地址对应，log13234d.jpg而非log.jpg    \n* 使用max-age   \n\n这种浏览器调整为Facebook节省了60%的请求  \n\n#### 使用service workers来增强缓存  \n\nservice worker可以帮组我们：  \n  \n* 拦截网络请求 \n* 访问浏览器缓存  \n* 代替发送网络请求来处理过期的资源  \n\n#### 使用http2  \n使用HTTP2时，每个来源只需要一个连接，减少了连接创建的开销。   \n### 2.2 优化关键路径  \n优化页面渲染或者加载时所需的事件以便尽可能的加快完成。  \n\n#### 浏览器优化资源请求   \n对于所有的请求，浏览器对其是有权重处理的，即分不同的优先级来加载。具体来说就是重要会阻塞渲染的优先级比较高。  \n如下图所示： \n<img src='/img/performance/2.png'> \n  \n#### 使用资源提示  \n通过以下方式，提前加载或者请求将要用到的内容：    \n\n* Dns-prefresh  \n* preconnect\n* preconnect\n* Preload（当前页面）\n* Prefetch(下个页面)  \n\n### 2.3 降低请求大小   \n \n* 使用Brotli压缩    \n   相对于gzip \n    更好的压缩比，文件越大越明显\n    更快的解压缩  \n    压缩速度极大提升\n* 减少js体积  \n* 优化图片\n23就不再多提了，方式有很多。   \n \n### 结束语  \n对于好的资源，多读收益还是很明显的。这次翻译感觉体会又多了一些，不过由于本人才疏学浅，如有错误还望多多指正。一言概之，共同学习。   \n","slug":"performance","published":1,"updated":"2018-05-09T13:34:37.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7diw0009nl92mso19ddp","content":"<h2 id=\"提升现代web-app的中的页面性能\"><a href=\"#提升现代web-app的中的页面性能\" class=\"headerlink\" title=\"提升现代web app的中的页面性能\"></a>提升现代web app的中的页面性能</h2><p>前言，本文翻译自<a href=\"https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0</a>看到之后感觉讲解的系统清晰明了，实属一篇好文。就加上自己的理解翻译了一下，聊以加深印象。<br><a id=\"more\"></a></p>\n<h3 id=\"硬件、网络，对性能的而言始终不能避开的两个物理因素\"><a href=\"#硬件、网络，对性能的而言始终不能避开的两个物理因素\" class=\"headerlink\" title=\"硬件、网络，对性能的而言始终不能避开的两个物理因素\"></a>硬件、网络，对性能的而言始终不能避开的两个物理因素</h3><h3 id=\"一、-硬件如何影响性能\"><a href=\"#一、-硬件如何影响性能\" class=\"headerlink\" title=\"一、 硬件如何影响性能\"></a>一、 硬件如何影响性能</h3><p>硬件（即处理能力）决定了计算密集型任务的表现<br>浏览器必须解析、编译并执行所有的js，如下如所示：<br><img src=\"/img/performance/1.png\"><br>对于每个阶段而言，代码量的差异显然会影响其变现即影响性能，这种差异在低处理能力的机器上的体现尤为明显。<br>当然其他类型的资源请求也会影响性能，相比之下js的影响是比较突出的。<br>所以考虑不同用户cpu的状况，减少js怪物(即缩小js体积)是很必要的。可以从以下几方面着手：</p>\n<ol>\n<li>删除不必要js</li>\n<li>延迟加载非关键js</li>\n<li>借助相关工具<h3 id=\"1-1-删除不必要js\"><a href=\"#1-1-删除不必要js\" class=\"headerlink\" title=\"1.1 删除不必要js\"></a>1.1 删除不必要js</h3><h4 id=\"只在必要的时候进行转换\"><a href=\"#只在必要的时候进行转换\" class=\"headerlink\" title=\"只在必要的时候进行转换\"></a>只在必要的时候进行转换</h4>仅仅对需要ES5的客户端才进行转换，80%的浏览器已经支持ES2015。(结合自己实际开发情况，移动端而言确实80%+的手机已经支持ES2015，仅仅只遇到oppop，vivio这两中手机不支持。)因为转换之后的代价还是有的，如下所示:   </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES2015</span></span><br><span class=\"line\">books.map(<span class=\"function\"><span class=\"params\">b</span> =&gt;</span> b.title);</span><br><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\">books.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123; <span class=\"keyword\">return</span> b.title; &#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">//体积大了一倍</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用压缩工具-优化工具\"><a href=\"#使用压缩工具-优化工具\" class=\"headerlink\" title=\"使用压缩工具/优化工具\"></a>使用压缩工具/优化工具</h4><p>像UglifyJS &amp; Closure Compiler 之类的工具，在压缩之外还有一些优化功能。<br>对大多数的js而言压缩代码中空格移除和符号修改占了95%的工作量，并非是精心的代码转换。<br>压缩不应该是盲目的，应该平衡下面几点。  </p>\n<ul>\n<li>更好的压缩比</li>\n<li>高额的计算机资源消耗</li>\n<li>前期准备</li>\n<li>可能的副作用<br>压缩可能不是一味的追求体积更小，相对而言，压缩也应该权衡一下其他方面。比较常见就是代码压缩时相比于其他流程，超长的时间消耗。压缩之后可能遇到关键字的问题。<br>如何解决其实应该是从本身项目出发。</li>\n<li>尽可能的优化可缓存的静态资源</li>\n<li>在压缩体积和时间之间找到一个平衡点  </li>\n</ul>\n<h4 id=\"使用tree-shaking移除没用的代码\"><a href=\"#使用tree-shaking移除没用的代码\" class=\"headerlink\" title=\"使用tree-shaking移除没用的代码\"></a>使用tree-shaking移除没用的代码</h4><p>和压缩代码的目的一致，减小资源大小，不过是从另一个层面的解决方案。像webpack，rollup都提供了该功能。<br>tree-shaking会将没有被用到的exports移除  </p>\n<pre><code class=\"js\"><span class=\"comment\">//tool </span>\n<span class=\"comment\">//used</span>\n<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>)\n}\n<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>)\n}\n<span class=\"comment\">//app.js</span>\n<span class=\"keyword\">import</span> {a} <span class=\"keyword\">from</span> <span class=\"string\">'./tool'</span>\na()\n</code></pre>\n<p>function b 未被使用，最终的打包文件中b将会被删除。</p>\n<h4 id=\"ES2015的模块是静态的，可以使用tree-shaking\"><a href=\"#ES2015的模块是静态的，可以使用tree-shaking\" class=\"headerlink\" title=\"ES2015的模块是静态的，可以使用tree-shaking\"></a>ES2015的模块是静态的，可以使用tree-shaking</h4><p>import/export 在执行之前就被确定，并且两者只能在顶层，没有条件逻辑的情况下使用(毕竟未执行)  </p>\n<h4 id=\"tree-shaking的局限\"><a href=\"#tree-shaking的局限\" class=\"headerlink\" title=\"tree-shaking的局限\"></a>tree-shaking的局限</h4><ul>\n<li>仅仅删除未被使用的导出  </li>\n<li>不支持所有的代码库（仅仅ES2015） </li>\n<li>可能做不到极致<br> 难以确定删除是否会有副作用，这种打包器只能保留    </li>\n</ul>\n<h4 id=\"自我排查\"><a href=\"#自我排查\" class=\"headerlink\" title=\"自我排查\"></a>自我排查</h4><p>工具不能做到尽善尽美，并且在执行之前确定某项问题是困难的。<br>当前来说应该从代码规范和代码注释来自我完善。  </p>\n<h4 id=\"对于框架\"><a href=\"#对于框架\" class=\"headerlink\" title=\"对于框架\"></a>对于框架</h4><p>如果非必须，请不要使用。大的框架至少300kb的体积。<br>当然必要，请基于下面几点来选择：   </p>\n<ul>\n<li>服务端渲染  </li>\n<li>懒加载 </li>\n<li>代码优化    </li>\n<li>性能  </li>\n</ul>\n<h3 id=\"1-2-延迟加载非必需js\"><a href=\"#1-2-延迟加载非必需js\" class=\"headerlink\" title=\"1.2 延迟加载非必需js\"></a>1.2 延迟加载非必需js</h3><p>先看一下js不同引入方式的差别  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>默认方式</th>\n<th>Async</th>\n<th>Defer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阻塞渲染</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>执行时机</td>\n<td>加载完成</td>\n<td>加载完成</td>\n<td>document解析完成</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用代码分割和懒加载\"><a href=\"#使用代码分割和懒加载\" class=\"headerlink\" title=\"使用代码分割和懒加载\"></a>使用代码分割和懒加载</h4><ul>\n<li>减少启动时需要加载的js  </li>\n<li>尽可能少的加载不相关的js<br>传统的做法是加载Bundle js，代码分割是将代码分成不同的chunk<br>这里同样有两种极端：  </li>\n<li>每个模块对应一个js<br>  不好压缩<br>  利于缓存<br>  粒度更小</li>\n<li>整个应用只对应一个js<br>  便于压缩<br>  不利于缓存<br>  粒度太大，即可维护性<br>忽然有种中庸的感觉了，凡事皆有度，所有单一操作都不能过分苛求极致，兼顾才是合理<h3 id=\"1-3-使用其他工具\"><a href=\"#1-3-使用其他工具\" class=\"headerlink\" title=\"1.3 使用其他工具\"></a>1.3 使用其他工具</h3><h4 id=\"使用html和css\"><a href=\"#使用html和css\" class=\"headerlink\" title=\"使用html和css\"></a>使用html和css</h4>某些状况下可能需要vanilla JS(即原生js)，框架带来便利的同时不可避免的有其他的一些性能消耗。提到这里有一篇文章大家可以看一下<a href=\"https://www.w3ctech.com/topic/1978\" target=\"_blank\" rel=\"noopener\">我是怎么把我的 React 应用换成 VanillaJS 的（这是不是一个坏主意）</a><br>举个例子：<br>Netflix 降低了他们登录页50%的TTI（传输时间间隔）通过下面的方式：</li>\n<li>使用原生js来代替React</li>\n<li>当用户登录的时候加载余下的部分   </li>\n</ul>\n<h4 id=\"使用server\"><a href=\"#使用server\" class=\"headerlink\" title=\"使用server\"></a>使用server</h4><p>将代价昂贵的库放到server端,使用ssr来代替client-side-render.<br>ssr可以将我们初始页面加载事件减少到原来的1/5并减少不同浏览器之间的差异。<br>ssr确实首屏的优化确实很大，优点不多说。但这里提一句，不要盲目ssr，特别是初次请求响应时间较长的接口</p>\n<h2 id=\"二、网络的影响\"><a href=\"#二、网络的影响\" class=\"headerlink\" title=\"二、网络的影响\"></a>二、网络的影响</h2><p>首先了解两个概念：  </p>\n<ul>\n<li>带宽:  数据吞吐量(比特/秒)</li>\n<li>延迟: 延迟数据传输时间(ms)</li>\n</ul>\n<p>对于大部分市场来说，带宽是可以满足需求的(这里统计是国外的，平均26兆，国内略低一点)，平均页面大小3.5Mb。传输时间（3.5/26）0.13s。国内会差一点。<br>延迟对性能影响比较明显。<br>移动网络的延迟  </p>\n<table>\n<thead>\n<tr>\n<th>网络</th>\n<th style=\"text-align:left\">延迟ms</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5G</td>\n<td style=\"text-align:left\">&lt;=4</td>\n</tr>\n<tr>\n<td>4G</td>\n<td style=\"text-align:left\">&lt;=100</td>\n</tr>\n<tr>\n<td>3G</td>\n<td style=\"text-align:left\">100-500</td>\n</tr>\n<tr>\n<td>3G</td>\n<td style=\"text-align:left\">300-1000</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"适应移动网络的限制\"><a href=\"#适应移动网络的限制\" class=\"headerlink\" title=\"适应移动网络的限制\"></a>适应移动网络的限制</h3><p>应该从下面几方面来分别考虑。   </p>\n<ul>\n<li>减少请求数量</li>\n<li>优化关键路径  </li>\n<li>减少请求大小  </li>\n</ul>\n<h3 id=\"2-1-减少请求数量\"><a href=\"#2-1-减少请求数量\" class=\"headerlink\" title=\"2.1 减少请求数量\"></a>2.1 减少请求数量</h3><h4 id=\"新建一次连接的代价是昂贵的，要重复以下过程\"><a href=\"#新建一次连接的代价是昂贵的，要重复以下过程\" class=\"headerlink\" title=\"新建一次连接的代价是昂贵的，要重复以下过程\"></a>新建一次连接的代价是昂贵的，要重复以下过程</h4><p>建立连接需要1至3+响应在数据相应之前。   </p>\n<ol>\n<li>DNS 查询(可能) </li>\n<li>TLS 握手(可能)</li>\n<li>请求资源      </li>\n</ol>\n<h4 id=\"初始状态连接不能被充分利用\"><a href=\"#初始状态连接不能被充分利用\" class=\"headerlink\" title=\"初始状态连接不能被充分利用\"></a>初始状态连接不能被充分利用</h4><p>TCP slow-start限制了在初始响应里里数据被发送的数量  </p>\n<h4 id=\"发送更多的数据通常情况下比新建连接要划算。\"><a href=\"#发送更多的数据通常情况下比新建连接要划算。\" class=\"headerlink\" title=\"发送更多的数据通常情况下比新建连接要划算。\"></a>发送更多的数据通常情况下比新建连接要划算。</h4><p>请求的体积与相应时间并不是线性关系。<br>两次50k的请求消耗比一次100k的大了不少。   </p>\n<h4 id=\"减少重定向的使用\"><a href=\"#减少重定向的使用\" class=\"headerlink\" title=\"减少重定向的使用\"></a>减少重定向的使用</h4><ul>\n<li>重定向增加了服务器昂贵的循环  </li>\n<li>server-side 相对于client-side来说重定向优秀一点（快并且可缓存）</li>\n<li>看一下301和302的响应code    </li>\n</ul>\n<h4 id=\"使用缓存\"><a href=\"#使用缓存\" class=\"headerlink\" title=\"使用缓存\"></a>使用缓存</h4><p>理想状态下，确实资源是否最新不应该通过网络请求<br>可以通过下面的方式：    </p>\n<ul>\n<li>使用Content-addressed URLs: <pre><code>即内容与地址对应，log13234d.jpg而非log.jpg    \n</code></pre></li>\n<li>使用max-age   </li>\n</ul>\n<p>这种浏览器调整为Facebook节省了60%的请求  </p>\n<h4 id=\"使用service-workers来增强缓存\"><a href=\"#使用service-workers来增强缓存\" class=\"headerlink\" title=\"使用service workers来增强缓存\"></a>使用service workers来增强缓存</h4><p>service worker可以帮组我们：  </p>\n<ul>\n<li>拦截网络请求 </li>\n<li>访问浏览器缓存  </li>\n<li>代替发送网络请求来处理过期的资源  </li>\n</ul>\n<h4 id=\"使用http2\"><a href=\"#使用http2\" class=\"headerlink\" title=\"使用http2\"></a>使用http2</h4><p>使用HTTP2时，每个来源只需要一个连接，减少了连接创建的开销。   </p>\n<h3 id=\"2-2-优化关键路径\"><a href=\"#2-2-优化关键路径\" class=\"headerlink\" title=\"2.2 优化关键路径\"></a>2.2 优化关键路径</h3><p>优化页面渲染或者加载时所需的事件以便尽可能的加快完成。  </p>\n<h4 id=\"浏览器优化资源请求\"><a href=\"#浏览器优化资源请求\" class=\"headerlink\" title=\"浏览器优化资源请求\"></a>浏览器优化资源请求</h4><p>对于所有的请求，浏览器对其是有权重处理的，即分不同的优先级来加载。具体来说就是重要会阻塞渲染的优先级比较高。<br>如下图所示：<br><img src=\"/img/performance/2.png\"> </p>\n<h4 id=\"使用资源提示\"><a href=\"#使用资源提示\" class=\"headerlink\" title=\"使用资源提示\"></a>使用资源提示</h4><p>通过以下方式，提前加载或者请求将要用到的内容：    </p>\n<ul>\n<li>Dns-prefresh  </li>\n<li>preconnect</li>\n<li>preconnect</li>\n<li>Preload（当前页面）</li>\n<li>Prefetch(下个页面)  </li>\n</ul>\n<h3 id=\"2-3-降低请求大小\"><a href=\"#2-3-降低请求大小\" class=\"headerlink\" title=\"2.3 降低请求大小\"></a>2.3 降低请求大小</h3><ul>\n<li>使用Brotli压缩<br> 相对于gzip<br>  更好的压缩比，文件越大越明显<br>  更快的解压缩<br>  压缩速度极大提升</li>\n<li>减少js体积  </li>\n<li>优化图片<br>23就不再多提了，方式有很多。   </li>\n</ul>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>对于好的资源，多读收益还是很明显的。这次翻译感觉体会又多了一些，不过由于本人才疏学浅，如有错误还望多多指正。一言概之，共同学习。   </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"提升现代web-app的中的页面性能\"><a href=\"#提升现代web-app的中的页面性能\" class=\"headerlink\" title=\"提升现代web app的中的页面性能\"></a>提升现代web app的中的页面性能</h2><p>前言，本文翻译自<a href=\"https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0</a>看到之后感觉讲解的系统清晰明了，实属一篇好文。就加上自己的理解翻译了一下，聊以加深印象。<br>","more":"</p>\n<h3 id=\"硬件、网络，对性能的而言始终不能避开的两个物理因素\"><a href=\"#硬件、网络，对性能的而言始终不能避开的两个物理因素\" class=\"headerlink\" title=\"硬件、网络，对性能的而言始终不能避开的两个物理因素\"></a>硬件、网络，对性能的而言始终不能避开的两个物理因素</h3><h3 id=\"一、-硬件如何影响性能\"><a href=\"#一、-硬件如何影响性能\" class=\"headerlink\" title=\"一、 硬件如何影响性能\"></a>一、 硬件如何影响性能</h3><p>硬件（即处理能力）决定了计算密集型任务的表现<br>浏览器必须解析、编译并执行所有的js，如下如所示：<br><img src=\"/img/performance/1.png\"><br>对于每个阶段而言，代码量的差异显然会影响其变现即影响性能，这种差异在低处理能力的机器上的体现尤为明显。<br>当然其他类型的资源请求也会影响性能，相比之下js的影响是比较突出的。<br>所以考虑不同用户cpu的状况，减少js怪物(即缩小js体积)是很必要的。可以从以下几方面着手：</p>\n<ol>\n<li>删除不必要js</li>\n<li>延迟加载非关键js</li>\n<li>借助相关工具<h3 id=\"1-1-删除不必要js\"><a href=\"#1-1-删除不必要js\" class=\"headerlink\" title=\"1.1 删除不必要js\"></a>1.1 删除不必要js</h3><h4 id=\"只在必要的时候进行转换\"><a href=\"#只在必要的时候进行转换\" class=\"headerlink\" title=\"只在必要的时候进行转换\"></a>只在必要的时候进行转换</h4>仅仅对需要ES5的客户端才进行转换，80%的浏览器已经支持ES2015。(结合自己实际开发情况，移动端而言确实80%+的手机已经支持ES2015，仅仅只遇到oppop，vivio这两中手机不支持。)因为转换之后的代价还是有的，如下所示:   </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES2015</span></span><br><span class=\"line\">books.map(<span class=\"function\"><span class=\"params\">b</span> =&gt;</span> b.title);</span><br><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\">books.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123; <span class=\"keyword\">return</span> b.title; &#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">//体积大了一倍</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用压缩工具-优化工具\"><a href=\"#使用压缩工具-优化工具\" class=\"headerlink\" title=\"使用压缩工具/优化工具\"></a>使用压缩工具/优化工具</h4><p>像UglifyJS &amp; Closure Compiler 之类的工具，在压缩之外还有一些优化功能。<br>对大多数的js而言压缩代码中空格移除和符号修改占了95%的工作量，并非是精心的代码转换。<br>压缩不应该是盲目的，应该平衡下面几点。  </p>\n<ul>\n<li>更好的压缩比</li>\n<li>高额的计算机资源消耗</li>\n<li>前期准备</li>\n<li>可能的副作用<br>压缩可能不是一味的追求体积更小，相对而言，压缩也应该权衡一下其他方面。比较常见就是代码压缩时相比于其他流程，超长的时间消耗。压缩之后可能遇到关键字的问题。<br>如何解决其实应该是从本身项目出发。</li>\n<li>尽可能的优化可缓存的静态资源</li>\n<li>在压缩体积和时间之间找到一个平衡点  </li>\n</ul>\n<h4 id=\"使用tree-shaking移除没用的代码\"><a href=\"#使用tree-shaking移除没用的代码\" class=\"headerlink\" title=\"使用tree-shaking移除没用的代码\"></a>使用tree-shaking移除没用的代码</h4><p>和压缩代码的目的一致，减小资源大小，不过是从另一个层面的解决方案。像webpack，rollup都提供了该功能。<br>tree-shaking会将没有被用到的exports移除  </p>\n<pre><code class=\"js\"><span class=\"comment\">//tool </span>\n<span class=\"comment\">//used</span>\n<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>)\n}\n<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>)\n}\n<span class=\"comment\">//app.js</span>\n<span class=\"keyword\">import</span> {a} <span class=\"keyword\">from</span> <span class=\"string\">'./tool'</span>\na()\n</code></pre>\n<p>function b 未被使用，最终的打包文件中b将会被删除。</p>\n<h4 id=\"ES2015的模块是静态的，可以使用tree-shaking\"><a href=\"#ES2015的模块是静态的，可以使用tree-shaking\" class=\"headerlink\" title=\"ES2015的模块是静态的，可以使用tree-shaking\"></a>ES2015的模块是静态的，可以使用tree-shaking</h4><p>import/export 在执行之前就被确定，并且两者只能在顶层，没有条件逻辑的情况下使用(毕竟未执行)  </p>\n<h4 id=\"tree-shaking的局限\"><a href=\"#tree-shaking的局限\" class=\"headerlink\" title=\"tree-shaking的局限\"></a>tree-shaking的局限</h4><ul>\n<li>仅仅删除未被使用的导出  </li>\n<li>不支持所有的代码库（仅仅ES2015） </li>\n<li>可能做不到极致<br> 难以确定删除是否会有副作用，这种打包器只能保留    </li>\n</ul>\n<h4 id=\"自我排查\"><a href=\"#自我排查\" class=\"headerlink\" title=\"自我排查\"></a>自我排查</h4><p>工具不能做到尽善尽美，并且在执行之前确定某项问题是困难的。<br>当前来说应该从代码规范和代码注释来自我完善。  </p>\n<h4 id=\"对于框架\"><a href=\"#对于框架\" class=\"headerlink\" title=\"对于框架\"></a>对于框架</h4><p>如果非必须，请不要使用。大的框架至少300kb的体积。<br>当然必要，请基于下面几点来选择：   </p>\n<ul>\n<li>服务端渲染  </li>\n<li>懒加载 </li>\n<li>代码优化    </li>\n<li>性能  </li>\n</ul>\n<h3 id=\"1-2-延迟加载非必需js\"><a href=\"#1-2-延迟加载非必需js\" class=\"headerlink\" title=\"1.2 延迟加载非必需js\"></a>1.2 延迟加载非必需js</h3><p>先看一下js不同引入方式的差别  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>默认方式</th>\n<th>Async</th>\n<th>Defer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阻塞渲染</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>执行时机</td>\n<td>加载完成</td>\n<td>加载完成</td>\n<td>document解析完成</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用代码分割和懒加载\"><a href=\"#使用代码分割和懒加载\" class=\"headerlink\" title=\"使用代码分割和懒加载\"></a>使用代码分割和懒加载</h4><ul>\n<li>减少启动时需要加载的js  </li>\n<li>尽可能少的加载不相关的js<br>传统的做法是加载Bundle js，代码分割是将代码分成不同的chunk<br>这里同样有两种极端：  </li>\n<li>每个模块对应一个js<br>  不好压缩<br>  利于缓存<br>  粒度更小</li>\n<li>整个应用只对应一个js<br>  便于压缩<br>  不利于缓存<br>  粒度太大，即可维护性<br>忽然有种中庸的感觉了，凡事皆有度，所有单一操作都不能过分苛求极致，兼顾才是合理<h3 id=\"1-3-使用其他工具\"><a href=\"#1-3-使用其他工具\" class=\"headerlink\" title=\"1.3 使用其他工具\"></a>1.3 使用其他工具</h3><h4 id=\"使用html和css\"><a href=\"#使用html和css\" class=\"headerlink\" title=\"使用html和css\"></a>使用html和css</h4>某些状况下可能需要vanilla JS(即原生js)，框架带来便利的同时不可避免的有其他的一些性能消耗。提到这里有一篇文章大家可以看一下<a href=\"https://www.w3ctech.com/topic/1978\" target=\"_blank\" rel=\"noopener\">我是怎么把我的 React 应用换成 VanillaJS 的（这是不是一个坏主意）</a><br>举个例子：<br>Netflix 降低了他们登录页50%的TTI（传输时间间隔）通过下面的方式：</li>\n<li>使用原生js来代替React</li>\n<li>当用户登录的时候加载余下的部分   </li>\n</ul>\n<h4 id=\"使用server\"><a href=\"#使用server\" class=\"headerlink\" title=\"使用server\"></a>使用server</h4><p>将代价昂贵的库放到server端,使用ssr来代替client-side-render.<br>ssr可以将我们初始页面加载事件减少到原来的1/5并减少不同浏览器之间的差异。<br>ssr确实首屏的优化确实很大，优点不多说。但这里提一句，不要盲目ssr，特别是初次请求响应时间较长的接口</p>\n<h2 id=\"二、网络的影响\"><a href=\"#二、网络的影响\" class=\"headerlink\" title=\"二、网络的影响\"></a>二、网络的影响</h2><p>首先了解两个概念：  </p>\n<ul>\n<li>带宽:  数据吞吐量(比特/秒)</li>\n<li>延迟: 延迟数据传输时间(ms)</li>\n</ul>\n<p>对于大部分市场来说，带宽是可以满足需求的(这里统计是国外的，平均26兆，国内略低一点)，平均页面大小3.5Mb。传输时间（3.5/26）0.13s。国内会差一点。<br>延迟对性能影响比较明显。<br>移动网络的延迟  </p>\n<table>\n<thead>\n<tr>\n<th>网络</th>\n<th style=\"text-align:left\">延迟ms</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5G</td>\n<td style=\"text-align:left\">&lt;=4</td>\n</tr>\n<tr>\n<td>4G</td>\n<td style=\"text-align:left\">&lt;=100</td>\n</tr>\n<tr>\n<td>3G</td>\n<td style=\"text-align:left\">100-500</td>\n</tr>\n<tr>\n<td>3G</td>\n<td style=\"text-align:left\">300-1000</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"适应移动网络的限制\"><a href=\"#适应移动网络的限制\" class=\"headerlink\" title=\"适应移动网络的限制\"></a>适应移动网络的限制</h3><p>应该从下面几方面来分别考虑。   </p>\n<ul>\n<li>减少请求数量</li>\n<li>优化关键路径  </li>\n<li>减少请求大小  </li>\n</ul>\n<h3 id=\"2-1-减少请求数量\"><a href=\"#2-1-减少请求数量\" class=\"headerlink\" title=\"2.1 减少请求数量\"></a>2.1 减少请求数量</h3><h4 id=\"新建一次连接的代价是昂贵的，要重复以下过程\"><a href=\"#新建一次连接的代价是昂贵的，要重复以下过程\" class=\"headerlink\" title=\"新建一次连接的代价是昂贵的，要重复以下过程\"></a>新建一次连接的代价是昂贵的，要重复以下过程</h4><p>建立连接需要1至3+响应在数据相应之前。   </p>\n<ol>\n<li>DNS 查询(可能) </li>\n<li>TLS 握手(可能)</li>\n<li>请求资源      </li>\n</ol>\n<h4 id=\"初始状态连接不能被充分利用\"><a href=\"#初始状态连接不能被充分利用\" class=\"headerlink\" title=\"初始状态连接不能被充分利用\"></a>初始状态连接不能被充分利用</h4><p>TCP slow-start限制了在初始响应里里数据被发送的数量  </p>\n<h4 id=\"发送更多的数据通常情况下比新建连接要划算。\"><a href=\"#发送更多的数据通常情况下比新建连接要划算。\" class=\"headerlink\" title=\"发送更多的数据通常情况下比新建连接要划算。\"></a>发送更多的数据通常情况下比新建连接要划算。</h4><p>请求的体积与相应时间并不是线性关系。<br>两次50k的请求消耗比一次100k的大了不少。   </p>\n<h4 id=\"减少重定向的使用\"><a href=\"#减少重定向的使用\" class=\"headerlink\" title=\"减少重定向的使用\"></a>减少重定向的使用</h4><ul>\n<li>重定向增加了服务器昂贵的循环  </li>\n<li>server-side 相对于client-side来说重定向优秀一点（快并且可缓存）</li>\n<li>看一下301和302的响应code    </li>\n</ul>\n<h4 id=\"使用缓存\"><a href=\"#使用缓存\" class=\"headerlink\" title=\"使用缓存\"></a>使用缓存</h4><p>理想状态下，确实资源是否最新不应该通过网络请求<br>可以通过下面的方式：    </p>\n<ul>\n<li>使用Content-addressed URLs: <pre><code>即内容与地址对应，log13234d.jpg而非log.jpg    \n</code></pre></li>\n<li>使用max-age   </li>\n</ul>\n<p>这种浏览器调整为Facebook节省了60%的请求  </p>\n<h4 id=\"使用service-workers来增强缓存\"><a href=\"#使用service-workers来增强缓存\" class=\"headerlink\" title=\"使用service workers来增强缓存\"></a>使用service workers来增强缓存</h4><p>service worker可以帮组我们：  </p>\n<ul>\n<li>拦截网络请求 </li>\n<li>访问浏览器缓存  </li>\n<li>代替发送网络请求来处理过期的资源  </li>\n</ul>\n<h4 id=\"使用http2\"><a href=\"#使用http2\" class=\"headerlink\" title=\"使用http2\"></a>使用http2</h4><p>使用HTTP2时，每个来源只需要一个连接，减少了连接创建的开销。   </p>\n<h3 id=\"2-2-优化关键路径\"><a href=\"#2-2-优化关键路径\" class=\"headerlink\" title=\"2.2 优化关键路径\"></a>2.2 优化关键路径</h3><p>优化页面渲染或者加载时所需的事件以便尽可能的加快完成。  </p>\n<h4 id=\"浏览器优化资源请求\"><a href=\"#浏览器优化资源请求\" class=\"headerlink\" title=\"浏览器优化资源请求\"></a>浏览器优化资源请求</h4><p>对于所有的请求，浏览器对其是有权重处理的，即分不同的优先级来加载。具体来说就是重要会阻塞渲染的优先级比较高。<br>如下图所示：<br><img src=\"/img/performance/2.png\"> </p>\n<h4 id=\"使用资源提示\"><a href=\"#使用资源提示\" class=\"headerlink\" title=\"使用资源提示\"></a>使用资源提示</h4><p>通过以下方式，提前加载或者请求将要用到的内容：    </p>\n<ul>\n<li>Dns-prefresh  </li>\n<li>preconnect</li>\n<li>preconnect</li>\n<li>Preload（当前页面）</li>\n<li>Prefetch(下个页面)  </li>\n</ul>\n<h3 id=\"2-3-降低请求大小\"><a href=\"#2-3-降低请求大小\" class=\"headerlink\" title=\"2.3 降低请求大小\"></a>2.3 降低请求大小</h3><ul>\n<li>使用Brotli压缩<br> 相对于gzip<br>  更好的压缩比，文件越大越明显<br>  更快的解压缩<br>  压缩速度极大提升</li>\n<li>减少js体积  </li>\n<li>优化图片<br>23就不再多提了，方式有很多。   </li>\n</ul>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>对于好的资源，多读收益还是很明显的。这次翻译感觉体会又多了一些，不过由于本人才疏学浅，如有错误还望多多指正。一言概之，共同学习。   </p>"},{"title":"前文回顾","date":"2017-09-14T16:00:00.000Z","_content":"原先多多少少也写了几十篇文章，也不忍心直接丢下。这里放个链接供自己查看吧。  \n<!-- more -->  \n\n## 文章列表   \n* [node实现一个Websocket服务器](https://juejin.im/post/5a2bf66151882546d71f44b2)\n* [实现一个websocket服务器-理论篇](https://juejin.im/post/5a05d89051882540f36305df)\n* [如何开发webpack plugin](https://juejin.im/post/59e8b724f265da431875dd5c)\n* [移动端踩坑之旅-ios下fixed、软键盘相关问题总结](https://juejin.im/post/59e725865188257e0c3246bf)\n* [如何开发webpack loader](https://juejin.im/post/59e6a5de518825469c7461da)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)","source":"_posts/review.md","raw":"---\ntitle: 前文回顾\ndate: 2017-09-15\n---\n原先多多少少也写了几十篇文章，也不忍心直接丢下。这里放个链接供自己查看吧。  \n<!-- more -->  \n\n## 文章列表   \n* [node实现一个Websocket服务器](https://juejin.im/post/5a2bf66151882546d71f44b2)\n* [实现一个websocket服务器-理论篇](https://juejin.im/post/5a05d89051882540f36305df)\n* [如何开发webpack plugin](https://juejin.im/post/59e8b724f265da431875dd5c)\n* [移动端踩坑之旅-ios下fixed、软键盘相关问题总结](https://juejin.im/post/59e725865188257e0c3246bf)\n* [如何开发webpack loader](https://juejin.im/post/59e6a5de518825469c7461da)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)","slug":"review","published":1,"updated":"2017-12-15T11:55:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7dix000anl92svxkgv6d","content":"<p>原先多多少少也写了几十篇文章，也不忍心直接丢下。这里放个链接供自己查看吧。<br><a id=\"more\"></a>  </p>\n<h2 id=\"文章列表\"><a href=\"#文章列表\" class=\"headerlink\" title=\"文章列表\"></a>文章列表</h2><ul>\n<li><a href=\"https://juejin.im/post/5a2bf66151882546d71f44b2\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"https://juejin.im/post/5a05d89051882540f36305df\" target=\"_blank\" rel=\"noopener\">实现一个websocket服务器-理论篇</a></li>\n<li><a href=\"https://juejin.im/post/59e8b724f265da431875dd5c\" target=\"_blank\" rel=\"noopener\">如何开发webpack plugin</a></li>\n<li><a href=\"https://juejin.im/post/59e725865188257e0c3246bf\" target=\"_blank\" rel=\"noopener\">移动端踩坑之旅-ios下fixed、软键盘相关问题总结</a></li>\n<li><a href=\"https://juejin.im/post/59e6a5de518825469c7461da\" target=\"_blank\" rel=\"noopener\">如何开发webpack loader</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>原先多多少少也写了几十篇文章，也不忍心直接丢下。这里放个链接供自己查看吧。<br>","more":"</p>\n<h2 id=\"文章列表\"><a href=\"#文章列表\" class=\"headerlink\" title=\"文章列表\"></a>文章列表</h2><ul>\n<li><a href=\"https://juejin.im/post/5a2bf66151882546d71f44b2\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"https://juejin.im/post/5a05d89051882540f36305df\" target=\"_blank\" rel=\"noopener\">实现一个websocket服务器-理论篇</a></li>\n<li><a href=\"https://juejin.im/post/59e8b724f265da431875dd5c\" target=\"_blank\" rel=\"noopener\">如何开发webpack plugin</a></li>\n<li><a href=\"https://juejin.im/post/59e725865188257e0c3246bf\" target=\"_blank\" rel=\"noopener\">移动端踩坑之旅-ios下fixed、软键盘相关问题总结</a></li>\n<li><a href=\"https://juejin.im/post/59e6a5de518825469c7461da\" target=\"_blank\" rel=\"noopener\">如何开发webpack loader</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n</ul>"},{"title":"更便捷的css处理方式-PostCSS","date":"2017-12-21T16:00:00.000Z","_content":"一般来说介绍一个东西都是要从是什么，怎么用的顺序来讲。我感觉这样很容易让大家失去兴趣，先看一下postcss能做点什么，有兴趣的话再往下看，否则可能没有耐心看下去。让我们开始吧\n<!-- more -->\n## postcss能做什么  \n### 补全css属性浏览器前缀 \n手写的代码可以是这样的:  \n\n```css\n.div{\n    display: flex;\n}\n```\n   \npostcss可以转换之后成了这样:\n\n```css\n.div{\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n}\n``` \n  \n### 检查css语法   \n \n```css\n    body{\n    color: #f0;\n    }\n```\n\n会有以下提示:    \n\n```\nsrc/er.css\n 2:12  ✖  Unexpected invalid hex color \"#f0\"   color-no-invalid-hex\n\n\n\n[18:27:28] 'css-lint' errored after 98 ms\n[18:27:28] Error in plugin 'gulp-stylelint'\nMessage:\n    Failed with 1 error\n```\n### 拥抱下个版本规范的css 即css4\n对于下个规范的css而言，变量，方法等功能的都会增加上去，你可以这样来定义一个变量：    \n```css\n:root { \n    --red: #d33;\n  }\n  a { \n      color: var(--red);\n  }\n```\n当然直接在现有浏览器上是跑不通的，就正如es2015刚开始一样，我们需要一个转化器来将其转成当前可用规范。postcss的插件就可以做到。  \n\n```css\na{\n    color:#d33\n}\n```\n除了上面之外还有其他很多功能，postcss及其插件都能提供。\n\n## 什么是postcss  \n\n现在让我们回到最基本的问题，postcss是什么。  \n援引官网的定义，一种使用js来转化css的工具(A tool for transforming CSS with JavaScript)。其实我们更多的时候提到postcss是有两个含义的：\n1. postcss本身，也就是我们npm install时的安装部分  \n2. 基于postCss的丰富插件系统。   \n   上文那些功能，都是基于postcss的插件提供的功能。  \n   \npostcss本身并不直接用于处理样式，只有配合它的插件，才能完成相关的编译工作。\n \n#### postcss不是预编译语言的替代品   \n  \n我想你脑海里一直在复现两个名词，less/sass，开始的时候我也一样，认为postcss跟二者一样是一种css预编译语言或者起到类似作用的一种语言。postcss不是要取代哪一个，更多的是提供的一种补充，完全可以是互补的概念。  \n作为一个是使用js将css转化为AST然后进行处理的工具，完全不是预处理语言的替代品，postcss处理的必须是css文件，所以完全可以和预编译语言结合，使用预编译语言转化为css之后然后进行处理。  \n我一直认为两者不是互斥的关系，完全可以互补使用。   \n\n## 为什么需要postcss    \n\n大家可能有这么个疑问既然两者不互相冲突，目前我使用less/sass 也很容易满足我的需求，为什么要使用新的东西呢。我认为主要原因是其提供的丰富的插件功能，可以工作更加的简单化，便捷化，一句话，你只需要编写基本的css，其他的功能交给postcss就好。做了简单的对比可能更加清晰明了。  \n\n#### 实现给css属性加上浏览器前缀的功能  \n\n对比一下less和postcss的实现： \n\n1、 对于less而言，肯定是写一个方法  \n\n```css\n.flex-block() {\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n}\n.test{\n    .flex-block()\n}\n```\n2、使用postcss\n\n```css\n.test{\n    display: flex;\n}\n```\n只需要编译的时候使用autoprefixer处理就好。  \n可能一个属性的效果不是特别明显，要是有很多个属性需要处理呢?  \n\n```css\n.flex-block() {\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n}\n.transform(){\n    //仅仅是举例子\n}\n.ccc(){\n}\n.test{\n    .flex-block()\n    .transform()\n    .ccc()\n}\n```\n这时候postcss还是只需要如下:  \n\n```css\n.test{\n    display: flex;\n    transform:rotate(7deg);\n}\n```\n这时候就能看出来postcss的便捷性了，我一直认为可以抽象公共化的东西完全没有必要去重复的去手动开发。  \n\n## postcss工作原理   \n\npostcss本身是一个node模块，可以将css文件解析为抽象语法树(AST)，将该树在多个插件方法传递，然后将AST转换为字符串返回，该字符串可以输出到目标文件中。传递过程中的插件可以选择是否改变该语法树，上诉改变可以通过sourcemap来记录。如下面的流程所示(借用w3cplus的一张图)：\n<img src='https://www.w3cplus.com/sites/default/files/blogs/2017/1707/figure-18.png'/>\n\n其实这里我们更应该关联起来的是babel，看一下功能：  \n* 将未来规范的转化为当前规范的转义器\n* 实现相同，都是将源文件解析为AST然后经由插件处理。\n* 丰富的插件，满足不同的需求\n* 支持自定义插件的开发   \n\n#### 当前工作流中引入postcss  \n  \n大家可能会有这种想法，又是一种新的工具，我当前的开发框架中岂不是要大动。其实这种担心是没必要的。postcss是很容易引入当前的工作流中的。无论是webpack还是gulp，都有比较方便的方式。[官方有详细的介绍文档](https://github.com/postcss/postcss#usage)  \n\n## 结束语  \n\n原先很早就看到postCss，当时太年轻认为是less的一种替代品罢了，所以一直没有去关注。了解之后感觉真的不错，至于如何使用这里就不去演示了，有兴趣的可以查看下[我的简单示例](https://github.com/xiaoxiangdaiyu/postcss/tree/master/)希望更多的人使用。\n\n#### 参考文章  \n[http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/](http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/)\n[http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/](http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/)\n","source":"_posts/css/postcss.md","raw":"---\ntitle: 更便捷的css处理方式-PostCSS\ndate: 2017-12-22\n---\n一般来说介绍一个东西都是要从是什么，怎么用的顺序来讲。我感觉这样很容易让大家失去兴趣，先看一下postcss能做点什么，有兴趣的话再往下看，否则可能没有耐心看下去。让我们开始吧\n<!-- more -->\n## postcss能做什么  \n### 补全css属性浏览器前缀 \n手写的代码可以是这样的:  \n\n```css\n.div{\n    display: flex;\n}\n```\n   \npostcss可以转换之后成了这样:\n\n```css\n.div{\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n}\n``` \n  \n### 检查css语法   \n \n```css\n    body{\n    color: #f0;\n    }\n```\n\n会有以下提示:    \n\n```\nsrc/er.css\n 2:12  ✖  Unexpected invalid hex color \"#f0\"   color-no-invalid-hex\n\n\n\n[18:27:28] 'css-lint' errored after 98 ms\n[18:27:28] Error in plugin 'gulp-stylelint'\nMessage:\n    Failed with 1 error\n```\n### 拥抱下个版本规范的css 即css4\n对于下个规范的css而言，变量，方法等功能的都会增加上去，你可以这样来定义一个变量：    \n```css\n:root { \n    --red: #d33;\n  }\n  a { \n      color: var(--red);\n  }\n```\n当然直接在现有浏览器上是跑不通的，就正如es2015刚开始一样，我们需要一个转化器来将其转成当前可用规范。postcss的插件就可以做到。  \n\n```css\na{\n    color:#d33\n}\n```\n除了上面之外还有其他很多功能，postcss及其插件都能提供。\n\n## 什么是postcss  \n\n现在让我们回到最基本的问题，postcss是什么。  \n援引官网的定义，一种使用js来转化css的工具(A tool for transforming CSS with JavaScript)。其实我们更多的时候提到postcss是有两个含义的：\n1. postcss本身，也就是我们npm install时的安装部分  \n2. 基于postCss的丰富插件系统。   \n   上文那些功能，都是基于postcss的插件提供的功能。  \n   \npostcss本身并不直接用于处理样式，只有配合它的插件，才能完成相关的编译工作。\n \n#### postcss不是预编译语言的替代品   \n  \n我想你脑海里一直在复现两个名词，less/sass，开始的时候我也一样，认为postcss跟二者一样是一种css预编译语言或者起到类似作用的一种语言。postcss不是要取代哪一个，更多的是提供的一种补充，完全可以是互补的概念。  \n作为一个是使用js将css转化为AST然后进行处理的工具，完全不是预处理语言的替代品，postcss处理的必须是css文件，所以完全可以和预编译语言结合，使用预编译语言转化为css之后然后进行处理。  \n我一直认为两者不是互斥的关系，完全可以互补使用。   \n\n## 为什么需要postcss    \n\n大家可能有这么个疑问既然两者不互相冲突，目前我使用less/sass 也很容易满足我的需求，为什么要使用新的东西呢。我认为主要原因是其提供的丰富的插件功能，可以工作更加的简单化，便捷化，一句话，你只需要编写基本的css，其他的功能交给postcss就好。做了简单的对比可能更加清晰明了。  \n\n#### 实现给css属性加上浏览器前缀的功能  \n\n对比一下less和postcss的实现： \n\n1、 对于less而言，肯定是写一个方法  \n\n```css\n.flex-block() {\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n}\n.test{\n    .flex-block()\n}\n```\n2、使用postcss\n\n```css\n.test{\n    display: flex;\n}\n```\n只需要编译的时候使用autoprefixer处理就好。  \n可能一个属性的效果不是特别明显，要是有很多个属性需要处理呢?  \n\n```css\n.flex-block() {\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n}\n.transform(){\n    //仅仅是举例子\n}\n.ccc(){\n}\n.test{\n    .flex-block()\n    .transform()\n    .ccc()\n}\n```\n这时候postcss还是只需要如下:  \n\n```css\n.test{\n    display: flex;\n    transform:rotate(7deg);\n}\n```\n这时候就能看出来postcss的便捷性了，我一直认为可以抽象公共化的东西完全没有必要去重复的去手动开发。  \n\n## postcss工作原理   \n\npostcss本身是一个node模块，可以将css文件解析为抽象语法树(AST)，将该树在多个插件方法传递，然后将AST转换为字符串返回，该字符串可以输出到目标文件中。传递过程中的插件可以选择是否改变该语法树，上诉改变可以通过sourcemap来记录。如下面的流程所示(借用w3cplus的一张图)：\n<img src='https://www.w3cplus.com/sites/default/files/blogs/2017/1707/figure-18.png'/>\n\n其实这里我们更应该关联起来的是babel，看一下功能：  \n* 将未来规范的转化为当前规范的转义器\n* 实现相同，都是将源文件解析为AST然后经由插件处理。\n* 丰富的插件，满足不同的需求\n* 支持自定义插件的开发   \n\n#### 当前工作流中引入postcss  \n  \n大家可能会有这种想法，又是一种新的工具，我当前的开发框架中岂不是要大动。其实这种担心是没必要的。postcss是很容易引入当前的工作流中的。无论是webpack还是gulp，都有比较方便的方式。[官方有详细的介绍文档](https://github.com/postcss/postcss#usage)  \n\n## 结束语  \n\n原先很早就看到postCss，当时太年轻认为是less的一种替代品罢了，所以一直没有去关注。了解之后感觉真的不错，至于如何使用这里就不去演示了，有兴趣的可以查看下[我的简单示例](https://github.com/xiaoxiangdaiyu/postcss/tree/master/)希望更多的人使用。\n\n#### 参考文章  \n[http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/](http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/)\n[http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/](http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/)\n","slug":"css/postcss","published":1,"updated":"2017-12-22T14:15:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7dns000bnl92krh6km2q","content":"<p>一般来说介绍一个东西都是要从是什么，怎么用的顺序来讲。我感觉这样很容易让大家失去兴趣，先看一下postcss能做点什么，有兴趣的话再往下看，否则可能没有耐心看下去。让我们开始吧<br><a id=\"more\"></a></p>\n<h2 id=\"postcss能做什么\"><a href=\"#postcss能做什么\" class=\"headerlink\" title=\"postcss能做什么\"></a>postcss能做什么</h2><h3 id=\"补全css属性浏览器前缀\"><a href=\"#补全css属性浏览器前缀\" class=\"headerlink\" title=\"补全css属性浏览器前缀\"></a>补全css属性浏览器前缀</h3><p>手写的代码可以是这样的:  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>postcss可以转换之后成了这样:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\">  </span><br><span class=\"line\">### 检查<span class=\"selector-tag\">css</span>语法   </span><br><span class=\"line\"> </span><br><span class=\"line\">```<span class=\"selector-tag\">css</span></span><br><span class=\"line\">    <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>会有以下提示:    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/er.css</span><br><span class=\"line\"> 2:12  ✖  Unexpected invalid hex color &quot;#f0&quot;   color-no-invalid-hex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[18:27:28] &apos;css-lint&apos; errored after 98 ms</span><br><span class=\"line\">[18:27:28] Error in plugin &apos;gulp-stylelint&apos;</span><br><span class=\"line\">Message:</span><br><span class=\"line\">    Failed with 1 error</span><br></pre></td></tr></table></figure>\n<h3 id=\"拥抱下个版本规范的css-即css4\"><a href=\"#拥抱下个版本规范的css-即css4\" class=\"headerlink\" title=\"拥抱下个版本规范的css 即css4\"></a>拥抱下个版本规范的css 即css4</h3><p>对于下个规范的css而言，变量，方法等功能的都会增加上去，你可以这样来定义一个变量：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">--red</span>: <span class=\"number\">#d33</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span> &#123; </span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--red);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然直接在现有浏览器上是跑不通的，就正如es2015刚开始一样，我们需要一个转化器来将其转成当前可用规范。postcss的插件就可以做到。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#d33</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上面之外还有其他很多功能，postcss及其插件都能提供。</p>\n<h2 id=\"什么是postcss\"><a href=\"#什么是postcss\" class=\"headerlink\" title=\"什么是postcss\"></a>什么是postcss</h2><p>现在让我们回到最基本的问题，postcss是什么。<br>援引官网的定义，一种使用js来转化css的工具(A tool for transforming CSS with JavaScript)。其实我们更多的时候提到postcss是有两个含义的：</p>\n<ol>\n<li>postcss本身，也就是我们npm install时的安装部分  </li>\n<li>基于postCss的丰富插件系统。<br>上文那些功能，都是基于postcss的插件提供的功能。  </li>\n</ol>\n<p>postcss本身并不直接用于处理样式，只有配合它的插件，才能完成相关的编译工作。</p>\n<h4 id=\"postcss不是预编译语言的替代品\"><a href=\"#postcss不是预编译语言的替代品\" class=\"headerlink\" title=\"postcss不是预编译语言的替代品\"></a>postcss不是预编译语言的替代品</h4><p>我想你脑海里一直在复现两个名词，less/sass，开始的时候我也一样，认为postcss跟二者一样是一种css预编译语言或者起到类似作用的一种语言。postcss不是要取代哪一个，更多的是提供的一种补充，完全可以是互补的概念。<br>作为一个是使用js将css转化为AST然后进行处理的工具，完全不是预处理语言的替代品，postcss处理的必须是css文件，所以完全可以和预编译语言结合，使用预编译语言转化为css之后然后进行处理。<br>我一直认为两者不是互斥的关系，完全可以互补使用。   </p>\n<h2 id=\"为什么需要postcss\"><a href=\"#为什么需要postcss\" class=\"headerlink\" title=\"为什么需要postcss\"></a>为什么需要postcss</h2><p>大家可能有这么个疑问既然两者不互相冲突，目前我使用less/sass 也很容易满足我的需求，为什么要使用新的东西呢。我认为主要原因是其提供的丰富的插件功能，可以工作更加的简单化，便捷化，一句话，你只需要编写基本的css，其他的功能交给postcss就好。做了简单的对比可能更加清晰明了。  </p>\n<h4 id=\"实现给css属性加上浏览器前缀的功能\"><a href=\"#实现给css属性加上浏览器前缀的功能\" class=\"headerlink\" title=\"实现给css属性加上浏览器前缀的功能\"></a>实现给css属性加上浏览器前缀的功能</h4><p>对比一下less和postcss的实现： </p>\n<p>1、 对于less而言，肯定是写一个方法  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex-block</span>() &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    .flex-block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、使用postcss</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只需要编译的时候使用autoprefixer处理就好。<br>可能一个属性的效果不是特别明显，要是有很多个属性需要处理呢?  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex-block</span>() &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.transform</span>()&#123;</span><br><span class=\"line\">    //仅仅是举例子</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ccc</span>()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    .flex-block()</span><br><span class=\"line\">    <span class=\"selector-class\">.transform</span>()</span><br><span class=\"line\">    <span class=\"selector-class\">.ccc</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候postcss还是只需要如下:  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(7deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候就能看出来postcss的便捷性了，我一直认为可以抽象公共化的东西完全没有必要去重复的去手动开发。  </p>\n<h2 id=\"postcss工作原理\"><a href=\"#postcss工作原理\" class=\"headerlink\" title=\"postcss工作原理\"></a>postcss工作原理</h2><p>postcss本身是一个node模块，可以将css文件解析为抽象语法树(AST)，将该树在多个插件方法传递，然后将AST转换为字符串返回，该字符串可以输出到目标文件中。传递过程中的插件可以选择是否改变该语法树，上诉改变可以通过sourcemap来记录。如下面的流程所示(借用w3cplus的一张图)：<br><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/figure-18.png\"></p>\n<p>其实这里我们更应该关联起来的是babel，看一下功能：  </p>\n<ul>\n<li>将未来规范的转化为当前规范的转义器</li>\n<li>实现相同，都是将源文件解析为AST然后经由插件处理。</li>\n<li>丰富的插件，满足不同的需求</li>\n<li>支持自定义插件的开发   </li>\n</ul>\n<h4 id=\"当前工作流中引入postcss\"><a href=\"#当前工作流中引入postcss\" class=\"headerlink\" title=\"当前工作流中引入postcss\"></a>当前工作流中引入postcss</h4><p>大家可能会有这种想法，又是一种新的工具，我当前的开发框架中岂不是要大动。其实这种担心是没必要的。postcss是很容易引入当前的工作流中的。无论是webpack还是gulp，都有比较方便的方式。<a href=\"https://github.com/postcss/postcss#usage\" target=\"_blank\" rel=\"noopener\">官方有详细的介绍文档</a>  </p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>原先很早就看到postCss，当时太年轻认为是less的一种替代品罢了，所以一直没有去关注。了解之后感觉真的不错，至于如何使用这里就不去演示了，有兴趣的可以查看下<a href=\"https://github.com/xiaoxiangdaiyu/postcss/tree/master/\" target=\"_blank\" rel=\"noopener\">我的简单示例</a>希望更多的人使用。</p>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/\" target=\"_blank\" rel=\"noopener\">http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/</a><br><a href=\"http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/\" target=\"_blank\" rel=\"noopener\">http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/</a></p>\n","site":{"data":{}},"excerpt":"<p>一般来说介绍一个东西都是要从是什么，怎么用的顺序来讲。我感觉这样很容易让大家失去兴趣，先看一下postcss能做点什么，有兴趣的话再往下看，否则可能没有耐心看下去。让我们开始吧<br>","more":"</p>\n<h2 id=\"postcss能做什么\"><a href=\"#postcss能做什么\" class=\"headerlink\" title=\"postcss能做什么\"></a>postcss能做什么</h2><h3 id=\"补全css属性浏览器前缀\"><a href=\"#补全css属性浏览器前缀\" class=\"headerlink\" title=\"补全css属性浏览器前缀\"></a>补全css属性浏览器前缀</h3><p>手写的代码可以是这样的:  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>postcss可以转换之后成了这样:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\">  </span><br><span class=\"line\">### 检查<span class=\"selector-tag\">css</span>语法   </span><br><span class=\"line\"> </span><br><span class=\"line\">```<span class=\"selector-tag\">css</span></span><br><span class=\"line\">    <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>会有以下提示:    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/er.css</span><br><span class=\"line\"> 2:12  ✖  Unexpected invalid hex color &quot;#f0&quot;   color-no-invalid-hex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[18:27:28] &apos;css-lint&apos; errored after 98 ms</span><br><span class=\"line\">[18:27:28] Error in plugin &apos;gulp-stylelint&apos;</span><br><span class=\"line\">Message:</span><br><span class=\"line\">    Failed with 1 error</span><br></pre></td></tr></table></figure>\n<h3 id=\"拥抱下个版本规范的css-即css4\"><a href=\"#拥抱下个版本规范的css-即css4\" class=\"headerlink\" title=\"拥抱下个版本规范的css 即css4\"></a>拥抱下个版本规范的css 即css4</h3><p>对于下个规范的css而言，变量，方法等功能的都会增加上去，你可以这样来定义一个变量：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">--red</span>: <span class=\"number\">#d33</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span> &#123; </span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--red);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然直接在现有浏览器上是跑不通的，就正如es2015刚开始一样，我们需要一个转化器来将其转成当前可用规范。postcss的插件就可以做到。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#d33</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上面之外还有其他很多功能，postcss及其插件都能提供。</p>\n<h2 id=\"什么是postcss\"><a href=\"#什么是postcss\" class=\"headerlink\" title=\"什么是postcss\"></a>什么是postcss</h2><p>现在让我们回到最基本的问题，postcss是什么。<br>援引官网的定义，一种使用js来转化css的工具(A tool for transforming CSS with JavaScript)。其实我们更多的时候提到postcss是有两个含义的：</p>\n<ol>\n<li>postcss本身，也就是我们npm install时的安装部分  </li>\n<li>基于postCss的丰富插件系统。<br>上文那些功能，都是基于postcss的插件提供的功能。  </li>\n</ol>\n<p>postcss本身并不直接用于处理样式，只有配合它的插件，才能完成相关的编译工作。</p>\n<h4 id=\"postcss不是预编译语言的替代品\"><a href=\"#postcss不是预编译语言的替代品\" class=\"headerlink\" title=\"postcss不是预编译语言的替代品\"></a>postcss不是预编译语言的替代品</h4><p>我想你脑海里一直在复现两个名词，less/sass，开始的时候我也一样，认为postcss跟二者一样是一种css预编译语言或者起到类似作用的一种语言。postcss不是要取代哪一个，更多的是提供的一种补充，完全可以是互补的概念。<br>作为一个是使用js将css转化为AST然后进行处理的工具，完全不是预处理语言的替代品，postcss处理的必须是css文件，所以完全可以和预编译语言结合，使用预编译语言转化为css之后然后进行处理。<br>我一直认为两者不是互斥的关系，完全可以互补使用。   </p>\n<h2 id=\"为什么需要postcss\"><a href=\"#为什么需要postcss\" class=\"headerlink\" title=\"为什么需要postcss\"></a>为什么需要postcss</h2><p>大家可能有这么个疑问既然两者不互相冲突，目前我使用less/sass 也很容易满足我的需求，为什么要使用新的东西呢。我认为主要原因是其提供的丰富的插件功能，可以工作更加的简单化，便捷化，一句话，你只需要编写基本的css，其他的功能交给postcss就好。做了简单的对比可能更加清晰明了。  </p>\n<h4 id=\"实现给css属性加上浏览器前缀的功能\"><a href=\"#实现给css属性加上浏览器前缀的功能\" class=\"headerlink\" title=\"实现给css属性加上浏览器前缀的功能\"></a>实现给css属性加上浏览器前缀的功能</h4><p>对比一下less和postcss的实现： </p>\n<p>1、 对于less而言，肯定是写一个方法  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex-block</span>() &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    .flex-block()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、使用postcss</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只需要编译的时候使用autoprefixer处理就好。<br>可能一个属性的效果不是特别明显，要是有很多个属性需要处理呢?  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex-block</span>() &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.transform</span>()&#123;</span><br><span class=\"line\">    //仅仅是举例子</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ccc</span>()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    .flex-block()</span><br><span class=\"line\">    <span class=\"selector-class\">.transform</span>()</span><br><span class=\"line\">    <span class=\"selector-class\">.ccc</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候postcss还是只需要如下:  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(7deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候就能看出来postcss的便捷性了，我一直认为可以抽象公共化的东西完全没有必要去重复的去手动开发。  </p>\n<h2 id=\"postcss工作原理\"><a href=\"#postcss工作原理\" class=\"headerlink\" title=\"postcss工作原理\"></a>postcss工作原理</h2><p>postcss本身是一个node模块，可以将css文件解析为抽象语法树(AST)，将该树在多个插件方法传递，然后将AST转换为字符串返回，该字符串可以输出到目标文件中。传递过程中的插件可以选择是否改变该语法树，上诉改变可以通过sourcemap来记录。如下面的流程所示(借用w3cplus的一张图)：<br><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/figure-18.png\"></p>\n<p>其实这里我们更应该关联起来的是babel，看一下功能：  </p>\n<ul>\n<li>将未来规范的转化为当前规范的转义器</li>\n<li>实现相同，都是将源文件解析为AST然后经由插件处理。</li>\n<li>丰富的插件，满足不同的需求</li>\n<li>支持自定义插件的开发   </li>\n</ul>\n<h4 id=\"当前工作流中引入postcss\"><a href=\"#当前工作流中引入postcss\" class=\"headerlink\" title=\"当前工作流中引入postcss\"></a>当前工作流中引入postcss</h4><p>大家可能会有这种想法，又是一种新的工具，我当前的开发框架中岂不是要大动。其实这种担心是没必要的。postcss是很容易引入当前的工作流中的。无论是webpack还是gulp，都有比较方便的方式。<a href=\"https://github.com/postcss/postcss#usage\" target=\"_blank\" rel=\"noopener\">官方有详细的介绍文档</a>  </p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>原先很早就看到postCss，当时太年轻认为是less的一种替代品罢了，所以一直没有去关注。了解之后感觉真的不错，至于如何使用这里就不去演示了，有兴趣的可以查看下<a href=\"https://github.com/xiaoxiangdaiyu/postcss/tree/master/\" target=\"_blank\" rel=\"noopener\">我的简单示例</a>希望更多的人使用。</p>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/\" target=\"_blank\" rel=\"noopener\">http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/</a><br><a href=\"http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/\" target=\"_blank\" rel=\"noopener\">http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong/</a></p>"},{"title":"如何开发webpack loader","date":"2017-10-13T16:00:00.000Z","_content":"## 关于webpack  \n作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。  \n有兴趣的同学可以参考下我很早之前的[webpack简介](http://www.cnblogs.com/pqjwyn/p/5380689.html) .  \n确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。  \n对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。   \n<!-- more -->\n#### 学习方法  \n对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。  \n只是其[官方文档](https://webpack.js.org/contribute/writing-a-loader/)是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。    \n我相信看完文档你就知道如何开发一个loader了。  \n\n## 什么是loader  \n  \nloader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。  \n#### 简单情况   \n\n只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。  \n\nloader在function执行时可以通过this context来访问laoder API 以便更高效的开发。  \n\n一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values...)返回一系列的值。error同样传递给this.callback或者在loader中抛出。  \n\nloader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象   \n\n#### 复杂情况:    \n\n当多个loader被链式调用时，只有最后一个loader获得资源文件。  \n同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。  \n其他loader接收值由上一个loader传递。  \n\n换句话说，链式loader执行顺序从右至左或者自下而上。  \n举个栗子：下面这段代码的执行顺序就是自下而上  foo-loader==>bar-loader  \n```js\nmodule: {\n  loaders: [\n    {\n      test: /\\.js/,\n      loaders: [\n        'bar-loader',\n        'foo-loader'\n      ]\n    }\n  ]\n}\n```\n#### 注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader   \n\n如果你的文件夹不在该目录下需要在config下面增加一项配置:  \n即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。\n```js  \n    resolveLoader: {\n        modules: ['node_modules', path.resolve(__dirname, 'loaders')]\n    }\n```\n#### 温馨提示\nps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。    \n一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。   \n例如，我手写的myloader在loaders下面，例子如下。  \n```js   \n     resolveLoader:{\n        modules: ['node_modules','loader']\n    }\n```\n## Examples     \n\n就这么简单就是个普通的loader\n```js  \n    module.exports = function(source,map){\n    this.cacheable && this.cacheable()\n    this.value = source\n    return '/*copy@ xiaoxiangdaiyu*/'+JSON.stringify(source)\n    }\n```\n## 开发指南  \n\nloader需要遵循以下事项。   \n以下事项按优先级排列，第一条具有最高优先级。   \n\n#### 一、单一任务    \n\nloaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情  \n也就是说，在非必要的状况下没有必要将他们转换为js。  \n\n例如：通过查询字符串将一个字符串模板转化为html。   \n如果你写了个loader做了所有事情那么你违背了loader的第一条要求。   \n你应该为每一个task创建一个loader并且通过管道来使用它们  \n* jade-loader: 转换模板为一个module   \n* apply-loader: 创建一个module并通过查询参数来返回结果  \n* html-loade: 创建一个处理html并返回一个string的模块   \n \n#### 二、创建moulde话的模块，即正常的模块   \n\nloader产出的module应该和遵循和普通的module一样的设计原则。  \n举个例子，下面这样设计是不好的，没有模块化，依赖全局状态  \n```js\n    require(\"any-template-language-loader!./xyz.atl\");\n    var html = anyTemplateLanguage.render(\"xyz\");\n```\n#### 三、尽量表明该loader是否可以缓存  \n\n大部分loaders是cacheable，所以应该标明是否cacheable。   \n只需要在loader里面调用即可  \n```js  \n    // Cacheable identity loader\nmodule.exports = function(source) {\n\tthis.cacheable();\n\treturn source;\n};\n```\n#### 四、不要在运行和模块之间保存状态     \n\n* 一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态  \n* 一个loader相对于同一模块之前的编译过程应该是独立的。\n\n#### 五、标明依赖   \n\n如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们  \n\n```js  \n    var path = require(\"path\");\n    module.exports = function(source) {\n\tthis.cacheable();\n\tvar callback = this.async();\n\tvar headerPath = path.resolve(\"header.js\");\n\tthis.addDependency(headerPath);\n\tfs.readFile(headerPath, \"utf-8\", function(err, header) {\n\t\tif(err) return callback(err);\n\t\tcallback(null, header + \"\\n\" + source);\n\t});\n};\n```\n#### 六、解析依赖  \n\n很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(...)。这些依赖应该被模块系统所解析。  \n##### 下面是两种解决方式：\n* 1、将它们转化成require   \n* 2、 用this.resolve方法来解析路径  \n\n##### 下面是两个示例   \n\n* 1、css-loader: 将依赖转化成require，即用require来替换@import和 url(...)，解析对其他样式文件的依赖  \n* 2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。  \n\n如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.  \n```js  \n    url(file) -> require(\"./file\")\n    url(~module) -> require(\"module\")\n```\n#### 七、抽离公共代码  \n\nextract common code  我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装  \n不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中\n\n#### 八、避免写入绝对路径  \n\n不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。   \n例子：  \n```js  \n    var loaderUtils = require(\"loader-utils\");\n    return \"var runtime = require(\" +\n    loaderUtils.stringifyRequest(this, \"!\" + require.resolve(\"module/runtime\")) +\n  \");\";\n```\n#### 九、使用peerDependencies来指明依赖的库 \n\n使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。  \n\n#### 十、可编程对象作为查询项  \n\n有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。\n\n```js  \n     // webpack.config.js\n    module.exports = {\n        ...\n    lessLoader: {\n        lessPlugins: [\n        new LessPluginCleanCSS({advanced: true})\n        ]\n    }\n};\n```\n#### 结束语   \n至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步[w-loader](https://github.com/xiaoxiangdaiyu/w-loader)查看。   \n另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   \n","source":"_posts/webpack/loader.md","raw":"---\ntitle: 如何开发webpack loader\ndate: 2017-10-14\n---\n## 关于webpack  \n作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。  \n有兴趣的同学可以参考下我很早之前的[webpack简介](http://www.cnblogs.com/pqjwyn/p/5380689.html) .  \n确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。  \n对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。   \n<!-- more -->\n#### 学习方法  \n对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。  \n只是其[官方文档](https://webpack.js.org/contribute/writing-a-loader/)是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。    \n我相信看完文档你就知道如何开发一个loader了。  \n\n## 什么是loader  \n  \nloader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。  \n#### 简单情况   \n\n只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。  \n\nloader在function执行时可以通过this context来访问laoder API 以便更高效的开发。  \n\n一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values...)返回一系列的值。error同样传递给this.callback或者在loader中抛出。  \n\nloader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象   \n\n#### 复杂情况:    \n\n当多个loader被链式调用时，只有最后一个loader获得资源文件。  \n同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。  \n其他loader接收值由上一个loader传递。  \n\n换句话说，链式loader执行顺序从右至左或者自下而上。  \n举个栗子：下面这段代码的执行顺序就是自下而上  foo-loader==>bar-loader  \n```js\nmodule: {\n  loaders: [\n    {\n      test: /\\.js/,\n      loaders: [\n        'bar-loader',\n        'foo-loader'\n      ]\n    }\n  ]\n}\n```\n#### 注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader   \n\n如果你的文件夹不在该目录下需要在config下面增加一项配置:  \n即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。\n```js  \n    resolveLoader: {\n        modules: ['node_modules', path.resolve(__dirname, 'loaders')]\n    }\n```\n#### 温馨提示\nps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。    \n一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。   \n例如，我手写的myloader在loaders下面，例子如下。  \n```js   \n     resolveLoader:{\n        modules: ['node_modules','loader']\n    }\n```\n## Examples     \n\n就这么简单就是个普通的loader\n```js  \n    module.exports = function(source,map){\n    this.cacheable && this.cacheable()\n    this.value = source\n    return '/*copy@ xiaoxiangdaiyu*/'+JSON.stringify(source)\n    }\n```\n## 开发指南  \n\nloader需要遵循以下事项。   \n以下事项按优先级排列，第一条具有最高优先级。   \n\n#### 一、单一任务    \n\nloaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情  \n也就是说，在非必要的状况下没有必要将他们转换为js。  \n\n例如：通过查询字符串将一个字符串模板转化为html。   \n如果你写了个loader做了所有事情那么你违背了loader的第一条要求。   \n你应该为每一个task创建一个loader并且通过管道来使用它们  \n* jade-loader: 转换模板为一个module   \n* apply-loader: 创建一个module并通过查询参数来返回结果  \n* html-loade: 创建一个处理html并返回一个string的模块   \n \n#### 二、创建moulde话的模块，即正常的模块   \n\nloader产出的module应该和遵循和普通的module一样的设计原则。  \n举个例子，下面这样设计是不好的，没有模块化，依赖全局状态  \n```js\n    require(\"any-template-language-loader!./xyz.atl\");\n    var html = anyTemplateLanguage.render(\"xyz\");\n```\n#### 三、尽量表明该loader是否可以缓存  \n\n大部分loaders是cacheable，所以应该标明是否cacheable。   \n只需要在loader里面调用即可  \n```js  \n    // Cacheable identity loader\nmodule.exports = function(source) {\n\tthis.cacheable();\n\treturn source;\n};\n```\n#### 四、不要在运行和模块之间保存状态     \n\n* 一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态  \n* 一个loader相对于同一模块之前的编译过程应该是独立的。\n\n#### 五、标明依赖   \n\n如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们  \n\n```js  \n    var path = require(\"path\");\n    module.exports = function(source) {\n\tthis.cacheable();\n\tvar callback = this.async();\n\tvar headerPath = path.resolve(\"header.js\");\n\tthis.addDependency(headerPath);\n\tfs.readFile(headerPath, \"utf-8\", function(err, header) {\n\t\tif(err) return callback(err);\n\t\tcallback(null, header + \"\\n\" + source);\n\t});\n};\n```\n#### 六、解析依赖  \n\n很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(...)。这些依赖应该被模块系统所解析。  \n##### 下面是两种解决方式：\n* 1、将它们转化成require   \n* 2、 用this.resolve方法来解析路径  \n\n##### 下面是两个示例   \n\n* 1、css-loader: 将依赖转化成require，即用require来替换@import和 url(...)，解析对其他样式文件的依赖  \n* 2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。  \n\n如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.  \n```js  \n    url(file) -> require(\"./file\")\n    url(~module) -> require(\"module\")\n```\n#### 七、抽离公共代码  \n\nextract common code  我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装  \n不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中\n\n#### 八、避免写入绝对路径  \n\n不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。   \n例子：  \n```js  \n    var loaderUtils = require(\"loader-utils\");\n    return \"var runtime = require(\" +\n    loaderUtils.stringifyRequest(this, \"!\" + require.resolve(\"module/runtime\")) +\n  \");\";\n```\n#### 九、使用peerDependencies来指明依赖的库 \n\n使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。  \n\n#### 十、可编程对象作为查询项  \n\n有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。\n\n```js  \n     // webpack.config.js\n    module.exports = {\n        ...\n    lessLoader: {\n        lessPlugins: [\n        new LessPluginCleanCSS({advanced: true})\n        ]\n    }\n};\n```\n#### 结束语   \n至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步[w-loader](https://github.com/xiaoxiangdaiyu/w-loader)查看。   \n另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   \n","slug":"webpack/loader","published":1,"updated":"2017-12-15T13:07:11.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7dnu000cnl92uzhf9lyu","content":"<h2 id=\"关于webpack\"><a href=\"#关于webpack\" class=\"headerlink\" title=\"关于webpack\"></a>关于webpack</h2><p>作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。<br>有兴趣的同学可以参考下我很早之前的<a href=\"http://www.cnblogs.com/pqjwyn/p/5380689.html\" target=\"_blank\" rel=\"noopener\">webpack简介</a> .<br>确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。<br>对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。<br><a id=\"more\"></a></p>\n<h4 id=\"学习方法\"><a href=\"#学习方法\" class=\"headerlink\" title=\"学习方法\"></a>学习方法</h4><p>对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。<br>只是其<a href=\"https://webpack.js.org/contribute/writing-a-loader/\" target=\"_blank\" rel=\"noopener\">官方文档</a>是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。<br>我相信看完文档你就知道如何开发一个loader了。  </p>\n<h2 id=\"什么是loader\"><a href=\"#什么是loader\" class=\"headerlink\" title=\"什么是loader\"></a>什么是loader</h2><p>loader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。  </p>\n<h4 id=\"简单情况\"><a href=\"#简单情况\" class=\"headerlink\" title=\"简单情况\"></a>简单情况</h4><p>只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。  </p>\n<p>loader在function执行时可以通过this context来访问laoder API 以便更高效的开发。  </p>\n<p>一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values…)返回一系列的值。error同样传递给this.callback或者在loader中抛出。  </p>\n<p>loader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象   </p>\n<h4 id=\"复杂情况\"><a href=\"#复杂情况\" class=\"headerlink\" title=\"复杂情况:\"></a>复杂情况:</h4><p>当多个loader被链式调用时，只有最后一个loader获得资源文件。<br>同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。<br>其他loader接收值由上一个loader传递。  </p>\n<p>换句话说，链式loader执行顺序从右至左或者自下而上。<br>举个栗子：下面这段代码的执行顺序就是自下而上  foo-loader==&gt;bar-loader<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  loaders: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js/</span>,</span><br><span class=\"line\">      loaders: [</span><br><span class=\"line\">        <span class=\"string\">'bar-loader'</span>,</span><br><span class=\"line\">        <span class=\"string\">'foo-loader'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader\"><a href=\"#注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader\" class=\"headerlink\" title=\"注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader\"></a>注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader</h4><p>如果你的文件夹不在该目录下需要在config下面增加一项配置:<br>即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolveLoader: &#123;</span><br><span class=\"line\">    modules: [<span class=\"string\">'node_modules'</span>, path.resolve(__dirname, <span class=\"string\">'loaders'</span>)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"温馨提示\"><a href=\"#温馨提示\" class=\"headerlink\" title=\"温馨提示\"></a>温馨提示</h4><p>ps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。<br>一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。<br>例如，我手写的myloader在loaders下面，例子如下。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> resolveLoader:&#123;</span><br><span class=\"line\">    modules: [<span class=\"string\">'node_modules'</span>,<span class=\"string\">'loader'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>就这么简单就是个普通的loader<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source,map</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable()</span><br><span class=\"line\"><span class=\"keyword\">this</span>.value = source</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'/*copy@ xiaoxiangdaiyu*/'</span>+<span class=\"built_in\">JSON</span>.stringify(source)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"开发指南\"><a href=\"#开发指南\" class=\"headerlink\" title=\"开发指南\"></a>开发指南</h2><p>loader需要遵循以下事项。<br>以下事项按优先级排列，第一条具有最高优先级。   </p>\n<h4 id=\"一、单一任务\"><a href=\"#一、单一任务\" class=\"headerlink\" title=\"一、单一任务\"></a>一、单一任务</h4><p>loaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情<br>也就是说，在非必要的状况下没有必要将他们转换为js。  </p>\n<p>例如：通过查询字符串将一个字符串模板转化为html。<br>如果你写了个loader做了所有事情那么你违背了loader的第一条要求。<br>你应该为每一个task创建一个loader并且通过管道来使用它们  </p>\n<ul>\n<li>jade-loader: 转换模板为一个module   </li>\n<li>apply-loader: 创建一个module并通过查询参数来返回结果  </li>\n<li>html-loade: 创建一个处理html并返回一个string的模块   </li>\n</ul>\n<h4 id=\"二、创建moulde话的模块，即正常的模块\"><a href=\"#二、创建moulde话的模块，即正常的模块\" class=\"headerlink\" title=\"二、创建moulde话的模块，即正常的模块\"></a>二、创建moulde话的模块，即正常的模块</h4><p>loader产出的module应该和遵循和普通的module一样的设计原则。<br>举个例子，下面这样设计是不好的，没有模块化，依赖全局状态<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"any-template-language-loader!./xyz.atl\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> html = anyTemplateLanguage.render(<span class=\"string\">\"xyz\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三、尽量表明该loader是否可以缓存\"><a href=\"#三、尽量表明该loader是否可以缓存\" class=\"headerlink\" title=\"三、尽量表明该loader是否可以缓存\"></a>三、尽量表明该loader是否可以缓存</h4><p>大部分loaders是cacheable，所以应该标明是否cacheable。<br>只需要在loader里面调用即可<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// Cacheable identity loader</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"四、不要在运行和模块之间保存状态\"><a href=\"#四、不要在运行和模块之间保存状态\" class=\"headerlink\" title=\"四、不要在运行和模块之间保存状态\"></a>四、不要在运行和模块之间保存状态</h4><ul>\n<li>一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态  </li>\n<li>一个loader相对于同一模块之前的编译过程应该是独立的。</li>\n</ul>\n<h4 id=\"五、标明依赖\"><a href=\"#五、标明依赖\" class=\"headerlink\" title=\"五、标明依赖\"></a>五、标明依赖</h4><p>如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> headerPath = path.resolve(<span class=\"string\">\"header.js\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.addDependency(headerPath);</span><br><span class=\"line\">\tfs.readFile(headerPath, <span class=\"string\">\"utf-8\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, header</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">\t\tcallback(<span class=\"literal\">null</span>, header + <span class=\"string\">\"\\n\"</span> + source);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"六、解析依赖\"><a href=\"#六、解析依赖\" class=\"headerlink\" title=\"六、解析依赖\"></a>六、解析依赖</h4><p>很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(…)。这些依赖应该被模块系统所解析。  </p>\n<h5 id=\"下面是两种解决方式：\"><a href=\"#下面是两种解决方式：\" class=\"headerlink\" title=\"下面是两种解决方式：\"></a>下面是两种解决方式：</h5><ul>\n<li>1、将它们转化成require   </li>\n<li>2、 用this.resolve方法来解析路径  </li>\n</ul>\n<h5 id=\"下面是两个示例\"><a href=\"#下面是两个示例\" class=\"headerlink\" title=\"下面是两个示例\"></a>下面是两个示例</h5><ul>\n<li>1、css-loader: 将依赖转化成require，即用require来替换@import和 url(…)，解析对其他样式文件的依赖  </li>\n<li>2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。  </li>\n</ul>\n<p>如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(file) -&gt; <span class=\"built_in\">require</span>(<span class=\"string\">\"./file\"</span>)</span><br><span class=\"line\">url(~<span class=\"built_in\">module</span>) -&gt; <span class=\"built_in\">require</span>(<span class=\"string\">\"module\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"七、抽离公共代码\"><a href=\"#七、抽离公共代码\" class=\"headerlink\" title=\"七、抽离公共代码\"></a>七、抽离公共代码</h4><p>extract common code  我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装<br>不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中</p>\n<h4 id=\"八、避免写入绝对路径\"><a href=\"#八、避免写入绝对路径\" class=\"headerlink\" title=\"八、避免写入绝对路径\"></a>八、避免写入绝对路径</h4><p>不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。<br>例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">\"loader-utils\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"var runtime = require(\"</span> +</span><br><span class=\"line\">  loaderUtils.stringifyRequest(<span class=\"keyword\">this</span>, <span class=\"string\">\"!\"</span> + <span class=\"built_in\">require</span>.resolve(<span class=\"string\">\"module/runtime\"</span>)) +</span><br><span class=\"line\"><span class=\"string\">\");\"</span>;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"九、使用peerDependencies来指明依赖的库\"><a href=\"#九、使用peerDependencies来指明依赖的库\" class=\"headerlink\" title=\"九、使用peerDependencies来指明依赖的库\"></a>九、使用peerDependencies来指明依赖的库</h4><p>使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。  </p>\n<h4 id=\"十、可编程对象作为查询项\"><a href=\"#十、可编程对象作为查询项\" class=\"headerlink\" title=\"十、可编程对象作为查询项\"></a>十、可编程对象作为查询项</h4><p>有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    lessLoader: &#123;</span><br><span class=\"line\">        lessPlugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> LessPluginCleanCSS(&#123;<span class=\"attr\">advanced</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步<a href=\"https://github.com/xiaoxiangdaiyu/w-loader\" target=\"_blank\" rel=\"noopener\">w-loader</a>查看。<br>另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"关于webpack\"><a href=\"#关于webpack\" class=\"headerlink\" title=\"关于webpack\"></a>关于webpack</h2><p>作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。<br>有兴趣的同学可以参考下我很早之前的<a href=\"http://www.cnblogs.com/pqjwyn/p/5380689.html\" target=\"_blank\" rel=\"noopener\">webpack简介</a> .<br>确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。<br>对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。<br>","more":"</p>\n<h4 id=\"学习方法\"><a href=\"#学习方法\" class=\"headerlink\" title=\"学习方法\"></a>学习方法</h4><p>对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。<br>只是其<a href=\"https://webpack.js.org/contribute/writing-a-loader/\" target=\"_blank\" rel=\"noopener\">官方文档</a>是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。<br>我相信看完文档你就知道如何开发一个loader了。  </p>\n<h2 id=\"什么是loader\"><a href=\"#什么是loader\" class=\"headerlink\" title=\"什么是loader\"></a>什么是loader</h2><p>loader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。  </p>\n<h4 id=\"简单情况\"><a href=\"#简单情况\" class=\"headerlink\" title=\"简单情况\"></a>简单情况</h4><p>只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。  </p>\n<p>loader在function执行时可以通过this context来访问laoder API 以便更高效的开发。  </p>\n<p>一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values…)返回一系列的值。error同样传递给this.callback或者在loader中抛出。  </p>\n<p>loader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象   </p>\n<h4 id=\"复杂情况\"><a href=\"#复杂情况\" class=\"headerlink\" title=\"复杂情况:\"></a>复杂情况:</h4><p>当多个loader被链式调用时，只有最后一个loader获得资源文件。<br>同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。<br>其他loader接收值由上一个loader传递。  </p>\n<p>换句话说，链式loader执行顺序从右至左或者自下而上。<br>举个栗子：下面这段代码的执行顺序就是自下而上  foo-loader==&gt;bar-loader<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  loaders: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js/</span>,</span><br><span class=\"line\">      loaders: [</span><br><span class=\"line\">        <span class=\"string\">'bar-loader'</span>,</span><br><span class=\"line\">        <span class=\"string\">'foo-loader'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader\"><a href=\"#注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader\" class=\"headerlink\" title=\"注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader\"></a>注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader</h4><p>如果你的文件夹不在该目录下需要在config下面增加一项配置:<br>即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolveLoader: &#123;</span><br><span class=\"line\">    modules: [<span class=\"string\">'node_modules'</span>, path.resolve(__dirname, <span class=\"string\">'loaders'</span>)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"温馨提示\"><a href=\"#温馨提示\" class=\"headerlink\" title=\"温馨提示\"></a>温馨提示</h4><p>ps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。<br>一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。<br>例如，我手写的myloader在loaders下面，例子如下。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> resolveLoader:&#123;</span><br><span class=\"line\">    modules: [<span class=\"string\">'node_modules'</span>,<span class=\"string\">'loader'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>就这么简单就是个普通的loader<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source,map</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable()</span><br><span class=\"line\"><span class=\"keyword\">this</span>.value = source</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'/*copy@ xiaoxiangdaiyu*/'</span>+<span class=\"built_in\">JSON</span>.stringify(source)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"开发指南\"><a href=\"#开发指南\" class=\"headerlink\" title=\"开发指南\"></a>开发指南</h2><p>loader需要遵循以下事项。<br>以下事项按优先级排列，第一条具有最高优先级。   </p>\n<h4 id=\"一、单一任务\"><a href=\"#一、单一任务\" class=\"headerlink\" title=\"一、单一任务\"></a>一、单一任务</h4><p>loaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情<br>也就是说，在非必要的状况下没有必要将他们转换为js。  </p>\n<p>例如：通过查询字符串将一个字符串模板转化为html。<br>如果你写了个loader做了所有事情那么你违背了loader的第一条要求。<br>你应该为每一个task创建一个loader并且通过管道来使用它们  </p>\n<ul>\n<li>jade-loader: 转换模板为一个module   </li>\n<li>apply-loader: 创建一个module并通过查询参数来返回结果  </li>\n<li>html-loade: 创建一个处理html并返回一个string的模块   </li>\n</ul>\n<h4 id=\"二、创建moulde话的模块，即正常的模块\"><a href=\"#二、创建moulde话的模块，即正常的模块\" class=\"headerlink\" title=\"二、创建moulde话的模块，即正常的模块\"></a>二、创建moulde话的模块，即正常的模块</h4><p>loader产出的module应该和遵循和普通的module一样的设计原则。<br>举个例子，下面这样设计是不好的，没有模块化，依赖全局状态<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"any-template-language-loader!./xyz.atl\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> html = anyTemplateLanguage.render(<span class=\"string\">\"xyz\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三、尽量表明该loader是否可以缓存\"><a href=\"#三、尽量表明该loader是否可以缓存\" class=\"headerlink\" title=\"三、尽量表明该loader是否可以缓存\"></a>三、尽量表明该loader是否可以缓存</h4><p>大部分loaders是cacheable，所以应该标明是否cacheable。<br>只需要在loader里面调用即可<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// Cacheable identity loader</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"四、不要在运行和模块之间保存状态\"><a href=\"#四、不要在运行和模块之间保存状态\" class=\"headerlink\" title=\"四、不要在运行和模块之间保存状态\"></a>四、不要在运行和模块之间保存状态</h4><ul>\n<li>一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态  </li>\n<li>一个loader相对于同一模块之前的编译过程应该是独立的。</li>\n</ul>\n<h4 id=\"五、标明依赖\"><a href=\"#五、标明依赖\" class=\"headerlink\" title=\"五、标明依赖\"></a>五、标明依赖</h4><p>如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> headerPath = path.resolve(<span class=\"string\">\"header.js\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.addDependency(headerPath);</span><br><span class=\"line\">\tfs.readFile(headerPath, <span class=\"string\">\"utf-8\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, header</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">\t\tcallback(<span class=\"literal\">null</span>, header + <span class=\"string\">\"\\n\"</span> + source);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"六、解析依赖\"><a href=\"#六、解析依赖\" class=\"headerlink\" title=\"六、解析依赖\"></a>六、解析依赖</h4><p>很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(…)。这些依赖应该被模块系统所解析。  </p>\n<h5 id=\"下面是两种解决方式：\"><a href=\"#下面是两种解决方式：\" class=\"headerlink\" title=\"下面是两种解决方式：\"></a>下面是两种解决方式：</h5><ul>\n<li>1、将它们转化成require   </li>\n<li>2、 用this.resolve方法来解析路径  </li>\n</ul>\n<h5 id=\"下面是两个示例\"><a href=\"#下面是两个示例\" class=\"headerlink\" title=\"下面是两个示例\"></a>下面是两个示例</h5><ul>\n<li>1、css-loader: 将依赖转化成require，即用require来替换@import和 url(…)，解析对其他样式文件的依赖  </li>\n<li>2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。  </li>\n</ul>\n<p>如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(file) -&gt; <span class=\"built_in\">require</span>(<span class=\"string\">\"./file\"</span>)</span><br><span class=\"line\">url(~<span class=\"built_in\">module</span>) -&gt; <span class=\"built_in\">require</span>(<span class=\"string\">\"module\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"七、抽离公共代码\"><a href=\"#七、抽离公共代码\" class=\"headerlink\" title=\"七、抽离公共代码\"></a>七、抽离公共代码</h4><p>extract common code  我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装<br>不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中</p>\n<h4 id=\"八、避免写入绝对路径\"><a href=\"#八、避免写入绝对路径\" class=\"headerlink\" title=\"八、避免写入绝对路径\"></a>八、避免写入绝对路径</h4><p>不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。<br>例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">\"loader-utils\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"var runtime = require(\"</span> +</span><br><span class=\"line\">  loaderUtils.stringifyRequest(<span class=\"keyword\">this</span>, <span class=\"string\">\"!\"</span> + <span class=\"built_in\">require</span>.resolve(<span class=\"string\">\"module/runtime\"</span>)) +</span><br><span class=\"line\"><span class=\"string\">\");\"</span>;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"九、使用peerDependencies来指明依赖的库\"><a href=\"#九、使用peerDependencies来指明依赖的库\" class=\"headerlink\" title=\"九、使用peerDependencies来指明依赖的库\"></a>九、使用peerDependencies来指明依赖的库</h4><p>使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。  </p>\n<h4 id=\"十、可编程对象作为查询项\"><a href=\"#十、可编程对象作为查询项\" class=\"headerlink\" title=\"十、可编程对象作为查询项\"></a>十、可编程对象作为查询项</h4><p>有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    lessLoader: &#123;</span><br><span class=\"line\">        lessPlugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> LessPluginCleanCSS(&#123;<span class=\"attr\">advanced</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步<a href=\"https://github.com/xiaoxiangdaiyu/w-loader\" target=\"_blank\" rel=\"noopener\">w-loader</a>查看。<br>另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   </p>"},{"title":"webpack优化之code splitting","date":"2018-01-26T02:55:57.000Z","_content":"作为当前风头正盛的打包工具，webpack风靡前端界。确实作为引领了一个时代的打包工具，很多方面都带来了颠覆性的改进，让我们更加的感受到自动化的快感。不过最为大家诟病的一点就是用起来太难了。  \n<!-- more -->\n要想愉快的使用，要使用n多的配置项，究其原因在于文档的不够详细、本身默认集成的不足。  \n也不能说这是缺点吧，更多的主动权放给用户就意味着配置工作量的增加，这里就不过多探讨了。  \n当历尽千辛万苦，你的项目跑起来之后，可能会发现有一些不太美好的问题的出现，编译慢、打包文件大等。那么，我们还要花些时间来看看怎么优化相关配置了。 下面一起看下code splitting \n## code splitting出现的背景 \n对于前端资源来说，文件体积过大是很影响性能的一项。特别是对于移动端的设备而言简直是灾难。   \n此外对于某些只要特定环境下才需要的代码，一开始就加载进来显然也不那么合理，这就引出了按需加载的概念了。\n   \n   为了解决这些情况，代码拆分就应运而生了。代码拆分故名思意就是将大的文件按不同粒度拆分，以满足解决生成文件体积过大、按需加载等需求。  \n   具体到webpack而言有下面几种方式来达到我们的目的。\n## webpack实现代码拆分的方式   \nwebpack通过下面三种方式来达到以上目的\n1. Entry Points: 多入口分开打包\n2. Prevent Duplication:去重，抽离公共模块和第三方库\n3. Dynamic Imports:动态加载 \n这里不去扒文档上的定义了，我们从一个例子中来逐步体会他们不同的作用。\n\n假设我们有这么个项目，有下面几个文件\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd777da3adc1?w=738&h=254&f=jpeg&s=19970)  \n\n代码很简单(示例而已，直接用commonjs的语法来写了):  \n\n```js\n//a.js\nvar react = require('react')\nvar tool = require('./tool')\nvar b = require('./b')\nfunction load(){\n    b()\n    tool()\n    console.log('全部文件都从一个入口打包')\n}\nload()\n//b.js\nvar react = require('react')\nvar tool = require('./tool')\nfunction b(){\n    tool()\n    console.log('这是bjs文件')\n}\nmodule.exports = b;\n//tool.js\nvar react = require('react')\nfunction tool(){\n    console.log('这是tooljs文件')\n}\nmodule.exports = tool;\n```  \n\n配置很简单:\n\n```js\nvar webpack = require('webpack');module.exports = {\n    entry: './codesplitting/c1/a.js',\n    output: {\n        path: __dirname,\n        filename: '/dist/index.js'\n    }\n    //*****\n}\n```\n直接打包：可以看到文件大小有2047行,体积也变大了\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd777e941ac1?w=1280&h=402&f=png&s=119875)  \n\n目前只引入了react，并且业务代码几乎没有的情况下。大家可以猜到实际项目中的情况了。来让我们进行第一优化  \n### Entry Points\n\n如果业务中的项目不是单页面应用，这一步可以忽略了，直接是多入口打包。这里是为了演示效果，强行分一个模块出来打包，假设我们的文件也很大，需要将b.js单独打个包出来:\n\n```js\n    entry: {\n        index:'./codesplitting/c1/a.js',\n        other:'./codesplitting/c1/b.js'\n    },\n    output: {\n        path: path.resolve(__dirname, './dist'),\n        filename: '[name].js'\n    }，\n    //***\n```\n这里a.js也需要修改,去掉对b的引用。入口文件之间不能相互引用的。不然，问题就大了，到底以谁为主呢，这样就陷入了循环引用的问题。\n此时的生成文件如下:\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd77812b0d89?w=1170&h=342&f=png&s=129329)  \n看来文件竟然只小了那么一点了吧？第一步的优化这里就完成了，显然你会认为我在开玩笑。  \n当然这只是万里长征第一步，看一下dist下的文件不难发现两个文件中都把react这个第三方库和tool.js这个可复用模块打进去了，显然这样重复打包有点没必要。  \n是不是可以把这些复用性强的模块拿出来单独打包呢？  \n这样浏览器第一次请求之后就会将该文件缓存起来，从服务端请求的只有体积缩小之后的业务文件了，这样的话加载速度显然会有所提升。  \n如果你也是这么想的，来一起继续看下去。\n\n### Prevent Duplication  \nwebpack去除重复引用是通过[CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/)插件来实现的。该插件的配置项如下：\n\n```js\n{\n    //被抽离为公共文件的chunk名，例如common,可以是string或者数组\n    //显然如果是单个的模块，就是name多个就是names\n    name:string,\n    names:[],\n    //打包之后公共模块的名称模板\n    //例如'[name].js'\n    //如果省略，则和name名称一致\n    filename:string,\n     //模块被引的最小次数，也就是说至少有几个组件引用了该模块。\n    //如果是Infinity，则表明单纯的创建，并不做任何事情\n    minChunks:2  \n}\n```\n具体在webpack中去重对于第三方库显示声明vendor，公共模块声明common的方式来处理\n\n```js\nentry: {\n        index:'./codesplitting/c1/a.js',\n        other:'./codesplitting/c1/b.js',\n        //第三方库显示声明\n        vendor:['react'],\n        //公共组件声明为common\n        common:['./codesplitting/c1/tool']\n    },\n    //***\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({\n            names:[\"common\", \"vendor\"],\n            filename: \"[name].js\"\n        })  \n    ]\n```  \n\n打包结果如下：\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd7786a1c7a1?w=958&h=266&f=png&s=95165)\n\n可以看到index和other两个业务包已经很小了，react被抽离到单独的包中。  \n这样还有一个问题，对于某些代码可能只有在特定条件下才执行，或者可能就不执行。  \n我不希望在首屏就去加载它，也就是我们常说的按需加载是要怎么做呢。一起看下去。  \n### Dynamic Imports  \nwebpack建议如下两种方式使用动态加载。   \n\n1)、ECMAScript中出于提案状态的import()   \n\n2)、webpack 特定的 require.ensure   \n\n我们这里就是用第二种来看下效果(毕竟偷懒没用babel...),在ajs中动态引入di.js  \n\n```js\n    //虽然始终会加载,大家能明白就行\n    if(true){\n        require.ensure([],function(require){\n            var di = require('./di')\n        })\n    }\n    //新增动态加载的js\n    function di(){\n        tool()\n        console.log('这是动态引入的文件')\n    }\n    module.exports = di;\n```\n运行之后可以发现多了个2.2.js,打开可以发现就是我们新建的动态引入的di.js\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd77c0c64a7d?w=1086&h=266&f=png&s=94861)\n\n大家可能会问怎么确定就是动态引入的呢，虽然本示例只能看打包之后的例子(就不引入dev server了，毕竟是懒。。。)我们依然可以从代码里看到结果。\n首先、查看index.js文件，可以看到下面的代码：\n\n```js\n      var react = __webpack_require__(2)\n\t   var tool = __webpack_require__(1)  \n\t   /****省略8*****/\n      //虽然始终会加载\n\t    if(true){\n\t        __webpack_require__.e/* nsure */(2, function(require){\n\t            var di = __webpack_require__(13)\n\t        })\n\t    }\n```\n\n与直接require的模块不同,require.ensure被转化为了 __webpack_require__.e方法，来继续看一下该方法有什么用。\n\n```js  \n   \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n\t\t// \"0\" is the signal for \"already loaded\"\n\t\tif(installedChunks[chunkId] === 0)\n\t\t\treturn callback.call(null, __webpack_require__);\n\n\t\t// an array means \"currently loading\".\n\t\tif(installedChunks[chunkId] !== undefined) {\n\t\t\tinstalledChunks[chunkId].push(callback);\n\t\t} else {\n\t\t\t// start chunk loading\n\t\t\tinstalledChunks[chunkId] = [callback];\n\t\t\tvar head = document.getElementsByTagName('head')[0];\n\t\t\tvar script = document.createElement('script');\n\t\t\tscript.type = 'text/javascript';\n\t\t\tscript.charset = 'utf-8';\n\t\t\tscript.async = true;\n\n\t\t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + ({\"0\":\"common\",\"1\":\"index\",\"3\":\"other\"}[chunkId]||chunkId) + \".js\";\n\t\t\thead.appendChild(script);\n\t\t}\n\t};\n```  \n结合注释直接从源码中可以看出来，最后面的条件语句来创建script标签进而实现动态加载的。所谓动态加载本质还是要创建script标签来实现的。\n#### 结束语\n至此代码分割部分的优化已经完成了，以上是个人关于代码分割的简单理解，抛砖引玉，共同学习进步。更多请移步[github查看](https://github.com/xiaoxiangdaiyu/webpack_demo/tree/master/codesplitting)","source":"_posts/webpack/code-splitting.md","raw":"---\ntitle: webpack优化之code splitting\ndate: 2018-01-26 10:55:57\ntags: webpack\n---\n作为当前风头正盛的打包工具，webpack风靡前端界。确实作为引领了一个时代的打包工具，很多方面都带来了颠覆性的改进，让我们更加的感受到自动化的快感。不过最为大家诟病的一点就是用起来太难了。  \n<!-- more -->\n要想愉快的使用，要使用n多的配置项，究其原因在于文档的不够详细、本身默认集成的不足。  \n也不能说这是缺点吧，更多的主动权放给用户就意味着配置工作量的增加，这里就不过多探讨了。  \n当历尽千辛万苦，你的项目跑起来之后，可能会发现有一些不太美好的问题的出现，编译慢、打包文件大等。那么，我们还要花些时间来看看怎么优化相关配置了。 下面一起看下code splitting \n## code splitting出现的背景 \n对于前端资源来说，文件体积过大是很影响性能的一项。特别是对于移动端的设备而言简直是灾难。   \n此外对于某些只要特定环境下才需要的代码，一开始就加载进来显然也不那么合理，这就引出了按需加载的概念了。\n   \n   为了解决这些情况，代码拆分就应运而生了。代码拆分故名思意就是将大的文件按不同粒度拆分，以满足解决生成文件体积过大、按需加载等需求。  \n   具体到webpack而言有下面几种方式来达到我们的目的。\n## webpack实现代码拆分的方式   \nwebpack通过下面三种方式来达到以上目的\n1. Entry Points: 多入口分开打包\n2. Prevent Duplication:去重，抽离公共模块和第三方库\n3. Dynamic Imports:动态加载 \n这里不去扒文档上的定义了，我们从一个例子中来逐步体会他们不同的作用。\n\n假设我们有这么个项目，有下面几个文件\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd777da3adc1?w=738&h=254&f=jpeg&s=19970)  \n\n代码很简单(示例而已，直接用commonjs的语法来写了):  \n\n```js\n//a.js\nvar react = require('react')\nvar tool = require('./tool')\nvar b = require('./b')\nfunction load(){\n    b()\n    tool()\n    console.log('全部文件都从一个入口打包')\n}\nload()\n//b.js\nvar react = require('react')\nvar tool = require('./tool')\nfunction b(){\n    tool()\n    console.log('这是bjs文件')\n}\nmodule.exports = b;\n//tool.js\nvar react = require('react')\nfunction tool(){\n    console.log('这是tooljs文件')\n}\nmodule.exports = tool;\n```  \n\n配置很简单:\n\n```js\nvar webpack = require('webpack');module.exports = {\n    entry: './codesplitting/c1/a.js',\n    output: {\n        path: __dirname,\n        filename: '/dist/index.js'\n    }\n    //*****\n}\n```\n直接打包：可以看到文件大小有2047行,体积也变大了\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd777e941ac1?w=1280&h=402&f=png&s=119875)  \n\n目前只引入了react，并且业务代码几乎没有的情况下。大家可以猜到实际项目中的情况了。来让我们进行第一优化  \n### Entry Points\n\n如果业务中的项目不是单页面应用，这一步可以忽略了，直接是多入口打包。这里是为了演示效果，强行分一个模块出来打包，假设我们的文件也很大，需要将b.js单独打个包出来:\n\n```js\n    entry: {\n        index:'./codesplitting/c1/a.js',\n        other:'./codesplitting/c1/b.js'\n    },\n    output: {\n        path: path.resolve(__dirname, './dist'),\n        filename: '[name].js'\n    }，\n    //***\n```\n这里a.js也需要修改,去掉对b的引用。入口文件之间不能相互引用的。不然，问题就大了，到底以谁为主呢，这样就陷入了循环引用的问题。\n此时的生成文件如下:\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd77812b0d89?w=1170&h=342&f=png&s=129329)  \n看来文件竟然只小了那么一点了吧？第一步的优化这里就完成了，显然你会认为我在开玩笑。  \n当然这只是万里长征第一步，看一下dist下的文件不难发现两个文件中都把react这个第三方库和tool.js这个可复用模块打进去了，显然这样重复打包有点没必要。  \n是不是可以把这些复用性强的模块拿出来单独打包呢？  \n这样浏览器第一次请求之后就会将该文件缓存起来，从服务端请求的只有体积缩小之后的业务文件了，这样的话加载速度显然会有所提升。  \n如果你也是这么想的，来一起继续看下去。\n\n### Prevent Duplication  \nwebpack去除重复引用是通过[CommonsChunkPlugin](https://webpack.js.org/plugins/commons-chunk-plugin/)插件来实现的。该插件的配置项如下：\n\n```js\n{\n    //被抽离为公共文件的chunk名，例如common,可以是string或者数组\n    //显然如果是单个的模块，就是name多个就是names\n    name:string,\n    names:[],\n    //打包之后公共模块的名称模板\n    //例如'[name].js'\n    //如果省略，则和name名称一致\n    filename:string,\n     //模块被引的最小次数，也就是说至少有几个组件引用了该模块。\n    //如果是Infinity，则表明单纯的创建，并不做任何事情\n    minChunks:2  \n}\n```\n具体在webpack中去重对于第三方库显示声明vendor，公共模块声明common的方式来处理\n\n```js\nentry: {\n        index:'./codesplitting/c1/a.js',\n        other:'./codesplitting/c1/b.js',\n        //第三方库显示声明\n        vendor:['react'],\n        //公共组件声明为common\n        common:['./codesplitting/c1/tool']\n    },\n    //***\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({\n            names:[\"common\", \"vendor\"],\n            filename: \"[name].js\"\n        })  \n    ]\n```  \n\n打包结果如下：\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd7786a1c7a1?w=958&h=266&f=png&s=95165)\n\n可以看到index和other两个业务包已经很小了，react被抽离到单独的包中。  \n这样还有一个问题，对于某些代码可能只有在特定条件下才执行，或者可能就不执行。  \n我不希望在首屏就去加载它，也就是我们常说的按需加载是要怎么做呢。一起看下去。  \n### Dynamic Imports  \nwebpack建议如下两种方式使用动态加载。   \n\n1)、ECMAScript中出于提案状态的import()   \n\n2)、webpack 特定的 require.ensure   \n\n我们这里就是用第二种来看下效果(毕竟偷懒没用babel...),在ajs中动态引入di.js  \n\n```js\n    //虽然始终会加载,大家能明白就行\n    if(true){\n        require.ensure([],function(require){\n            var di = require('./di')\n        })\n    }\n    //新增动态加载的js\n    function di(){\n        tool()\n        console.log('这是动态引入的文件')\n    }\n    module.exports = di;\n```\n运行之后可以发现多了个2.2.js,打开可以发现就是我们新建的动态引入的di.js\n![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd77c0c64a7d?w=1086&h=266&f=png&s=94861)\n\n大家可能会问怎么确定就是动态引入的呢，虽然本示例只能看打包之后的例子(就不引入dev server了，毕竟是懒。。。)我们依然可以从代码里看到结果。\n首先、查看index.js文件，可以看到下面的代码：\n\n```js\n      var react = __webpack_require__(2)\n\t   var tool = __webpack_require__(1)  \n\t   /****省略8*****/\n      //虽然始终会加载\n\t    if(true){\n\t        __webpack_require__.e/* nsure */(2, function(require){\n\t            var di = __webpack_require__(13)\n\t        })\n\t    }\n```\n\n与直接require的模块不同,require.ensure被转化为了 __webpack_require__.e方法，来继续看一下该方法有什么用。\n\n```js  \n   \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n\t\t// \"0\" is the signal for \"already loaded\"\n\t\tif(installedChunks[chunkId] === 0)\n\t\t\treturn callback.call(null, __webpack_require__);\n\n\t\t// an array means \"currently loading\".\n\t\tif(installedChunks[chunkId] !== undefined) {\n\t\t\tinstalledChunks[chunkId].push(callback);\n\t\t} else {\n\t\t\t// start chunk loading\n\t\t\tinstalledChunks[chunkId] = [callback];\n\t\t\tvar head = document.getElementsByTagName('head')[0];\n\t\t\tvar script = document.createElement('script');\n\t\t\tscript.type = 'text/javascript';\n\t\t\tscript.charset = 'utf-8';\n\t\t\tscript.async = true;\n\n\t\t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + ({\"0\":\"common\",\"1\":\"index\",\"3\":\"other\"}[chunkId]||chunkId) + \".js\";\n\t\t\thead.appendChild(script);\n\t\t}\n\t};\n```  \n结合注释直接从源码中可以看出来，最后面的条件语句来创建script标签进而实现动态加载的。所谓动态加载本质还是要创建script标签来实现的。\n#### 结束语\n至此代码分割部分的优化已经完成了，以上是个人关于代码分割的简单理解，抛砖引玉，共同学习进步。更多请移步[github查看](https://github.com/xiaoxiangdaiyu/webpack_demo/tree/master/codesplitting)","slug":"webpack/code-splitting","published":1,"updated":"2018-01-26T05:01:56.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7dnw000dnl92kx25xek3","content":"<p>作为当前风头正盛的打包工具，webpack风靡前端界。确实作为引领了一个时代的打包工具，很多方面都带来了颠覆性的改进，让我们更加的感受到自动化的快感。不过最为大家诟病的一点就是用起来太难了。<br><a id=\"more\"></a><br>要想愉快的使用，要使用n多的配置项，究其原因在于文档的不够详细、本身默认集成的不足。<br>也不能说这是缺点吧，更多的主动权放给用户就意味着配置工作量的增加，这里就不过多探讨了。<br>当历尽千辛万苦，你的项目跑起来之后，可能会发现有一些不太美好的问题的出现，编译慢、打包文件大等。那么，我们还要花些时间来看看怎么优化相关配置了。 下面一起看下code splitting </p>\n<h2 id=\"code-splitting出现的背景\"><a href=\"#code-splitting出现的背景\" class=\"headerlink\" title=\"code splitting出现的背景\"></a>code splitting出现的背景</h2><p>对于前端资源来说，文件体积过大是很影响性能的一项。特别是对于移动端的设备而言简直是灾难。<br>此外对于某些只要特定环境下才需要的代码，一开始就加载进来显然也不那么合理，这就引出了按需加载的概念了。</p>\n<p>   为了解决这些情况，代码拆分就应运而生了。代码拆分故名思意就是将大的文件按不同粒度拆分，以满足解决生成文件体积过大、按需加载等需求。<br>   具体到webpack而言有下面几种方式来达到我们的目的。</p>\n<h2 id=\"webpack实现代码拆分的方式\"><a href=\"#webpack实现代码拆分的方式\" class=\"headerlink\" title=\"webpack实现代码拆分的方式\"></a>webpack实现代码拆分的方式</h2><p>webpack通过下面三种方式来达到以上目的</p>\n<ol>\n<li>Entry Points: 多入口分开打包</li>\n<li>Prevent Duplication:去重，抽离公共模块和第三方库</li>\n<li>Dynamic Imports:动态加载<br>这里不去扒文档上的定义了，我们从一个例子中来逐步体会他们不同的作用。</li>\n</ol>\n<p>假设我们有这么个项目，有下面几个文件<br><img src=\"https://user-gold-cdn.xitu.io/2018/1/25/1612dd777da3adc1?w=738&amp;h=254&amp;f=jpeg&amp;s=19970\" alt=\"\">  </p>\n<p>代码很简单(示例而已，直接用commonjs的语法来写了):  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> tool = <span class=\"built_in\">require</span>(<span class=\"string\">'./tool'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    b()</span><br><span class=\"line\">    tool()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'全部文件都从一个入口打包'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">load()</span><br><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> tool = <span class=\"built_in\">require</span>(<span class=\"string\">'./tool'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    tool()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是bjs文件'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = b;</span><br><span class=\"line\"><span class=\"comment\">//tool.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tool</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是tooljs文件'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = tool;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">配置很简单:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);<span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./codesplitting/c1/a.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname,</span><br><span class=\"line\">        filename: <span class=\"string\">'/dist/index.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//*****</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接打包：可以看到文件大小有2047行,体积也变大了<br><img src=\"https://user-gold-cdn.xitu.io/2018/1/25/1612dd777e941ac1?w=1280&amp;h=402&amp;f=png&amp;s=119875\" alt=\"\">  </p>\n<p>目前只引入了react，并且业务代码几乎没有的情况下。大家可以猜到实际项目中的情况了。来让我们进行第一优化  </p>\n<h3 id=\"Entry-Points\"><a href=\"#Entry-Points\" class=\"headerlink\" title=\"Entry Points\"></a>Entry Points</h3><p>如果业务中的项目不是单页面应用，这一步可以忽略了，直接是多入口打包。这里是为了演示效果，强行分一个模块出来打包，假设我们的文件也很大，需要将b.js单独打个包出来:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index:<span class=\"string\">'./codesplitting/c1/a.js'</span>,</span><br><span class=\"line\">    other:<span class=\"string\">'./codesplitting/c1/b.js'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">&#125;，</span><br><span class=\"line\"><span class=\"comment\">//***</span></span><br></pre></td></tr></table></figure>\n<p>这里a.js也需要修改,去掉对b的引用。入口文件之间不能相互引用的。不然，问题就大了，到底以谁为主呢，这样就陷入了循环引用的问题。<br>此时的生成文件如下:<br><img src=\"https://user-gold-cdn.xitu.io/2018/1/25/1612dd77812b0d89?w=1170&amp;h=342&amp;f=png&amp;s=129329\" alt=\"\"><br>看来文件竟然只小了那么一点了吧？第一步的优化这里就完成了，显然你会认为我在开玩笑。<br>当然这只是万里长征第一步，看一下dist下的文件不难发现两个文件中都把react这个第三方库和tool.js这个可复用模块打进去了，显然这样重复打包有点没必要。<br>是不是可以把这些复用性强的模块拿出来单独打包呢？<br>这样浏览器第一次请求之后就会将该文件缓存起来，从服务端请求的只有体积缩小之后的业务文件了，这样的话加载速度显然会有所提升。<br>如果你也是这么想的，来一起继续看下去。</p>\n<h3 id=\"Prevent-Duplication\"><a href=\"#Prevent-Duplication\" class=\"headerlink\" title=\"Prevent Duplication\"></a>Prevent Duplication</h3><p>webpack去除重复引用是通过<a href=\"https://webpack.js.org/plugins/commons-chunk-plugin/\" target=\"_blank\" rel=\"noopener\">CommonsChunkPlugin</a>插件来实现的。该插件的配置项如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被抽离为公共文件的chunk名，例如common,可以是string或者数组</span></span><br><span class=\"line\">    <span class=\"comment\">//显然如果是单个的模块，就是name多个就是names</span></span><br><span class=\"line\">    name:string,</span><br><span class=\"line\">    names:[],</span><br><span class=\"line\">    <span class=\"comment\">//打包之后公共模块的名称模板</span></span><br><span class=\"line\">    <span class=\"comment\">//例如'[name].js'</span></span><br><span class=\"line\">    <span class=\"comment\">//如果省略，则和name名称一致</span></span><br><span class=\"line\">    filename:string,</span><br><span class=\"line\">     <span class=\"comment\">//模块被引的最小次数，也就是说至少有几个组件引用了该模块。</span></span><br><span class=\"line\">    <span class=\"comment\">//如果是Infinity，则表明单纯的创建，并不做任何事情</span></span><br><span class=\"line\">    minChunks:<span class=\"number\">2</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体在webpack中去重对于第三方库显示声明vendor，公共模块声明common的方式来处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">        index:<span class=\"string\">'./codesplitting/c1/a.js'</span>,</span><br><span class=\"line\">        other:<span class=\"string\">'./codesplitting/c1/b.js'</span>,</span><br><span class=\"line\">        <span class=\"comment\">//第三方库显示声明</span></span><br><span class=\"line\">        vendor:[<span class=\"string\">'react'</span>],</span><br><span class=\"line\">        <span class=\"comment\">//公共组件声明为common</span></span><br><span class=\"line\">        common:[<span class=\"string\">'./codesplitting/c1/tool'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//***</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            names:[<span class=\"string\">\"common\"</span>, <span class=\"string\">\"vendor\"</span>],</span><br><span class=\"line\">            filename: <span class=\"string\">\"[name].js\"</span></span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">    ]</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">打包结果如下：</span></span><br><span class=\"line\"><span class=\"string\">![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd7786a1c7a1?w=958&amp;h=266&amp;f=png&amp;s=95165)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">可以看到index和other两个业务包已经很小了，react被抽离到单独的包中。  </span></span><br><span class=\"line\"><span class=\"string\">这样还有一个问题，对于某些代码可能只有在特定条件下才执行，或者可能就不执行。  </span></span><br><span class=\"line\"><span class=\"string\">我不希望在首屏就去加载它，也就是我们常说的按需加载是要怎么做呢。一起看下去。  </span></span><br><span class=\"line\"><span class=\"string\">### Dynamic Imports  </span></span><br><span class=\"line\"><span class=\"string\">webpack建议如下两种方式使用动态加载。   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1)、ECMAScript中出于提案状态的import()   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2)、webpack 特定的 require.ensure   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">我们这里就是用第二种来看下效果(毕竟偷懒没用babel...),在ajs中动态引入di.js  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">    <span class=\"comment\">//虽然始终会加载,大家能明白就行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>.ensure([],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> di = <span class=\"built_in\">require</span>(<span class=\"string\">'./di'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//新增动态加载的js</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">di</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        tool()</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是动态引入的文件'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = di;</span><br></pre></td></tr></table></figure>\n<p>运行之后可以发现多了个2.2.js,打开可以发现就是我们新建的动态引入的di.js<br><img src=\"https://user-gold-cdn.xitu.io/2018/1/25/1612dd77c0c64a7d?w=1086&amp;h=266&amp;f=png&amp;s=94861\" alt=\"\"></p>\n<p>大家可能会问怎么确定就是动态引入的呢，虽然本示例只能看打包之后的例子(就不引入dev server了，毕竟是懒。。。)我们依然可以从代码里看到结果。<br>首先、查看index.js文件，可以看到下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> react = __webpack_require__(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> tool = __webpack_require__(<span class=\"number\">1</span>)  </span><br><span class=\"line\"><span class=\"comment\">/****省略8*****/</span></span><br><span class=\"line\">  <span class=\"comment\">//虽然始终会加载</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">     __webpack_require__.e<span class=\"comment\">/* nsure */</span>(<span class=\"number\">2</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> di = __webpack_require__(<span class=\"number\">13</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>与直接require的模块不同,require.ensure被转化为了 <strong>webpack_require</strong>.e方法，来继续看一下该方法有什么用。</p>\n<pre><code class=\"js\">   __webpack_require__.e = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requireEnsure</span>(<span class=\"params\">chunkId, callback</span>) </span>{\n    <span class=\"comment\">// \"0\" is the signal for \"already loaded\"</span>\n    <span class=\"keyword\">if</span>(installedChunks[chunkId] === <span class=\"number\">0</span>)\n        <span class=\"keyword\">return</span> callback.call(<span class=\"literal\">null</span>, __webpack_require__);\n\n    <span class=\"comment\">// an array means \"currently loading\".</span>\n    <span class=\"keyword\">if</span>(installedChunks[chunkId] !== <span class=\"literal\">undefined</span>) {\n        installedChunks[chunkId].push(callback);\n    } <span class=\"keyword\">else</span> {\n        <span class=\"comment\">// start chunk loading</span>\n        installedChunks[chunkId] = [callback];\n        <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];\n        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);\n        script.type = <span class=\"string\">'text/javascript'</span>;\n        script.charset = <span class=\"string\">'utf-8'</span>;\n        script.async = <span class=\"literal\">true</span>;\n\n        script.src = __webpack_require__.p + <span class=\"string\">\"\"</span> + chunkId + <span class=\"string\">\".\"</span> + ({<span class=\"string\">\"0\"</span>:<span class=\"string\">\"common\"</span>,<span class=\"string\">\"1\"</span>:<span class=\"string\">\"index\"</span>,<span class=\"string\">\"3\"</span>:<span class=\"string\">\"other\"</span>}[chunkId]||chunkId) + <span class=\"string\">\".js\"</span>;\n        head.appendChild(script);\n    }\n};\n</code></pre>\n<p>结合注释直接从源码中可以看出来，最后面的条件语句来创建script标签进而实现动态加载的。所谓动态加载本质还是要创建script标签来实现的。</p>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此代码分割部分的优化已经完成了，以上是个人关于代码分割的简单理解，抛砖引玉，共同学习进步。更多请移步<a href=\"https://github.com/xiaoxiangdaiyu/webpack_demo/tree/master/codesplitting\" target=\"_blank\" rel=\"noopener\">github查看</a></p>\n","site":{"data":{}},"excerpt":"<p>作为当前风头正盛的打包工具，webpack风靡前端界。确实作为引领了一个时代的打包工具，很多方面都带来了颠覆性的改进，让我们更加的感受到自动化的快感。不过最为大家诟病的一点就是用起来太难了。<br>","more":"<br>要想愉快的使用，要使用n多的配置项，究其原因在于文档的不够详细、本身默认集成的不足。<br>也不能说这是缺点吧，更多的主动权放给用户就意味着配置工作量的增加，这里就不过多探讨了。<br>当历尽千辛万苦，你的项目跑起来之后，可能会发现有一些不太美好的问题的出现，编译慢、打包文件大等。那么，我们还要花些时间来看看怎么优化相关配置了。 下面一起看下code splitting </p>\n<h2 id=\"code-splitting出现的背景\"><a href=\"#code-splitting出现的背景\" class=\"headerlink\" title=\"code splitting出现的背景\"></a>code splitting出现的背景</h2><p>对于前端资源来说，文件体积过大是很影响性能的一项。特别是对于移动端的设备而言简直是灾难。<br>此外对于某些只要特定环境下才需要的代码，一开始就加载进来显然也不那么合理，这就引出了按需加载的概念了。</p>\n<p>   为了解决这些情况，代码拆分就应运而生了。代码拆分故名思意就是将大的文件按不同粒度拆分，以满足解决生成文件体积过大、按需加载等需求。<br>   具体到webpack而言有下面几种方式来达到我们的目的。</p>\n<h2 id=\"webpack实现代码拆分的方式\"><a href=\"#webpack实现代码拆分的方式\" class=\"headerlink\" title=\"webpack实现代码拆分的方式\"></a>webpack实现代码拆分的方式</h2><p>webpack通过下面三种方式来达到以上目的</p>\n<ol>\n<li>Entry Points: 多入口分开打包</li>\n<li>Prevent Duplication:去重，抽离公共模块和第三方库</li>\n<li>Dynamic Imports:动态加载<br>这里不去扒文档上的定义了，我们从一个例子中来逐步体会他们不同的作用。</li>\n</ol>\n<p>假设我们有这么个项目，有下面几个文件<br><img src=\"https://user-gold-cdn.xitu.io/2018/1/25/1612dd777da3adc1?w=738&amp;h=254&amp;f=jpeg&amp;s=19970\" alt=\"\">  </p>\n<p>代码很简单(示例而已，直接用commonjs的语法来写了):  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> tool = <span class=\"built_in\">require</span>(<span class=\"string\">'./tool'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    b()</span><br><span class=\"line\">    tool()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'全部文件都从一个入口打包'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">load()</span><br><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> tool = <span class=\"built_in\">require</span>(<span class=\"string\">'./tool'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    tool()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是bjs文件'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = b;</span><br><span class=\"line\"><span class=\"comment\">//tool.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tool</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是tooljs文件'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = tool;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">配置很简单:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);<span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./codesplitting/c1/a.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname,</span><br><span class=\"line\">        filename: <span class=\"string\">'/dist/index.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//*****</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接打包：可以看到文件大小有2047行,体积也变大了<br><img src=\"https://user-gold-cdn.xitu.io/2018/1/25/1612dd777e941ac1?w=1280&amp;h=402&amp;f=png&amp;s=119875\" alt=\"\">  </p>\n<p>目前只引入了react，并且业务代码几乎没有的情况下。大家可以猜到实际项目中的情况了。来让我们进行第一优化  </p>\n<h3 id=\"Entry-Points\"><a href=\"#Entry-Points\" class=\"headerlink\" title=\"Entry Points\"></a>Entry Points</h3><p>如果业务中的项目不是单页面应用，这一步可以忽略了，直接是多入口打包。这里是为了演示效果，强行分一个模块出来打包，假设我们的文件也很大，需要将b.js单独打个包出来:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index:<span class=\"string\">'./codesplitting/c1/a.js'</span>,</span><br><span class=\"line\">    other:<span class=\"string\">'./codesplitting/c1/b.js'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">&#125;，</span><br><span class=\"line\"><span class=\"comment\">//***</span></span><br></pre></td></tr></table></figure>\n<p>这里a.js也需要修改,去掉对b的引用。入口文件之间不能相互引用的。不然，问题就大了，到底以谁为主呢，这样就陷入了循环引用的问题。<br>此时的生成文件如下:<br><img src=\"https://user-gold-cdn.xitu.io/2018/1/25/1612dd77812b0d89?w=1170&amp;h=342&amp;f=png&amp;s=129329\" alt=\"\"><br>看来文件竟然只小了那么一点了吧？第一步的优化这里就完成了，显然你会认为我在开玩笑。<br>当然这只是万里长征第一步，看一下dist下的文件不难发现两个文件中都把react这个第三方库和tool.js这个可复用模块打进去了，显然这样重复打包有点没必要。<br>是不是可以把这些复用性强的模块拿出来单独打包呢？<br>这样浏览器第一次请求之后就会将该文件缓存起来，从服务端请求的只有体积缩小之后的业务文件了，这样的话加载速度显然会有所提升。<br>如果你也是这么想的，来一起继续看下去。</p>\n<h3 id=\"Prevent-Duplication\"><a href=\"#Prevent-Duplication\" class=\"headerlink\" title=\"Prevent Duplication\"></a>Prevent Duplication</h3><p>webpack去除重复引用是通过<a href=\"https://webpack.js.org/plugins/commons-chunk-plugin/\" target=\"_blank\" rel=\"noopener\">CommonsChunkPlugin</a>插件来实现的。该插件的配置项如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被抽离为公共文件的chunk名，例如common,可以是string或者数组</span></span><br><span class=\"line\">    <span class=\"comment\">//显然如果是单个的模块，就是name多个就是names</span></span><br><span class=\"line\">    name:string,</span><br><span class=\"line\">    names:[],</span><br><span class=\"line\">    <span class=\"comment\">//打包之后公共模块的名称模板</span></span><br><span class=\"line\">    <span class=\"comment\">//例如'[name].js'</span></span><br><span class=\"line\">    <span class=\"comment\">//如果省略，则和name名称一致</span></span><br><span class=\"line\">    filename:string,</span><br><span class=\"line\">     <span class=\"comment\">//模块被引的最小次数，也就是说至少有几个组件引用了该模块。</span></span><br><span class=\"line\">    <span class=\"comment\">//如果是Infinity，则表明单纯的创建，并不做任何事情</span></span><br><span class=\"line\">    minChunks:<span class=\"number\">2</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体在webpack中去重对于第三方库显示声明vendor，公共模块声明common的方式来处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">        index:<span class=\"string\">'./codesplitting/c1/a.js'</span>,</span><br><span class=\"line\">        other:<span class=\"string\">'./codesplitting/c1/b.js'</span>,</span><br><span class=\"line\">        <span class=\"comment\">//第三方库显示声明</span></span><br><span class=\"line\">        vendor:[<span class=\"string\">'react'</span>],</span><br><span class=\"line\">        <span class=\"comment\">//公共组件声明为common</span></span><br><span class=\"line\">        common:[<span class=\"string\">'./codesplitting/c1/tool'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//***</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            names:[<span class=\"string\">\"common\"</span>, <span class=\"string\">\"vendor\"</span>],</span><br><span class=\"line\">            filename: <span class=\"string\">\"[name].js\"</span></span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">    ]</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">打包结果如下：</span></span><br><span class=\"line\"><span class=\"string\">![](https://user-gold-cdn.xitu.io/2018/1/25/1612dd7786a1c7a1?w=958&amp;h=266&amp;f=png&amp;s=95165)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">可以看到index和other两个业务包已经很小了，react被抽离到单独的包中。  </span></span><br><span class=\"line\"><span class=\"string\">这样还有一个问题，对于某些代码可能只有在特定条件下才执行，或者可能就不执行。  </span></span><br><span class=\"line\"><span class=\"string\">我不希望在首屏就去加载它，也就是我们常说的按需加载是要怎么做呢。一起看下去。  </span></span><br><span class=\"line\"><span class=\"string\">### Dynamic Imports  </span></span><br><span class=\"line\"><span class=\"string\">webpack建议如下两种方式使用动态加载。   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1)、ECMAScript中出于提案状态的import()   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2)、webpack 特定的 require.ensure   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">我们这里就是用第二种来看下效果(毕竟偷懒没用babel...),在ajs中动态引入di.js  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">    <span class=\"comment\">//虽然始终会加载,大家能明白就行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>.ensure([],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> di = <span class=\"built_in\">require</span>(<span class=\"string\">'./di'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//新增动态加载的js</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">di</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        tool()</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是动态引入的文件'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = di;</span><br></pre></td></tr></table></figure>\n<p>运行之后可以发现多了个2.2.js,打开可以发现就是我们新建的动态引入的di.js<br><img src=\"https://user-gold-cdn.xitu.io/2018/1/25/1612dd77c0c64a7d?w=1086&amp;h=266&amp;f=png&amp;s=94861\" alt=\"\"></p>\n<p>大家可能会问怎么确定就是动态引入的呢，虽然本示例只能看打包之后的例子(就不引入dev server了，毕竟是懒。。。)我们依然可以从代码里看到结果。<br>首先、查看index.js文件，可以看到下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> react = __webpack_require__(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> tool = __webpack_require__(<span class=\"number\">1</span>)  </span><br><span class=\"line\"><span class=\"comment\">/****省略8*****/</span></span><br><span class=\"line\">  <span class=\"comment\">//虽然始终会加载</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">     __webpack_require__.e<span class=\"comment\">/* nsure */</span>(<span class=\"number\">2</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> di = __webpack_require__(<span class=\"number\">13</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>与直接require的模块不同,require.ensure被转化为了 <strong>webpack_require</strong>.e方法，来继续看一下该方法有什么用。</p>\n<pre><code class=\"js\">   __webpack_require__.e = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requireEnsure</span>(<span class=\"params\">chunkId, callback</span>) </span>{\n    <span class=\"comment\">// \"0\" is the signal for \"already loaded\"</span>\n    <span class=\"keyword\">if</span>(installedChunks[chunkId] === <span class=\"number\">0</span>)\n        <span class=\"keyword\">return</span> callback.call(<span class=\"literal\">null</span>, __webpack_require__);\n\n    <span class=\"comment\">// an array means \"currently loading\".</span>\n    <span class=\"keyword\">if</span>(installedChunks[chunkId] !== <span class=\"literal\">undefined</span>) {\n        installedChunks[chunkId].push(callback);\n    } <span class=\"keyword\">else</span> {\n        <span class=\"comment\">// start chunk loading</span>\n        installedChunks[chunkId] = [callback];\n        <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];\n        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);\n        script.type = <span class=\"string\">'text/javascript'</span>;\n        script.charset = <span class=\"string\">'utf-8'</span>;\n        script.async = <span class=\"literal\">true</span>;\n\n        script.src = __webpack_require__.p + <span class=\"string\">\"\"</span> + chunkId + <span class=\"string\">\".\"</span> + ({<span class=\"string\">\"0\"</span>:<span class=\"string\">\"common\"</span>,<span class=\"string\">\"1\"</span>:<span class=\"string\">\"index\"</span>,<span class=\"string\">\"3\"</span>:<span class=\"string\">\"other\"</span>}[chunkId]||chunkId) + <span class=\"string\">\".js\"</span>;\n        head.appendChild(script);\n    }\n};\n</code></pre>\n<p>结合注释直接从源码中可以看出来，最后面的条件语句来创建script标签进而实现动态加载的。所谓动态加载本质还是要创建script标签来实现的。</p>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此代码分割部分的优化已经完成了，以上是个人关于代码分割的简单理解，抛砖引玉，共同学习进步。更多请移步<a href=\"https://github.com/xiaoxiangdaiyu/webpack_demo/tree/master/codesplitting\" target=\"_blank\" rel=\"noopener\">github查看</a></p>"},{"title":"如何开发webpack plugin","date":"2017-10-22T16:00:00.000Z","_content":"继上回介绍了[如何开发webpack loader](https://github.com/xiaoxiangdaiyu/w-loader/blob/master/loader/DOC.md) 之后。趁热打铁，来继续看下webpack另一个核心组成：plugin。  \n下面也和loader一样，让我们一起从基本的[官方文档](https://webpack.js.org/contribute/writing-a-plugin/)着手看起。  \n<!-- more -->\n## loader和plugin的差别   \n\n*  loader : 顾名思义，某种类型资源文件的加载器，作用于某种类型的文件上。webpack本身也是不能直接打包这些非js文件的，需要一个转化器即loader。 loader本身是单一，简单的，不能将多个功能放在一个loader里。   \n*  plugin比loaders更加先进一点，你可以扩展webpack的功能来满足自己的需要，换句话说，loader不能满足的时候，就需要plugin了。\n   \n\n## 如何开发一个plugin  \n\n插件将webpack引擎所有的能力暴露给第三方开发者。通过阶梯式的build回调，开发者可以在webpack编译过程中加入自己的行为。开发插件比loaders更加先进一点，因为你需要理解webpack一些底层构成来添加钩子回调。准备好读一些源码吧。       \n\n## 开发一个插件   \n\n一个webpack的插件由以下几方面组成：  \n* 一个非匿名的js函数   \n* 在它的原型对象上定义apply方法  \n* 指明挂载自身的webpack钩子事件  \n* 操作webpack内部情况的特定数据  \n* 方法完成时唤起webpack提供的回调\n```js\n// A named JavaScript function.\nfunction MyExampleWebpackPlugin() {\n   //\n};\n// Defines `apply` method in it's prototype.\nMyExampleWebpackPlugin.prototype.apply = function(compiler) {\n  // Specifies webpack's event hook to attach itself.\n  compiler.plugin('webpacksEventHook', function(compilation /* Manipulates webpack internal instance specific data. */, callback) {\n    console.log(\"This is an example plugin!!!\");\n    // Invokes webpack provided callback after functionality is complete.\n    callback();\n  });\n};    \n```\n## 编译器和编译     \n\n开发插件过程中最重要的两个对象就是compiler 和compilation。理解他们的职责是扩展webpack功能最重要的第一步   \n\n编译器对象就是webpack完整的配置环境。该对象一经webpack开始执行就创建，并且通过所有可操作的设置项来设置，例如options，loaders，和plugins。当在webpack环境中应用一个插件时，该插件将会接受到一个指向该编译器的引用。使用该编译器来访问主要的webpack环境。\n\ncompilation对象是一个单独的关于版本资源的创建。当执行webpack 开发中间件时，当一个文件的更改被检测到就会创建一个新的compilation对象，因此产生了一些可被编译的资源。一个compilation展现了一些信息关于当前模块资源状态、编译资源、改变的文件、监视的依赖等信息。同样提供了很多关键的回调，当插件扩展自定义行为时   \n\n这两个组件是webpack 插件必需的组成部分(特别是compilation)，所以开发者如果熟悉下面这些源文件将会获益不小。   \n* [Compiler Source](https://github.com/webpack/webpack/blob/master/lib/Compiler.js)  \n* [Compilation Source](https://github.com/webpack/webpack/blob/master/lib/Compilation.js)   \n\n## 插件的基本结构   \n\n插件是在原型中带有一个apply方法的实例化对象，当安装插件的时候，这个apply方法就会被webpack调用一次。apply方法提供一个指向当前活动的webpack compiler的引用，该引用允许访问compiler的回调。一个简单的插件结构如下：  \n \n```js\nfunction HelloWorldPlugin(options) {\n  // Setup the plugin instance with options...\n}\n\nHelloWorldPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('done', function() {\n    console.log('Hello World!');\n  });\n};\n\nmodule.exports = HelloWorldPlugin;   \n```\n然后安装一个插件，仅仅需要在你的 webpack config 中plugins对应的数组中，增加一个插件的实例即可   \n\n```js\nvar HelloWorldPlugin = require('hello-world');\n\nvar webpackConfig = {\n  // ... config settings here ...\n  plugins: [\n    new HelloWorldPlugin({options: true})\n  ]\n};\n```\n## 访问编译    \n\n通过使用编译器对象，你可能会绑定提供指向每个新的compilation应用的回调。这些compilations提供了编译过程中很多步骤的回调函数。   \n\n```js\nfunction HelloCompilationPlugin(options) {}\n\nHelloCompilationPlugin.prototype.apply = function(compiler) {\n\n  // Setup callback for accessing a compilation:\n  compiler.plugin(\"compilation\", function(compilation) {\n\n    // Now setup callbacks for accessing compilation steps:\n    compilation.plugin(\"optimize\", function() {\n      console.log(\"Assets are being optimized.\");\n    });\n  });\n};\n\nmodule.exports = HelloCompilationPlugin;\n```\n如果想了解更多关于在编译器、编译中哪些回调是可用的和其他一些更重要的对象，轻戳[plugin文档](https://doc.webpack-china.org/api/plugins/) \n\n## 异步插件    \n\n一些编译插件步骤是异步的并且提供了一个当你的插件结束编译时必须调用的回调方法\n\n```js\nfunction HelloAsyncPlugin(options) {}\n\nHelloAsyncPlugin.prototype.apply = function(compiler) {\n  compiler.plugin(\"emit\", function(compilation, callback) {\n\n    // Do something async...\n    setTimeout(function() {\n      console.log(\"Done with async work...\");\n      callback();\n    }, 1000);\n\n  });\n};\n\nmodule.exports = HelloAsyncPlugin;\n```\n## 示例  \n\n一旦我们打开了webpack编译器和每个单独编译的大门，我们可以使用引擎做的事情是无限可能的。我们可以重新格式化存在的文件、创建派生文件、完全伪造一个新文件  \n\n让我们写个简单的示例插件，目的是生成一个新的名字为filelist.md的文件。内容如下：列出构建过程中所有的生成文件。这个插件大概如下：\n \n```js\nfunction FileListPlugin(options) {}\n\nFileListPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('emit', function(compilation, callback) {\n    // Create a header string for the generated file:\n    var filelist = 'In this build:\\n\\n';\n\n    // Loop through all compiled assets,\n    // adding a new line item for each filename.\n    for (var filename in compilation.assets) {\n      filelist += ('- '+ filename +'\\n');\n    }\n\n    // Insert this list into the webpack build as a new file asset:\n    compilation.assets['filelist.md'] = {\n      source: function() {\n        return filelist;\n      },\n      size: function() {\n        return filelist.length;\n      }\n    };\n\n    callback();\n  });\n};\n\nmodule.exports = FileListPlugin;\n```\n## 不同类型的插件   \n\n插件可以依据其注册的事件来分成不同的类型，每个事件钩子决定了在触发时如何调用该插件。  \n\n#### 同步类型 \n\n这种类型的实例使用如下方式来调用插件  \n```js\napplyPlugins(name: string, args: any...)\n\napplyPluginsBailResult(name: string, args: any...)  \n```\n这意味着每一个插件的回调将伴随特定参数args依次被调用。对插件而言这是最简单的格式。很多有用的事件例如\"compile\", \"this-compilation\"，是期望插件同步执行的。  \n\n#### 流式类型 \n\nwaterfall Plugins 通过下面的方式调用  \n```js\napplyPluginsWaterfall(name: string, init: any, args: any...)\n```\n#### 异步类型   \n\n当所有的插件被使用下面的方法异步调用的时候，即为异步插件\n```js\napplyPluginsAsync(name: string, args: any..., callback: (err?: Error) -> void)\n```\n插件控制方法被调用，参数是所有的args和带有这种标志(err?: Error) -> void的回调。handler方法按照注册回调在所有handlers被调用之后的顺序来调用。对于\"emit\", \"run\"事件来说这是很常用的模式。\n\n#### 异步流    \n\n这种插件将按照流失方式来被异步使用  \n\n```js\napplyPluginsAsyncWaterfall(name: string, init: any, callback: (err: Error, result: any) -> void)\n```\n这种插件的handler被调用时，参数是当前value和带有这种标志(err?: Error) -> void的回调。当被调用时，nextValue是下一个handler的当前值。第一个handler的当前值是init。所有的handler被调用之后，最后一个值将会被赋给回调。如果有的handler传递了一个err的值，回调将会接受err，并且不会有其他handler被第阿勇。这种插件模式使用与于\"before-resolve\" and \"after-resolve\"之类的事件。   \n\n#### 异步系列  \n\n这种和异步插件很相似，不同在于如果有点插件注册失败，将不会调用任何插件   \n```js\napplyPluginsAsyncSeries(name: string, args: any..., callback: (err: Error, result: any) -> void)\n```\n#### 结束语   \n至此，如何开发一个基本的webpack plugin 我相信大家已经知道了，如果还不太清楚的话，可以移步[w-loader](https://github.com/xiaoxiangdaiyu/w-loader)查看。   \n另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   ","source":"_posts/webpack/plugin.md","raw":"---\ntitle: 如何开发webpack plugin\ndate: 2017-10-23\n---\n继上回介绍了[如何开发webpack loader](https://github.com/xiaoxiangdaiyu/w-loader/blob/master/loader/DOC.md) 之后。趁热打铁，来继续看下webpack另一个核心组成：plugin。  \n下面也和loader一样，让我们一起从基本的[官方文档](https://webpack.js.org/contribute/writing-a-plugin/)着手看起。  \n<!-- more -->\n## loader和plugin的差别   \n\n*  loader : 顾名思义，某种类型资源文件的加载器，作用于某种类型的文件上。webpack本身也是不能直接打包这些非js文件的，需要一个转化器即loader。 loader本身是单一，简单的，不能将多个功能放在一个loader里。   \n*  plugin比loaders更加先进一点，你可以扩展webpack的功能来满足自己的需要，换句话说，loader不能满足的时候，就需要plugin了。\n   \n\n## 如何开发一个plugin  \n\n插件将webpack引擎所有的能力暴露给第三方开发者。通过阶梯式的build回调，开发者可以在webpack编译过程中加入自己的行为。开发插件比loaders更加先进一点，因为你需要理解webpack一些底层构成来添加钩子回调。准备好读一些源码吧。       \n\n## 开发一个插件   \n\n一个webpack的插件由以下几方面组成：  \n* 一个非匿名的js函数   \n* 在它的原型对象上定义apply方法  \n* 指明挂载自身的webpack钩子事件  \n* 操作webpack内部情况的特定数据  \n* 方法完成时唤起webpack提供的回调\n```js\n// A named JavaScript function.\nfunction MyExampleWebpackPlugin() {\n   //\n};\n// Defines `apply` method in it's prototype.\nMyExampleWebpackPlugin.prototype.apply = function(compiler) {\n  // Specifies webpack's event hook to attach itself.\n  compiler.plugin('webpacksEventHook', function(compilation /* Manipulates webpack internal instance specific data. */, callback) {\n    console.log(\"This is an example plugin!!!\");\n    // Invokes webpack provided callback after functionality is complete.\n    callback();\n  });\n};    \n```\n## 编译器和编译     \n\n开发插件过程中最重要的两个对象就是compiler 和compilation。理解他们的职责是扩展webpack功能最重要的第一步   \n\n编译器对象就是webpack完整的配置环境。该对象一经webpack开始执行就创建，并且通过所有可操作的设置项来设置，例如options，loaders，和plugins。当在webpack环境中应用一个插件时，该插件将会接受到一个指向该编译器的引用。使用该编译器来访问主要的webpack环境。\n\ncompilation对象是一个单独的关于版本资源的创建。当执行webpack 开发中间件时，当一个文件的更改被检测到就会创建一个新的compilation对象，因此产生了一些可被编译的资源。一个compilation展现了一些信息关于当前模块资源状态、编译资源、改变的文件、监视的依赖等信息。同样提供了很多关键的回调，当插件扩展自定义行为时   \n\n这两个组件是webpack 插件必需的组成部分(特别是compilation)，所以开发者如果熟悉下面这些源文件将会获益不小。   \n* [Compiler Source](https://github.com/webpack/webpack/blob/master/lib/Compiler.js)  \n* [Compilation Source](https://github.com/webpack/webpack/blob/master/lib/Compilation.js)   \n\n## 插件的基本结构   \n\n插件是在原型中带有一个apply方法的实例化对象，当安装插件的时候，这个apply方法就会被webpack调用一次。apply方法提供一个指向当前活动的webpack compiler的引用，该引用允许访问compiler的回调。一个简单的插件结构如下：  \n \n```js\nfunction HelloWorldPlugin(options) {\n  // Setup the plugin instance with options...\n}\n\nHelloWorldPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('done', function() {\n    console.log('Hello World!');\n  });\n};\n\nmodule.exports = HelloWorldPlugin;   \n```\n然后安装一个插件，仅仅需要在你的 webpack config 中plugins对应的数组中，增加一个插件的实例即可   \n\n```js\nvar HelloWorldPlugin = require('hello-world');\n\nvar webpackConfig = {\n  // ... config settings here ...\n  plugins: [\n    new HelloWorldPlugin({options: true})\n  ]\n};\n```\n## 访问编译    \n\n通过使用编译器对象，你可能会绑定提供指向每个新的compilation应用的回调。这些compilations提供了编译过程中很多步骤的回调函数。   \n\n```js\nfunction HelloCompilationPlugin(options) {}\n\nHelloCompilationPlugin.prototype.apply = function(compiler) {\n\n  // Setup callback for accessing a compilation:\n  compiler.plugin(\"compilation\", function(compilation) {\n\n    // Now setup callbacks for accessing compilation steps:\n    compilation.plugin(\"optimize\", function() {\n      console.log(\"Assets are being optimized.\");\n    });\n  });\n};\n\nmodule.exports = HelloCompilationPlugin;\n```\n如果想了解更多关于在编译器、编译中哪些回调是可用的和其他一些更重要的对象，轻戳[plugin文档](https://doc.webpack-china.org/api/plugins/) \n\n## 异步插件    \n\n一些编译插件步骤是异步的并且提供了一个当你的插件结束编译时必须调用的回调方法\n\n```js\nfunction HelloAsyncPlugin(options) {}\n\nHelloAsyncPlugin.prototype.apply = function(compiler) {\n  compiler.plugin(\"emit\", function(compilation, callback) {\n\n    // Do something async...\n    setTimeout(function() {\n      console.log(\"Done with async work...\");\n      callback();\n    }, 1000);\n\n  });\n};\n\nmodule.exports = HelloAsyncPlugin;\n```\n## 示例  \n\n一旦我们打开了webpack编译器和每个单独编译的大门，我们可以使用引擎做的事情是无限可能的。我们可以重新格式化存在的文件、创建派生文件、完全伪造一个新文件  \n\n让我们写个简单的示例插件，目的是生成一个新的名字为filelist.md的文件。内容如下：列出构建过程中所有的生成文件。这个插件大概如下：\n \n```js\nfunction FileListPlugin(options) {}\n\nFileListPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('emit', function(compilation, callback) {\n    // Create a header string for the generated file:\n    var filelist = 'In this build:\\n\\n';\n\n    // Loop through all compiled assets,\n    // adding a new line item for each filename.\n    for (var filename in compilation.assets) {\n      filelist += ('- '+ filename +'\\n');\n    }\n\n    // Insert this list into the webpack build as a new file asset:\n    compilation.assets['filelist.md'] = {\n      source: function() {\n        return filelist;\n      },\n      size: function() {\n        return filelist.length;\n      }\n    };\n\n    callback();\n  });\n};\n\nmodule.exports = FileListPlugin;\n```\n## 不同类型的插件   \n\n插件可以依据其注册的事件来分成不同的类型，每个事件钩子决定了在触发时如何调用该插件。  \n\n#### 同步类型 \n\n这种类型的实例使用如下方式来调用插件  \n```js\napplyPlugins(name: string, args: any...)\n\napplyPluginsBailResult(name: string, args: any...)  \n```\n这意味着每一个插件的回调将伴随特定参数args依次被调用。对插件而言这是最简单的格式。很多有用的事件例如\"compile\", \"this-compilation\"，是期望插件同步执行的。  \n\n#### 流式类型 \n\nwaterfall Plugins 通过下面的方式调用  \n```js\napplyPluginsWaterfall(name: string, init: any, args: any...)\n```\n#### 异步类型   \n\n当所有的插件被使用下面的方法异步调用的时候，即为异步插件\n```js\napplyPluginsAsync(name: string, args: any..., callback: (err?: Error) -> void)\n```\n插件控制方法被调用，参数是所有的args和带有这种标志(err?: Error) -> void的回调。handler方法按照注册回调在所有handlers被调用之后的顺序来调用。对于\"emit\", \"run\"事件来说这是很常用的模式。\n\n#### 异步流    \n\n这种插件将按照流失方式来被异步使用  \n\n```js\napplyPluginsAsyncWaterfall(name: string, init: any, callback: (err: Error, result: any) -> void)\n```\n这种插件的handler被调用时，参数是当前value和带有这种标志(err?: Error) -> void的回调。当被调用时，nextValue是下一个handler的当前值。第一个handler的当前值是init。所有的handler被调用之后，最后一个值将会被赋给回调。如果有的handler传递了一个err的值，回调将会接受err，并且不会有其他handler被第阿勇。这种插件模式使用与于\"before-resolve\" and \"after-resolve\"之类的事件。   \n\n#### 异步系列  \n\n这种和异步插件很相似，不同在于如果有点插件注册失败，将不会调用任何插件   \n```js\napplyPluginsAsyncSeries(name: string, args: any..., callback: (err: Error, result: any) -> void)\n```\n#### 结束语   \n至此，如何开发一个基本的webpack plugin 我相信大家已经知道了，如果还不太清楚的话，可以移步[w-loader](https://github.com/xiaoxiangdaiyu/w-loader)查看。   \n另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   ","slug":"webpack/plugin","published":1,"updated":"2017-12-15T13:05:18.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7do0000enl92htk29nko","content":"<p>继上回介绍了<a href=\"https://github.com/xiaoxiangdaiyu/w-loader/blob/master/loader/DOC.md\" target=\"_blank\" rel=\"noopener\">如何开发webpack loader</a> 之后。趁热打铁，来继续看下webpack另一个核心组成：plugin。<br>下面也和loader一样，让我们一起从基本的<a href=\"https://webpack.js.org/contribute/writing-a-plugin/\" target=\"_blank\" rel=\"noopener\">官方文档</a>着手看起。<br><a id=\"more\"></a></p>\n<h2 id=\"loader和plugin的差别\"><a href=\"#loader和plugin的差别\" class=\"headerlink\" title=\"loader和plugin的差别\"></a>loader和plugin的差别</h2><ul>\n<li>loader : 顾名思义，某种类型资源文件的加载器，作用于某种类型的文件上。webpack本身也是不能直接打包这些非js文件的，需要一个转化器即loader。 loader本身是单一，简单的，不能将多个功能放在一个loader里。   </li>\n<li>plugin比loaders更加先进一点，你可以扩展webpack的功能来满足自己的需要，换句话说，loader不能满足的时候，就需要plugin了。</li>\n</ul>\n<h2 id=\"如何开发一个plugin\"><a href=\"#如何开发一个plugin\" class=\"headerlink\" title=\"如何开发一个plugin\"></a>如何开发一个plugin</h2><p>插件将webpack引擎所有的能力暴露给第三方开发者。通过阶梯式的build回调，开发者可以在webpack编译过程中加入自己的行为。开发插件比loaders更加先进一点，因为你需要理解webpack一些底层构成来添加钩子回调。准备好读一些源码吧。       </p>\n<h2 id=\"开发一个插件\"><a href=\"#开发一个插件\" class=\"headerlink\" title=\"开发一个插件\"></a>开发一个插件</h2><p>一个webpack的插件由以下几方面组成：  </p>\n<ul>\n<li>一个非匿名的js函数   </li>\n<li>在它的原型对象上定义apply方法  </li>\n<li>指明挂载自身的webpack钩子事件  </li>\n<li>操作webpack内部情况的特定数据  </li>\n<li>方法完成时唤起webpack提供的回调<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A named JavaScript function.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyExampleWebpackPlugin</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Defines `apply` method in it's prototype.</span></span><br><span class=\"line\">MyExampleWebpackPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Specifies webpack's event hook to attach itself.</span></span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'webpacksEventHook'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation <span class=\"regexp\">/* Manipulates webpack internal instance specific data. */</span>, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is an example plugin!!!\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Invokes webpack provided callback after functionality is complete.</span></span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"编译器和编译\"><a href=\"#编译器和编译\" class=\"headerlink\" title=\"编译器和编译\"></a>编译器和编译</h2><p>开发插件过程中最重要的两个对象就是compiler 和compilation。理解他们的职责是扩展webpack功能最重要的第一步   </p>\n<p>编译器对象就是webpack完整的配置环境。该对象一经webpack开始执行就创建，并且通过所有可操作的设置项来设置，例如options，loaders，和plugins。当在webpack环境中应用一个插件时，该插件将会接受到一个指向该编译器的引用。使用该编译器来访问主要的webpack环境。</p>\n<p>compilation对象是一个单独的关于版本资源的创建。当执行webpack 开发中间件时，当一个文件的更改被检测到就会创建一个新的compilation对象，因此产生了一些可被编译的资源。一个compilation展现了一些信息关于当前模块资源状态、编译资源、改变的文件、监视的依赖等信息。同样提供了很多关键的回调，当插件扩展自定义行为时   </p>\n<p>这两个组件是webpack 插件必需的组成部分(特别是compilation)，所以开发者如果熟悉下面这些源文件将会获益不小。   </p>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/blob/master/lib/Compiler.js\" target=\"_blank\" rel=\"noopener\">Compiler Source</a>  </li>\n<li><a href=\"https://github.com/webpack/webpack/blob/master/lib/Compilation.js\" target=\"_blank\" rel=\"noopener\">Compilation Source</a>   </li>\n</ul>\n<h2 id=\"插件的基本结构\"><a href=\"#插件的基本结构\" class=\"headerlink\" title=\"插件的基本结构\"></a>插件的基本结构</h2><p>插件是在原型中带有一个apply方法的实例化对象，当安装插件的时候，这个apply方法就会被webpack调用一次。apply方法提供一个指向当前活动的webpack compiler的引用，该引用允许访问compiler的回调。一个简单的插件结构如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloWorldPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Setup the plugin instance with options...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloWorldPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloWorldPlugin;</span><br></pre></td></tr></table></figure>\n<p>然后安装一个插件，仅仅需要在你的 webpack config 中plugins对应的数组中，增加一个插件的实例即可   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloWorldPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'hello-world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... config settings here ...</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HelloWorldPlugin(&#123;<span class=\"attr\">options</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问编译\"><a href=\"#访问编译\" class=\"headerlink\" title=\"访问编译\"></a>访问编译</h2><p>通过使用编译器对象，你可能会绑定提供指向每个新的compilation应用的回调。这些compilations提供了编译过程中很多步骤的回调函数。   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloCompilationPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloCompilationPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Setup callback for accessing a compilation:</span></span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">\"compilation\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Now setup callbacks for accessing compilation steps:</span></span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">\"optimize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Assets are being optimized.\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloCompilationPlugin;</span><br></pre></td></tr></table></figure>\n<p>如果想了解更多关于在编译器、编译中哪些回调是可用的和其他一些更重要的对象，轻戳<a href=\"https://doc.webpack-china.org/api/plugins/\" target=\"_blank\" rel=\"noopener\">plugin文档</a> </p>\n<h2 id=\"异步插件\"><a href=\"#异步插件\" class=\"headerlink\" title=\"异步插件\"></a>异步插件</h2><p>一些编译插件步骤是异步的并且提供了一个当你的插件结束编译时必须调用的回调方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloAsyncPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloAsyncPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">\"emit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something async...</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Done with async work...\"</span>);</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloAsyncPlugin;</span><br></pre></td></tr></table></figure>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>一旦我们打开了webpack编译器和每个单独编译的大门，我们可以使用引擎做的事情是无限可能的。我们可以重新格式化存在的文件、创建派生文件、完全伪造一个新文件  </p>\n<p>让我们写个简单的示例插件，目的是生成一个新的名字为filelist.md的文件。内容如下：列出构建过程中所有的生成文件。这个插件大概如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FileListPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FileListPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'emit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a header string for the generated file:</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> filelist = <span class=\"string\">'In this build:\\n\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Loop through all compiled assets,</span></span><br><span class=\"line\">    <span class=\"comment\">// adding a new line item for each filename.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> filename <span class=\"keyword\">in</span> compilation.assets) &#123;</span><br><span class=\"line\">      filelist += (<span class=\"string\">'- '</span>+ filename +<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Insert this list into the webpack build as a new file asset:</span></span><br><span class=\"line\">    compilation.assets[<span class=\"string\">'filelist.md'</span>] = &#123;</span><br><span class=\"line\">      source: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filelist;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filelist.length;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = FileListPlugin;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不同类型的插件\"><a href=\"#不同类型的插件\" class=\"headerlink\" title=\"不同类型的插件\"></a>不同类型的插件</h2><p>插件可以依据其注册的事件来分成不同的类型，每个事件钩子决定了在触发时如何调用该插件。  </p>\n<h4 id=\"同步类型\"><a href=\"#同步类型\" class=\"headerlink\" title=\"同步类型\"></a>同步类型</h4><p>这种类型的实例使用如下方式来调用插件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPlugins(name: string, <span class=\"attr\">args</span>: any...)</span><br><span class=\"line\"></span><br><span class=\"line\">applyPluginsBailResult(name: string, <span class=\"attr\">args</span>: any...)</span><br></pre></td></tr></table></figure></p>\n<p>这意味着每一个插件的回调将伴随特定参数args依次被调用。对插件而言这是最简单的格式。很多有用的事件例如”compile”, “this-compilation”，是期望插件同步执行的。  </p>\n<h4 id=\"流式类型\"><a href=\"#流式类型\" class=\"headerlink\" title=\"流式类型\"></a>流式类型</h4><p>waterfall Plugins 通过下面的方式调用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPluginsWaterfall(name: string, <span class=\"attr\">init</span>: any, <span class=\"attr\">args</span>: any...)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"异步类型\"><a href=\"#异步类型\" class=\"headerlink\" title=\"异步类型\"></a>异步类型</h4><p>当所有的插件被使用下面的方法异步调用的时候，即为异步插件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPluginsAsync(name: string, <span class=\"attr\">args</span>: any..., <span class=\"attr\">callback</span>: (err?: <span class=\"built_in\">Error</span>) -&gt; <span class=\"keyword\">void</span>)</span><br></pre></td></tr></table></figure></p>\n<p>插件控制方法被调用，参数是所有的args和带有这种标志(err?: Error) -&gt; void的回调。handler方法按照注册回调在所有handlers被调用之后的顺序来调用。对于”emit”, “run”事件来说这是很常用的模式。</p>\n<h4 id=\"异步流\"><a href=\"#异步流\" class=\"headerlink\" title=\"异步流\"></a>异步流</h4><p>这种插件将按照流失方式来被异步使用  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPluginsAsyncWaterfall(name: string, <span class=\"attr\">init</span>: any, <span class=\"attr\">callback</span>: (err: <span class=\"built_in\">Error</span>, <span class=\"attr\">result</span>: any) -&gt; <span class=\"keyword\">void</span>)</span><br></pre></td></tr></table></figure>\n<p>这种插件的handler被调用时，参数是当前value和带有这种标志(err?: Error) -&gt; void的回调。当被调用时，nextValue是下一个handler的当前值。第一个handler的当前值是init。所有的handler被调用之后，最后一个值将会被赋给回调。如果有的handler传递了一个err的值，回调将会接受err，并且不会有其他handler被第阿勇。这种插件模式使用与于”before-resolve” and “after-resolve”之类的事件。   </p>\n<h4 id=\"异步系列\"><a href=\"#异步系列\" class=\"headerlink\" title=\"异步系列\"></a>异步系列</h4><p>这种和异步插件很相似，不同在于如果有点插件注册失败，将不会调用任何插件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPluginsAsyncSeries(name: string, <span class=\"attr\">args</span>: any..., <span class=\"attr\">callback</span>: (err: <span class=\"built_in\">Error</span>, <span class=\"attr\">result</span>: any) -&gt; <span class=\"keyword\">void</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此，如何开发一个基本的webpack plugin 我相信大家已经知道了，如果还不太清楚的话，可以移步<a href=\"https://github.com/xiaoxiangdaiyu/w-loader\" target=\"_blank\" rel=\"noopener\">w-loader</a>查看。<br>另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   </p>\n","site":{"data":{}},"excerpt":"<p>继上回介绍了<a href=\"https://github.com/xiaoxiangdaiyu/w-loader/blob/master/loader/DOC.md\" target=\"_blank\" rel=\"noopener\">如何开发webpack loader</a> 之后。趁热打铁，来继续看下webpack另一个核心组成：plugin。<br>下面也和loader一样，让我们一起从基本的<a href=\"https://webpack.js.org/contribute/writing-a-plugin/\" target=\"_blank\" rel=\"noopener\">官方文档</a>着手看起。<br>","more":"</p>\n<h2 id=\"loader和plugin的差别\"><a href=\"#loader和plugin的差别\" class=\"headerlink\" title=\"loader和plugin的差别\"></a>loader和plugin的差别</h2><ul>\n<li>loader : 顾名思义，某种类型资源文件的加载器，作用于某种类型的文件上。webpack本身也是不能直接打包这些非js文件的，需要一个转化器即loader。 loader本身是单一，简单的，不能将多个功能放在一个loader里。   </li>\n<li>plugin比loaders更加先进一点，你可以扩展webpack的功能来满足自己的需要，换句话说，loader不能满足的时候，就需要plugin了。</li>\n</ul>\n<h2 id=\"如何开发一个plugin\"><a href=\"#如何开发一个plugin\" class=\"headerlink\" title=\"如何开发一个plugin\"></a>如何开发一个plugin</h2><p>插件将webpack引擎所有的能力暴露给第三方开发者。通过阶梯式的build回调，开发者可以在webpack编译过程中加入自己的行为。开发插件比loaders更加先进一点，因为你需要理解webpack一些底层构成来添加钩子回调。准备好读一些源码吧。       </p>\n<h2 id=\"开发一个插件\"><a href=\"#开发一个插件\" class=\"headerlink\" title=\"开发一个插件\"></a>开发一个插件</h2><p>一个webpack的插件由以下几方面组成：  </p>\n<ul>\n<li>一个非匿名的js函数   </li>\n<li>在它的原型对象上定义apply方法  </li>\n<li>指明挂载自身的webpack钩子事件  </li>\n<li>操作webpack内部情况的特定数据  </li>\n<li>方法完成时唤起webpack提供的回调<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A named JavaScript function.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyExampleWebpackPlugin</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Defines `apply` method in it's prototype.</span></span><br><span class=\"line\">MyExampleWebpackPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Specifies webpack's event hook to attach itself.</span></span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'webpacksEventHook'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation <span class=\"regexp\">/* Manipulates webpack internal instance specific data. */</span>, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is an example plugin!!!\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Invokes webpack provided callback after functionality is complete.</span></span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"编译器和编译\"><a href=\"#编译器和编译\" class=\"headerlink\" title=\"编译器和编译\"></a>编译器和编译</h2><p>开发插件过程中最重要的两个对象就是compiler 和compilation。理解他们的职责是扩展webpack功能最重要的第一步   </p>\n<p>编译器对象就是webpack完整的配置环境。该对象一经webpack开始执行就创建，并且通过所有可操作的设置项来设置，例如options，loaders，和plugins。当在webpack环境中应用一个插件时，该插件将会接受到一个指向该编译器的引用。使用该编译器来访问主要的webpack环境。</p>\n<p>compilation对象是一个单独的关于版本资源的创建。当执行webpack 开发中间件时，当一个文件的更改被检测到就会创建一个新的compilation对象，因此产生了一些可被编译的资源。一个compilation展现了一些信息关于当前模块资源状态、编译资源、改变的文件、监视的依赖等信息。同样提供了很多关键的回调，当插件扩展自定义行为时   </p>\n<p>这两个组件是webpack 插件必需的组成部分(特别是compilation)，所以开发者如果熟悉下面这些源文件将会获益不小。   </p>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/blob/master/lib/Compiler.js\" target=\"_blank\" rel=\"noopener\">Compiler Source</a>  </li>\n<li><a href=\"https://github.com/webpack/webpack/blob/master/lib/Compilation.js\" target=\"_blank\" rel=\"noopener\">Compilation Source</a>   </li>\n</ul>\n<h2 id=\"插件的基本结构\"><a href=\"#插件的基本结构\" class=\"headerlink\" title=\"插件的基本结构\"></a>插件的基本结构</h2><p>插件是在原型中带有一个apply方法的实例化对象，当安装插件的时候，这个apply方法就会被webpack调用一次。apply方法提供一个指向当前活动的webpack compiler的引用，该引用允许访问compiler的回调。一个简单的插件结构如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloWorldPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Setup the plugin instance with options...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloWorldPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloWorldPlugin;</span><br></pre></td></tr></table></figure>\n<p>然后安装一个插件，仅仅需要在你的 webpack config 中plugins对应的数组中，增加一个插件的实例即可   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloWorldPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'hello-world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... config settings here ...</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HelloWorldPlugin(&#123;<span class=\"attr\">options</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问编译\"><a href=\"#访问编译\" class=\"headerlink\" title=\"访问编译\"></a>访问编译</h2><p>通过使用编译器对象，你可能会绑定提供指向每个新的compilation应用的回调。这些compilations提供了编译过程中很多步骤的回调函数。   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloCompilationPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloCompilationPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Setup callback for accessing a compilation:</span></span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">\"compilation\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Now setup callbacks for accessing compilation steps:</span></span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">\"optimize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Assets are being optimized.\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloCompilationPlugin;</span><br></pre></td></tr></table></figure>\n<p>如果想了解更多关于在编译器、编译中哪些回调是可用的和其他一些更重要的对象，轻戳<a href=\"https://doc.webpack-china.org/api/plugins/\" target=\"_blank\" rel=\"noopener\">plugin文档</a> </p>\n<h2 id=\"异步插件\"><a href=\"#异步插件\" class=\"headerlink\" title=\"异步插件\"></a>异步插件</h2><p>一些编译插件步骤是异步的并且提供了一个当你的插件结束编译时必须调用的回调方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloAsyncPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloAsyncPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">\"emit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something async...</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Done with async work...\"</span>);</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloAsyncPlugin;</span><br></pre></td></tr></table></figure>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>一旦我们打开了webpack编译器和每个单独编译的大门，我们可以使用引擎做的事情是无限可能的。我们可以重新格式化存在的文件、创建派生文件、完全伪造一个新文件  </p>\n<p>让我们写个简单的示例插件，目的是生成一个新的名字为filelist.md的文件。内容如下：列出构建过程中所有的生成文件。这个插件大概如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FileListPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FileListPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'emit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a header string for the generated file:</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> filelist = <span class=\"string\">'In this build:\\n\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Loop through all compiled assets,</span></span><br><span class=\"line\">    <span class=\"comment\">// adding a new line item for each filename.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> filename <span class=\"keyword\">in</span> compilation.assets) &#123;</span><br><span class=\"line\">      filelist += (<span class=\"string\">'- '</span>+ filename +<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Insert this list into the webpack build as a new file asset:</span></span><br><span class=\"line\">    compilation.assets[<span class=\"string\">'filelist.md'</span>] = &#123;</span><br><span class=\"line\">      source: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filelist;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filelist.length;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = FileListPlugin;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不同类型的插件\"><a href=\"#不同类型的插件\" class=\"headerlink\" title=\"不同类型的插件\"></a>不同类型的插件</h2><p>插件可以依据其注册的事件来分成不同的类型，每个事件钩子决定了在触发时如何调用该插件。  </p>\n<h4 id=\"同步类型\"><a href=\"#同步类型\" class=\"headerlink\" title=\"同步类型\"></a>同步类型</h4><p>这种类型的实例使用如下方式来调用插件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPlugins(name: string, <span class=\"attr\">args</span>: any...)</span><br><span class=\"line\"></span><br><span class=\"line\">applyPluginsBailResult(name: string, <span class=\"attr\">args</span>: any...)</span><br></pre></td></tr></table></figure></p>\n<p>这意味着每一个插件的回调将伴随特定参数args依次被调用。对插件而言这是最简单的格式。很多有用的事件例如”compile”, “this-compilation”，是期望插件同步执行的。  </p>\n<h4 id=\"流式类型\"><a href=\"#流式类型\" class=\"headerlink\" title=\"流式类型\"></a>流式类型</h4><p>waterfall Plugins 通过下面的方式调用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPluginsWaterfall(name: string, <span class=\"attr\">init</span>: any, <span class=\"attr\">args</span>: any...)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"异步类型\"><a href=\"#异步类型\" class=\"headerlink\" title=\"异步类型\"></a>异步类型</h4><p>当所有的插件被使用下面的方法异步调用的时候，即为异步插件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPluginsAsync(name: string, <span class=\"attr\">args</span>: any..., <span class=\"attr\">callback</span>: (err?: <span class=\"built_in\">Error</span>) -&gt; <span class=\"keyword\">void</span>)</span><br></pre></td></tr></table></figure></p>\n<p>插件控制方法被调用，参数是所有的args和带有这种标志(err?: Error) -&gt; void的回调。handler方法按照注册回调在所有handlers被调用之后的顺序来调用。对于”emit”, “run”事件来说这是很常用的模式。</p>\n<h4 id=\"异步流\"><a href=\"#异步流\" class=\"headerlink\" title=\"异步流\"></a>异步流</h4><p>这种插件将按照流失方式来被异步使用  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPluginsAsyncWaterfall(name: string, <span class=\"attr\">init</span>: any, <span class=\"attr\">callback</span>: (err: <span class=\"built_in\">Error</span>, <span class=\"attr\">result</span>: any) -&gt; <span class=\"keyword\">void</span>)</span><br></pre></td></tr></table></figure>\n<p>这种插件的handler被调用时，参数是当前value和带有这种标志(err?: Error) -&gt; void的回调。当被调用时，nextValue是下一个handler的当前值。第一个handler的当前值是init。所有的handler被调用之后，最后一个值将会被赋给回调。如果有的handler传递了一个err的值，回调将会接受err，并且不会有其他handler被第阿勇。这种插件模式使用与于”before-resolve” and “after-resolve”之类的事件。   </p>\n<h4 id=\"异步系列\"><a href=\"#异步系列\" class=\"headerlink\" title=\"异步系列\"></a>异步系列</h4><p>这种和异步插件很相似，不同在于如果有点插件注册失败，将不会调用任何插件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPluginsAsyncSeries(name: string, <span class=\"attr\">args</span>: any..., <span class=\"attr\">callback</span>: (err: <span class=\"built_in\">Error</span>, <span class=\"attr\">result</span>: any) -&gt; <span class=\"keyword\">void</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此，如何开发一个基本的webpack plugin 我相信大家已经知道了，如果还不太清楚的话，可以移步<a href=\"https://github.com/xiaoxiangdaiyu/w-loader\" target=\"_blank\" rel=\"noopener\">w-loader</a>查看。<br>另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   </p>"},{"title":"实现一个websocket服务器-理论篇","date":"2017-11-06T02:50:06.000Z","_content":"本文是Writing WebSocket servers的中文文档，翻译自MDN[Writing WebSocket servers](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers)。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。\n<!-- more -->\n## websocket服务器的本质\nWebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建一个定制服务器的任务通常会让让人们感到害怕。然而基于实现一个简单的Websocket服务器没有那么麻烦。   \n\n一个WebSocket server可以使用任意的服务端编程语言来实现，只要该语言能实现基本的Berkeley sockets（伯克利套接字）。例如c(++)、Python、PHP、服务端JavaScript(node.js)。下面不是关于特定语言的教程，而是一个促进我们搭建自己服务器的指南。   \n\n我们需要明白http如何工作并且有中等编程经验。基于特定语言的支持，了解TCP sockets 同样也是必要的。该篇教程的范围是介绍开发一个WebSocket server需要的最少知识。   \n\n该文章将会从很底层的观点来解释一个 WebSocket server。WebSocket servers 通常是独立的专门的servers(因为负载均衡和其他一些原因),因此通常使用一个反向代理（例如一个标准的HTTP server）来发现 WebSocket握手协议，预处理他们然后将客户端信息发送给真正的WebSocket server。这意味着WebSocket server不必充斥这cookie和签名的处理方法。完全可以放在代理中处理。   \n## websocket 握手规则    \n\n首先，服务器必须使用标准的TCPsocket来监听即将到来的socket连接。基于我们的平台，这些很可能被我们处理了(成熟的服务端语言提供了这些接口，使我们不必从头做起)。例如，假设我们的服务器监听example.com的8000端口，socket server响应/chat的GET请求。   \n\n警告：服务器可以选择监听任意端口，但是如果在80或443之外，可能会遇到防火墙或者代理的问题。443端口大多数情况下是可以的，当然需要一个安全连接(TLS/SSL)。此外，注意这一点，大多数浏览器不允许从安全的页面连接到不安全的Websocket服务器。  \n在WebSockets中握手是web，是HTTP想WS转化的桥梁。通过握手，连接的详情会被判断，并且在完成之前每一个部分都可以终端如果条件不满足。服务器必须谨慎解析客户端请求的所有信息，否则安全问题将会发生。  \n\n## 客户端握手请求   \n\n尽管我们在开发一个服务器，客户端仍然需要发起一个Websocket握手过程。因此我们必须知道如何解析客户端的请求。客户端将会发送一个标准的HTTP请求，大概像下面的例子(HTTP版本必须1.1及以上，请求方式为GET)。     \n```\n    GET /chat HTTP/1.1\n    Host: example.com:8000\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n    Sec-WebSocket-Version: 13 \n```\n\n此处客户端可以发起扩展或者子协议，在[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)查看更多细节。同样，公共的headers像User-Agent, Referer, Cookie, or authentication等同样可以包括，一句话做你想做的。这些并不直接和WebSocket相关，忽略掉他们也是安全的，在很多公共的设置中，会有一个代理服务器来处理这些信息。 \n\n如果有的header不被识别或者有非法值，服务器应该发送'400 Bad Request'并立刻关闭socket，通常也会在HTTP返回体中给出握手失败的原因，不过这些信息可能不会被展示(因为浏览器不会展示他们)。如果服务器不识别WebSockets的版本，应该返回一个Sec-WebSocket-Version 消息头，指明可以接受的版本(最好是V13,及最新)。下面一起看一下最神秘的消息头Sec-WebSocket-Key。    \n\n### 提示  \n\n* 所有的浏览器将会发送一个Origin header,我们可以使用这个header来做安全限制（检查是否相同的origin）如果并不是期望的origin返回一个403 Forbidden。然后注意下那些非浏览器的客户端可以发送一个伪造的origin，很多应用将会拒绝没有该消息头的请求。  \n* 请求资源定位符(这里的/chat)在规范中没有明确的定义，所以很多人巧妙的使用它，让一个服务器处理多个WebSocket 应用。例如，example.com/chat可以指向一个多用户聊天app，而相同服务器上的/game指向多用户的游戏。即[相同域名下的路径可以指向不同应用]()。   \n* 规范的HTTP code只可以在握手之前使用，当握手成功之后，应该使用不同的code集合。请查看规范第7.4节   \n\n## 服务器握手返回  \n\n当服务器接受到请求时，应该发送一个相当奇怪的响应，看起来大概这个样子，不过仍然遵循HTTP规范。 请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 \n\n```\n    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n```\n\n此外，服务器可以在这里决定扩展或者子协议请求。更多详情请查看[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)。Sec-WebSocket-Accept 部分很有趣，服务器必须基于客户端请求的Sec-WebSocket-Key 中得到它，具体做法如下：将Sec-WebSocket-Key 和\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。   \n\n### 提示  \n\n因为这个看似复杂的过程存在，所以客户端不用关心服务器是否支持websocket。另外，该过程的重要性还是在于安全性，如果一个服务器将一个Websocket连接作为http请求解析的话，将会有不小的问题。   \n\n因此，如果key是\"dGhlIHNhbXBsZSBub25jZQ==\"，Accept将会是\"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\"，一旦服务器发送这些消息头，握手协议就完成了。   \n\n服务器在回复握手之前，可以发送其他的header像Set-Cookie、要求签名、重定向等。   \n\n## 跟踪客户端  \n\n虽然并不直接与Websocket协议相关，但值得我们注意。服务器将会跟踪客户端的sockets，因此我们不必和已经完成握手协议的客户端再次进行握手。相同客户端的IP地址可以尝试多次连接(但是服务器可以选择拒绝，如果他们尝试多次连接以达到保存自己Denial-of-Service 踪迹的目的)  \n\n## FramesEdit 数据交换  \n\n客户端和服务器都可以在任意时间发送消息、这正是websocket的魔力所在。然而从数据帧中提取信息的过程就不那么充满魔力了。尽管所有的帧遵循相同的特定格式，从客户端发到服务器的数据通过X异或加密 (使用32位的密钥)进行处理，该规范的第五章详细描述了相关内容。\n \n     \n## 格式  \n每个从客户端发送到服务器的数据帧遵循下面的格式：  \n  \n```  \n    帧格式:  \n​​\n      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n\n```\n\n\nMASK (掩码:一串二进制代码对目标字段进行位与运算，屏蔽当前的输入位。)位只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1(事实上5.1节表明，如果客户端发送未掩码处理的消息，服务器必须断开连接)当发送一个帧至客户端时，不要处理数据并且不设置mask位。下面将会阐述原因。注意：我们必须处理消息即使用一个安全的socket。RSV1-3可以被忽略，这是待扩展位。   \n\nopcode字段定义如何解析有效的数据：  \n* 0x0 继续处理\n* 0x1 text(必须是UTF-8编码)  \n* 0x2 二进制 和其他叫做控制代码的数据。\n* 0x3-0x7 0xB-0xF 该版本的WebSockets无意义   \n\nFIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。   \n\n## 有效编码数据长度  \n\n为了解析有效编码数据，我们必须知道何时结束。这是知道有效数据长度的重要所在。不幸的是，有一些复杂。让我们分步骤来看。  \n1. 阅读9-15位并且作为无符号整数解释，如果是小于等于125，这就是数据的长度。如果是126，请继续步骤2,如果是127请阅读，步骤3   \n2. 阅读后面16位并且作为无符号整数解读，结束  \n3. 阅读后面64位并且作为无符号整数解读，结束    \n\n\n## 读取并反掩码数据  \n\n如果MASK位被设置(当然它应该被设置，对于一个从客户端到服务器的消息)，读取后4字节（即32位），即加密的key。一旦数据长度和加密key被解码，我们可以直接从socket中读取成批的字节。获取编码的数据和掩码key，将其解码，循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算，如果用js就如下所示(该规则就是加密解密的规则而已，没必要深究，大家知道如何使用就好)。 \n\n```js\n    var DECODED = \"\";\n    for (var i = 0; i < ENCODED.length; i++) {\n        DECODED[i] = ENCODED[i] ^ MASK[i % 4];\n    }\n```\n现在我们可以知道我们应用上解码之后的数据具体含义了。\n\n## 消息分割\n\nFIN和opcode字段共同工作来讲一个消息分解为单独的帧，该过程叫做消息分割，只有在opcodes为0x0-0x2时才可用（前面也提到，当前版本其他数值无意义）。  \n\n回想一下，opcode指明了一个帧的将要做什么，如果是0x1，数据是text。如果是0x2，诗句是二进制数据。然而当其为0x0时，该帧是一个继续帧，表示服务器应该将该帧的有效数据和服务器收到的最后一帧链接起来。这是一个草图，指明了当客户端发送text消息时，第一个消息在一个单独的帧里发送，然而第二个消息却包括三个帧，服务器如何反应。FIN和opcode细节仅仅对客户端展示。看一下下面的例子应该会更容易理解。\n    \n```\nClient: FIN=1, opcode=0x1, msg=\"hello\"\nServer: (消息传输过程完成) Hi.\nClient: FIN=0, opcode=0x1, msg=\"and a\"\nServer: (监听，新的消息包含开始的文本)\nClient: FIN=0, opcode=0x0, msg=\"happy new\"\nServer: (监听，有效数据与上面的消息拼接)\nClient: FIN=1, opcode=0x0, msg=\"year!\"\nServer: (消息传输完成) Happy new year to you too!\n```\n \n注意:第一帧包括一个完全的消息(FIN=1并且opcode!=0x0)，因此当服务器发现结束时可以返回。第二帧有效数据为text(opcode=0x1)，但是完整的消息没有到达(FIN=0)。该消息所有剩下的部分通过继续帧发送(opcode=0x0)，并且最后以帧通过FIN=1表明身份。  \n\n## WebSockets 的心跳：ping和pong  \n\n在握手接受之后的任意点，不论是客户端还是服务器都可以选择发送ping给另一部分。当ping被接收时，接收方必须尽可能的返回一个pong。我们可以用该方式来确保连接依然有效。  \n\n一个ping或者pong只是一个规则的帧，但是是控制帧，Pings的opcode为0x9，pong是0xA。当我们得到ping时，返回具有完全相同有效数据的pong。(对ping和pong而言，最大有效数据长度是125)我们可能在没有发送ping的情况下，得到一个pong。这种情况请忽略。\n\n在发送pong之前，如果我们接收到不止一个ping，只需回应一个pong即可。  \n## 关闭连接  \n\n要关闭客户端和服务器之间的连接，我们可以发送一个包含特定控制队列的数据的控制帧来开始关闭的握手协议。当接收到该帧时，另一方发送一个关闭帧作为回应。然后前者会关闭连接。关闭连接之后接收到的数据都会被丢弃。\n\n## 更多  \n\nWebSocket 扩展和子协议在握手过程中通过headers进行约定。有时扩展和子协议太近似了以致于难以分别。最基本的区别是，扩展控制websocket 帧并且修改有效数据。然而子协议构成websocket有效数据并且从不修改任何事物。扩展是可选的广义的，子协议是必须的局限性的。\n\n### 扩展 \n\n将扩展看作压缩一个文件在发送之前，无论你如何做，你将发送相同的数据只不过帧不同而已。收件人最终将会受到与你本地拷贝相同的数据，不过以不同方式发送。这就是扩展做的事情。websockets定义了一个协议和基本的方式去发送数据，然而扩展例如压缩可以以更短的帧来阿松相同的数据。 \n\n### 子协议  \n\n将子协议看作定做的xml表或者文档类型说明。你在使用XML和它的语法，但是你被限制于你同意的结构。WebSocket子协议就是如此。他们不介绍其他一些华丽的东西，仅仅建立结构，像一个文档类型和表一样，两个部分(client & server)都同意该协议,和文档类型和表不同，子协议由服务器实现并且客户端不能对外引用。  \n一个客户端必须请求特定的子协议，为了达到目的，将会发送一些像下面的内容作为原始握手的一部分。  \n\n```\nGET /chat HTTP/1.1\n...\nSec-WebSocket-Protocol: soap, wamp\n//或者等价的写法   \n...\nSec-WebSocket-Protocol: soap\nSec-WebSocket-Protocol: wamp\n```\n\n现在，服务器必须选择客户端建议并且支持的一种协议。如果多余一个，发送客户端发送过来的第一个。想象我们的服务器可以使用soap和wamp中的一个，然后，返回的握手中将会发送如下形式。\n\n```\nSec-WebSocket-Protocol: soap\n```\n\n\n服务器不能发送超过一个的Sec-Websocket-Protocol消息头，如果服务器不想使用任一个子协议，应该不发送Sec-WebSocket-Protocol 消息头。发送一个空白的消息头是错误的。客户端可能会关闭连接如果不能获得期望的子协议。    \n\n如果我们希望我们的服务器遵守一定的子协议，自然地在我们的服务器需要额外的代码。想象我们使用一个子协议json，基于该子协议，所有的数据将会作为JSON传递，如果一个客户端征求子协议并且服务器想使用它，服务你需要有一个JSON解析。实话实说，将会有一个工具库，但是服务器也要需要传递数据。\n\n\n为了避免名称冲突，推荐选用domain的一部分作为子协议的名称。如果我们开发一个使用特定格式的聊天app，我们可能使用这样的名字:Sec-WebSocket-Protocol: chat.example.com  注意，这不是必须的。仅仅是一个可选的惯例，我们可以使用我们想用的任意字符。\n## 结束语 \n翻译这篇文档的初衷是看到关于websocket的中文大部分都是客户端相关的内容，自己又对服务器端的实现感兴趣，没有找到合适的资料，就只好自己阅读下英文，本着提高自己的目的将其翻译下来，希望对其他同学有所帮助，[原文查看](https://github.com/xiaoxiangdaiyu/chartroom/tree/master/src/websocket) 。后面请期待node实现websocket服务器的实践篇。\n## 源文档出处  \n翻译自MDN[Writing WebSocket servers](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers)","source":"_posts/websocket/frame.md","raw":"---\ntitle: 实现一个websocket服务器-理论篇 \ndate: 2017-11-06 10:50:06\n---\n本文是Writing WebSocket servers的中文文档，翻译自MDN[Writing WebSocket servers](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers)。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。\n<!-- more -->\n## websocket服务器的本质\nWebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建一个定制服务器的任务通常会让让人们感到害怕。然而基于实现一个简单的Websocket服务器没有那么麻烦。   \n\n一个WebSocket server可以使用任意的服务端编程语言来实现，只要该语言能实现基本的Berkeley sockets（伯克利套接字）。例如c(++)、Python、PHP、服务端JavaScript(node.js)。下面不是关于特定语言的教程，而是一个促进我们搭建自己服务器的指南。   \n\n我们需要明白http如何工作并且有中等编程经验。基于特定语言的支持，了解TCP sockets 同样也是必要的。该篇教程的范围是介绍开发一个WebSocket server需要的最少知识。   \n\n该文章将会从很底层的观点来解释一个 WebSocket server。WebSocket servers 通常是独立的专门的servers(因为负载均衡和其他一些原因),因此通常使用一个反向代理（例如一个标准的HTTP server）来发现 WebSocket握手协议，预处理他们然后将客户端信息发送给真正的WebSocket server。这意味着WebSocket server不必充斥这cookie和签名的处理方法。完全可以放在代理中处理。   \n## websocket 握手规则    \n\n首先，服务器必须使用标准的TCPsocket来监听即将到来的socket连接。基于我们的平台，这些很可能被我们处理了(成熟的服务端语言提供了这些接口，使我们不必从头做起)。例如，假设我们的服务器监听example.com的8000端口，socket server响应/chat的GET请求。   \n\n警告：服务器可以选择监听任意端口，但是如果在80或443之外，可能会遇到防火墙或者代理的问题。443端口大多数情况下是可以的，当然需要一个安全连接(TLS/SSL)。此外，注意这一点，大多数浏览器不允许从安全的页面连接到不安全的Websocket服务器。  \n在WebSockets中握手是web，是HTTP想WS转化的桥梁。通过握手，连接的详情会被判断，并且在完成之前每一个部分都可以终端如果条件不满足。服务器必须谨慎解析客户端请求的所有信息，否则安全问题将会发生。  \n\n## 客户端握手请求   \n\n尽管我们在开发一个服务器，客户端仍然需要发起一个Websocket握手过程。因此我们必须知道如何解析客户端的请求。客户端将会发送一个标准的HTTP请求，大概像下面的例子(HTTP版本必须1.1及以上，请求方式为GET)。     \n```\n    GET /chat HTTP/1.1\n    Host: example.com:8000\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n    Sec-WebSocket-Version: 13 \n```\n\n此处客户端可以发起扩展或者子协议，在[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)查看更多细节。同样，公共的headers像User-Agent, Referer, Cookie, or authentication等同样可以包括，一句话做你想做的。这些并不直接和WebSocket相关，忽略掉他们也是安全的，在很多公共的设置中，会有一个代理服务器来处理这些信息。 \n\n如果有的header不被识别或者有非法值，服务器应该发送'400 Bad Request'并立刻关闭socket，通常也会在HTTP返回体中给出握手失败的原因，不过这些信息可能不会被展示(因为浏览器不会展示他们)。如果服务器不识别WebSockets的版本，应该返回一个Sec-WebSocket-Version 消息头，指明可以接受的版本(最好是V13,及最新)。下面一起看一下最神秘的消息头Sec-WebSocket-Key。    \n\n### 提示  \n\n* 所有的浏览器将会发送一个Origin header,我们可以使用这个header来做安全限制（检查是否相同的origin）如果并不是期望的origin返回一个403 Forbidden。然后注意下那些非浏览器的客户端可以发送一个伪造的origin，很多应用将会拒绝没有该消息头的请求。  \n* 请求资源定位符(这里的/chat)在规范中没有明确的定义，所以很多人巧妙的使用它，让一个服务器处理多个WebSocket 应用。例如，example.com/chat可以指向一个多用户聊天app，而相同服务器上的/game指向多用户的游戏。即[相同域名下的路径可以指向不同应用]()。   \n* 规范的HTTP code只可以在握手之前使用，当握手成功之后，应该使用不同的code集合。请查看规范第7.4节   \n\n## 服务器握手返回  \n\n当服务器接受到请求时，应该发送一个相当奇怪的响应，看起来大概这个样子，不过仍然遵循HTTP规范。 请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 \n\n```\n    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n```\n\n此外，服务器可以在这里决定扩展或者子协议请求。更多详情请查看[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)。Sec-WebSocket-Accept 部分很有趣，服务器必须基于客户端请求的Sec-WebSocket-Key 中得到它，具体做法如下：将Sec-WebSocket-Key 和\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。   \n\n### 提示  \n\n因为这个看似复杂的过程存在，所以客户端不用关心服务器是否支持websocket。另外，该过程的重要性还是在于安全性，如果一个服务器将一个Websocket连接作为http请求解析的话，将会有不小的问题。   \n\n因此，如果key是\"dGhlIHNhbXBsZSBub25jZQ==\"，Accept将会是\"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\"，一旦服务器发送这些消息头，握手协议就完成了。   \n\n服务器在回复握手之前，可以发送其他的header像Set-Cookie、要求签名、重定向等。   \n\n## 跟踪客户端  \n\n虽然并不直接与Websocket协议相关，但值得我们注意。服务器将会跟踪客户端的sockets，因此我们不必和已经完成握手协议的客户端再次进行握手。相同客户端的IP地址可以尝试多次连接(但是服务器可以选择拒绝，如果他们尝试多次连接以达到保存自己Denial-of-Service 踪迹的目的)  \n\n## FramesEdit 数据交换  \n\n客户端和服务器都可以在任意时间发送消息、这正是websocket的魔力所在。然而从数据帧中提取信息的过程就不那么充满魔力了。尽管所有的帧遵循相同的特定格式，从客户端发到服务器的数据通过X异或加密 (使用32位的密钥)进行处理，该规范的第五章详细描述了相关内容。\n \n     \n## 格式  \n每个从客户端发送到服务器的数据帧遵循下面的格式：  \n  \n```  \n    帧格式:  \n​​\n      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n\n```\n\n\nMASK (掩码:一串二进制代码对目标字段进行位与运算，屏蔽当前的输入位。)位只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1(事实上5.1节表明，如果客户端发送未掩码处理的消息，服务器必须断开连接)当发送一个帧至客户端时，不要处理数据并且不设置mask位。下面将会阐述原因。注意：我们必须处理消息即使用一个安全的socket。RSV1-3可以被忽略，这是待扩展位。   \n\nopcode字段定义如何解析有效的数据：  \n* 0x0 继续处理\n* 0x1 text(必须是UTF-8编码)  \n* 0x2 二进制 和其他叫做控制代码的数据。\n* 0x3-0x7 0xB-0xF 该版本的WebSockets无意义   \n\nFIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。   \n\n## 有效编码数据长度  \n\n为了解析有效编码数据，我们必须知道何时结束。这是知道有效数据长度的重要所在。不幸的是，有一些复杂。让我们分步骤来看。  \n1. 阅读9-15位并且作为无符号整数解释，如果是小于等于125，这就是数据的长度。如果是126，请继续步骤2,如果是127请阅读，步骤3   \n2. 阅读后面16位并且作为无符号整数解读，结束  \n3. 阅读后面64位并且作为无符号整数解读，结束    \n\n\n## 读取并反掩码数据  \n\n如果MASK位被设置(当然它应该被设置，对于一个从客户端到服务器的消息)，读取后4字节（即32位），即加密的key。一旦数据长度和加密key被解码，我们可以直接从socket中读取成批的字节。获取编码的数据和掩码key，将其解码，循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算，如果用js就如下所示(该规则就是加密解密的规则而已，没必要深究，大家知道如何使用就好)。 \n\n```js\n    var DECODED = \"\";\n    for (var i = 0; i < ENCODED.length; i++) {\n        DECODED[i] = ENCODED[i] ^ MASK[i % 4];\n    }\n```\n现在我们可以知道我们应用上解码之后的数据具体含义了。\n\n## 消息分割\n\nFIN和opcode字段共同工作来讲一个消息分解为单独的帧，该过程叫做消息分割，只有在opcodes为0x0-0x2时才可用（前面也提到，当前版本其他数值无意义）。  \n\n回想一下，opcode指明了一个帧的将要做什么，如果是0x1，数据是text。如果是0x2，诗句是二进制数据。然而当其为0x0时，该帧是一个继续帧，表示服务器应该将该帧的有效数据和服务器收到的最后一帧链接起来。这是一个草图，指明了当客户端发送text消息时，第一个消息在一个单独的帧里发送，然而第二个消息却包括三个帧，服务器如何反应。FIN和opcode细节仅仅对客户端展示。看一下下面的例子应该会更容易理解。\n    \n```\nClient: FIN=1, opcode=0x1, msg=\"hello\"\nServer: (消息传输过程完成) Hi.\nClient: FIN=0, opcode=0x1, msg=\"and a\"\nServer: (监听，新的消息包含开始的文本)\nClient: FIN=0, opcode=0x0, msg=\"happy new\"\nServer: (监听，有效数据与上面的消息拼接)\nClient: FIN=1, opcode=0x0, msg=\"year!\"\nServer: (消息传输完成) Happy new year to you too!\n```\n \n注意:第一帧包括一个完全的消息(FIN=1并且opcode!=0x0)，因此当服务器发现结束时可以返回。第二帧有效数据为text(opcode=0x1)，但是完整的消息没有到达(FIN=0)。该消息所有剩下的部分通过继续帧发送(opcode=0x0)，并且最后以帧通过FIN=1表明身份。  \n\n## WebSockets 的心跳：ping和pong  \n\n在握手接受之后的任意点，不论是客户端还是服务器都可以选择发送ping给另一部分。当ping被接收时，接收方必须尽可能的返回一个pong。我们可以用该方式来确保连接依然有效。  \n\n一个ping或者pong只是一个规则的帧，但是是控制帧，Pings的opcode为0x9，pong是0xA。当我们得到ping时，返回具有完全相同有效数据的pong。(对ping和pong而言，最大有效数据长度是125)我们可能在没有发送ping的情况下，得到一个pong。这种情况请忽略。\n\n在发送pong之前，如果我们接收到不止一个ping，只需回应一个pong即可。  \n## 关闭连接  \n\n要关闭客户端和服务器之间的连接，我们可以发送一个包含特定控制队列的数据的控制帧来开始关闭的握手协议。当接收到该帧时，另一方发送一个关闭帧作为回应。然后前者会关闭连接。关闭连接之后接收到的数据都会被丢弃。\n\n## 更多  \n\nWebSocket 扩展和子协议在握手过程中通过headers进行约定。有时扩展和子协议太近似了以致于难以分别。最基本的区别是，扩展控制websocket 帧并且修改有效数据。然而子协议构成websocket有效数据并且从不修改任何事物。扩展是可选的广义的，子协议是必须的局限性的。\n\n### 扩展 \n\n将扩展看作压缩一个文件在发送之前，无论你如何做，你将发送相同的数据只不过帧不同而已。收件人最终将会受到与你本地拷贝相同的数据，不过以不同方式发送。这就是扩展做的事情。websockets定义了一个协议和基本的方式去发送数据，然而扩展例如压缩可以以更短的帧来阿松相同的数据。 \n\n### 子协议  \n\n将子协议看作定做的xml表或者文档类型说明。你在使用XML和它的语法，但是你被限制于你同意的结构。WebSocket子协议就是如此。他们不介绍其他一些华丽的东西，仅仅建立结构，像一个文档类型和表一样，两个部分(client & server)都同意该协议,和文档类型和表不同，子协议由服务器实现并且客户端不能对外引用。  \n一个客户端必须请求特定的子协议，为了达到目的，将会发送一些像下面的内容作为原始握手的一部分。  \n\n```\nGET /chat HTTP/1.1\n...\nSec-WebSocket-Protocol: soap, wamp\n//或者等价的写法   \n...\nSec-WebSocket-Protocol: soap\nSec-WebSocket-Protocol: wamp\n```\n\n现在，服务器必须选择客户端建议并且支持的一种协议。如果多余一个，发送客户端发送过来的第一个。想象我们的服务器可以使用soap和wamp中的一个，然后，返回的握手中将会发送如下形式。\n\n```\nSec-WebSocket-Protocol: soap\n```\n\n\n服务器不能发送超过一个的Sec-Websocket-Protocol消息头，如果服务器不想使用任一个子协议，应该不发送Sec-WebSocket-Protocol 消息头。发送一个空白的消息头是错误的。客户端可能会关闭连接如果不能获得期望的子协议。    \n\n如果我们希望我们的服务器遵守一定的子协议，自然地在我们的服务器需要额外的代码。想象我们使用一个子协议json，基于该子协议，所有的数据将会作为JSON传递，如果一个客户端征求子协议并且服务器想使用它，服务你需要有一个JSON解析。实话实说，将会有一个工具库，但是服务器也要需要传递数据。\n\n\n为了避免名称冲突，推荐选用domain的一部分作为子协议的名称。如果我们开发一个使用特定格式的聊天app，我们可能使用这样的名字:Sec-WebSocket-Protocol: chat.example.com  注意，这不是必须的。仅仅是一个可选的惯例，我们可以使用我们想用的任意字符。\n## 结束语 \n翻译这篇文档的初衷是看到关于websocket的中文大部分都是客户端相关的内容，自己又对服务器端的实现感兴趣，没有找到合适的资料，就只好自己阅读下英文，本着提高自己的目的将其翻译下来，希望对其他同学有所帮助，[原文查看](https://github.com/xiaoxiangdaiyu/chartroom/tree/master/src/websocket) 。后面请期待node实现websocket服务器的实践篇。\n## 源文档出处  \n翻译自MDN[Writing WebSocket servers](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers)","slug":"websocket/frame","published":1,"updated":"2017-12-15T12:55:38.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7doj000gnl92mtewh7km","content":"<p>本文是Writing WebSocket servers的中文文档，翻译自MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" target=\"_blank\" rel=\"noopener\">Writing WebSocket servers</a>。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。<br><a id=\"more\"></a></p>\n<h2 id=\"websocket服务器的本质\"><a href=\"#websocket服务器的本质\" class=\"headerlink\" title=\"websocket服务器的本质\"></a>websocket服务器的本质</h2><p>WebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建一个定制服务器的任务通常会让让人们感到害怕。然而基于实现一个简单的Websocket服务器没有那么麻烦。   </p>\n<p>一个WebSocket server可以使用任意的服务端编程语言来实现，只要该语言能实现基本的Berkeley sockets（伯克利套接字）。例如c(++)、Python、PHP、服务端JavaScript(node.js)。下面不是关于特定语言的教程，而是一个促进我们搭建自己服务器的指南。   </p>\n<p>我们需要明白http如何工作并且有中等编程经验。基于特定语言的支持，了解TCP sockets 同样也是必要的。该篇教程的范围是介绍开发一个WebSocket server需要的最少知识。   </p>\n<p>该文章将会从很底层的观点来解释一个 WebSocket server。WebSocket servers 通常是独立的专门的servers(因为负载均衡和其他一些原因),因此通常使用一个反向代理（例如一个标准的HTTP server）来发现 WebSocket握手协议，预处理他们然后将客户端信息发送给真正的WebSocket server。这意味着WebSocket server不必充斥这cookie和签名的处理方法。完全可以放在代理中处理。   </p>\n<h2 id=\"websocket-握手规则\"><a href=\"#websocket-握手规则\" class=\"headerlink\" title=\"websocket 握手规则\"></a>websocket 握手规则</h2><p>首先，服务器必须使用标准的TCPsocket来监听即将到来的socket连接。基于我们的平台，这些很可能被我们处理了(成熟的服务端语言提供了这些接口，使我们不必从头做起)。例如，假设我们的服务器监听example.com的8000端口，socket server响应/chat的GET请求。   </p>\n<p>警告：服务器可以选择监听任意端口，但是如果在80或443之外，可能会遇到防火墙或者代理的问题。443端口大多数情况下是可以的，当然需要一个安全连接(TLS/SSL)。此外，注意这一点，大多数浏览器不允许从安全的页面连接到不安全的Websocket服务器。<br>在WebSockets中握手是web，是HTTP想WS转化的桥梁。通过握手，连接的详情会被判断，并且在完成之前每一个部分都可以终端如果条件不满足。服务器必须谨慎解析客户端请求的所有信息，否则安全问题将会发生。  </p>\n<h2 id=\"客户端握手请求\"><a href=\"#客户端握手请求\" class=\"headerlink\" title=\"客户端握手请求\"></a>客户端握手请求</h2><p>尽管我们在开发一个服务器，客户端仍然需要发起一个Websocket握手过程。因此我们必须知道如何解析客户端的请求。客户端将会发送一个标准的HTTP请求，大概像下面的例子(HTTP版本必须1.1及以上，请求方式为GET)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /chat HTTP/1.1</span><br><span class=\"line\">Host: example.com:8000</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span><br><span class=\"line\">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure></p>\n<p>此处客户端可以发起扩展或者子协议，在<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous\" target=\"_blank\" rel=\"noopener\">Miscellaneous</a>查看更多细节。同样，公共的headers像User-Agent, Referer, Cookie, or authentication等同样可以包括，一句话做你想做的。这些并不直接和WebSocket相关，忽略掉他们也是安全的，在很多公共的设置中，会有一个代理服务器来处理这些信息。 </p>\n<p>如果有的header不被识别或者有非法值，服务器应该发送’400 Bad Request’并立刻关闭socket，通常也会在HTTP返回体中给出握手失败的原因，不过这些信息可能不会被展示(因为浏览器不会展示他们)。如果服务器不识别WebSockets的版本，应该返回一个Sec-WebSocket-Version 消息头，指明可以接受的版本(最好是V13,及最新)。下面一起看一下最神秘的消息头Sec-WebSocket-Key。    </p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><ul>\n<li>所有的浏览器将会发送一个Origin header,我们可以使用这个header来做安全限制（检查是否相同的origin）如果并不是期望的origin返回一个403 Forbidden。然后注意下那些非浏览器的客户端可以发送一个伪造的origin，很多应用将会拒绝没有该消息头的请求。  </li>\n<li>请求资源定位符(这里的/chat)在规范中没有明确的定义，所以很多人巧妙的使用它，让一个服务器处理多个WebSocket 应用。例如，example.com/chat可以指向一个多用户聊天app，而相同服务器上的/game指向多用户的游戏。即<a href=\"\">相同域名下的路径可以指向不同应用</a>。   </li>\n<li>规范的HTTP code只可以在握手之前使用，当握手成功之后，应该使用不同的code集合。请查看规范第7.4节   </li>\n</ul>\n<h2 id=\"服务器握手返回\"><a href=\"#服务器握手返回\" class=\"headerlink\" title=\"服务器握手返回\"></a>服务器握手返回</h2><p>当服务器接受到请求时，应该发送一个相当奇怪的响应，看起来大概这个样子，不过仍然遵循HTTP规范。 请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br></pre></td></tr></table></figure>\n<p>此外，服务器可以在这里决定扩展或者子协议请求。更多详情请查看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous\" target=\"_blank\" rel=\"noopener\">Miscellaneous</a>。Sec-WebSocket-Accept 部分很有趣，服务器必须基于客户端请求的Sec-WebSocket-Key 中得到它，具体做法如下：将Sec-WebSocket-Key 和”258EAFA5-E914-47DA-95CA-C5AB0DC85B11”链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。   </p>\n<h3 id=\"提示-1\"><a href=\"#提示-1\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>因为这个看似复杂的过程存在，所以客户端不用关心服务器是否支持websocket。另外，该过程的重要性还是在于安全性，如果一个服务器将一个Websocket连接作为http请求解析的话，将会有不小的问题。   </p>\n<p>因此，如果key是”dGhlIHNhbXBsZSBub25jZQ==”，Accept将会是”s3pPLMBiTxaQ9kYGzzhZRbK+xOo=”，一旦服务器发送这些消息头，握手协议就完成了。   </p>\n<p>服务器在回复握手之前，可以发送其他的header像Set-Cookie、要求签名、重定向等。   </p>\n<h2 id=\"跟踪客户端\"><a href=\"#跟踪客户端\" class=\"headerlink\" title=\"跟踪客户端\"></a>跟踪客户端</h2><p>虽然并不直接与Websocket协议相关，但值得我们注意。服务器将会跟踪客户端的sockets，因此我们不必和已经完成握手协议的客户端再次进行握手。相同客户端的IP地址可以尝试多次连接(但是服务器可以选择拒绝，如果他们尝试多次连接以达到保存自己Denial-of-Service 踪迹的目的)  </p>\n<h2 id=\"FramesEdit-数据交换\"><a href=\"#FramesEdit-数据交换\" class=\"headerlink\" title=\"FramesEdit 数据交换\"></a>FramesEdit 数据交换</h2><p>客户端和服务器都可以在任意时间发送消息、这正是websocket的魔力所在。然而从数据帧中提取信息的过程就不那么充满魔力了。尽管所有的帧遵循相同的特定格式，从客户端发到服务器的数据通过X异或加密 (使用32位的密钥)进行处理，该规范的第五章详细描述了相关内容。</p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>每个从客户端发送到服务器的数据帧遵循下面的格式：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    帧格式:  </span><br><span class=\"line\">​​</span><br><span class=\"line\">      0                   1                   2                   3</span><br><span class=\"line\">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class=\"line\">     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class=\"line\">     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class=\"line\">     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class=\"line\">     | |1|2|3|       |K|             |                               |</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |     Extended payload length continued, if payload len == 127  |</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class=\"line\">     |                               |Masking-key, if MASK set to 1  |</span><br><span class=\"line\">     +-------------------------------+-------------------------------+</span><br><span class=\"line\">     | Masking-key (continued)       |          Payload Data         |</span><br><span class=\"line\">     +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     :                     Payload Data continued ...                :</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |                     Payload Data continued ...                |</span><br><span class=\"line\">     +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>MASK (掩码:一串二进制代码对目标字段进行位与运算，屏蔽当前的输入位。)位只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1(事实上5.1节表明，如果客户端发送未掩码处理的消息，服务器必须断开连接)当发送一个帧至客户端时，不要处理数据并且不设置mask位。下面将会阐述原因。注意：我们必须处理消息即使用一个安全的socket。RSV1-3可以被忽略，这是待扩展位。   </p>\n<p>opcode字段定义如何解析有效的数据：  </p>\n<ul>\n<li>0x0 继续处理</li>\n<li>0x1 text(必须是UTF-8编码)  </li>\n<li>0x2 二进制 和其他叫做控制代码的数据。</li>\n<li>0x3-0x7 0xB-0xF 该版本的WebSockets无意义   </li>\n</ul>\n<p>FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。   </p>\n<h2 id=\"有效编码数据长度\"><a href=\"#有效编码数据长度\" class=\"headerlink\" title=\"有效编码数据长度\"></a>有效编码数据长度</h2><p>为了解析有效编码数据，我们必须知道何时结束。这是知道有效数据长度的重要所在。不幸的是，有一些复杂。让我们分步骤来看。  </p>\n<ol>\n<li>阅读9-15位并且作为无符号整数解释，如果是小于等于125，这就是数据的长度。如果是126，请继续步骤2,如果是127请阅读，步骤3   </li>\n<li>阅读后面16位并且作为无符号整数解读，结束  </li>\n<li>阅读后面64位并且作为无符号整数解读，结束    </li>\n</ol>\n<h2 id=\"读取并反掩码数据\"><a href=\"#读取并反掩码数据\" class=\"headerlink\" title=\"读取并反掩码数据\"></a>读取并反掩码数据</h2><p>如果MASK位被设置(当然它应该被设置，对于一个从客户端到服务器的消息)，读取后4字节（即32位），即加密的key。一旦数据长度和加密key被解码，我们可以直接从socket中读取成批的字节。获取编码的数据和掩码key，将其解码，循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算，如果用js就如下所示(该规则就是加密解密的规则而已，没必要深究，大家知道如何使用就好)。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DECODED = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ENCODED.length; i++) &#123;</span><br><span class=\"line\">    DECODED[i] = ENCODED[i] ^ MASK[i % <span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以知道我们应用上解码之后的数据具体含义了。</p>\n<h2 id=\"消息分割\"><a href=\"#消息分割\" class=\"headerlink\" title=\"消息分割\"></a>消息分割</h2><p>FIN和opcode字段共同工作来讲一个消息分解为单独的帧，该过程叫做消息分割，只有在opcodes为0x0-0x2时才可用（前面也提到，当前版本其他数值无意义）。  </p>\n<p>回想一下，opcode指明了一个帧的将要做什么，如果是0x1，数据是text。如果是0x2，诗句是二进制数据。然而当其为0x0时，该帧是一个继续帧，表示服务器应该将该帧的有效数据和服务器收到的最后一帧链接起来。这是一个草图，指明了当客户端发送text消息时，第一个消息在一个单独的帧里发送，然而第二个消息却包括三个帧，服务器如何反应。FIN和opcode细节仅仅对客户端展示。看一下下面的例子应该会更容易理解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client: FIN=1, opcode=0x1, msg=&quot;hello&quot;</span><br><span class=\"line\">Server: (消息传输过程完成) Hi.</span><br><span class=\"line\">Client: FIN=0, opcode=0x1, msg=&quot;and a&quot;</span><br><span class=\"line\">Server: (监听，新的消息包含开始的文本)</span><br><span class=\"line\">Client: FIN=0, opcode=0x0, msg=&quot;happy new&quot;</span><br><span class=\"line\">Server: (监听，有效数据与上面的消息拼接)</span><br><span class=\"line\">Client: FIN=1, opcode=0x0, msg=&quot;year!&quot;</span><br><span class=\"line\">Server: (消息传输完成) Happy new year to you too!</span><br></pre></td></tr></table></figure>\n<p>注意:第一帧包括一个完全的消息(FIN=1并且opcode!=0x0)，因此当服务器发现结束时可以返回。第二帧有效数据为text(opcode=0x1)，但是完整的消息没有到达(FIN=0)。该消息所有剩下的部分通过继续帧发送(opcode=0x0)，并且最后以帧通过FIN=1表明身份。  </p>\n<h2 id=\"WebSockets-的心跳：ping和pong\"><a href=\"#WebSockets-的心跳：ping和pong\" class=\"headerlink\" title=\"WebSockets 的心跳：ping和pong\"></a>WebSockets 的心跳：ping和pong</h2><p>在握手接受之后的任意点，不论是客户端还是服务器都可以选择发送ping给另一部分。当ping被接收时，接收方必须尽可能的返回一个pong。我们可以用该方式来确保连接依然有效。  </p>\n<p>一个ping或者pong只是一个规则的帧，但是是控制帧，Pings的opcode为0x9，pong是0xA。当我们得到ping时，返回具有完全相同有效数据的pong。(对ping和pong而言，最大有效数据长度是125)我们可能在没有发送ping的情况下，得到一个pong。这种情况请忽略。</p>\n<p>在发送pong之前，如果我们接收到不止一个ping，只需回应一个pong即可。  </p>\n<h2 id=\"关闭连接\"><a href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"></a>关闭连接</h2><p>要关闭客户端和服务器之间的连接，我们可以发送一个包含特定控制队列的数据的控制帧来开始关闭的握手协议。当接收到该帧时，另一方发送一个关闭帧作为回应。然后前者会关闭连接。关闭连接之后接收到的数据都会被丢弃。</p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><p>WebSocket 扩展和子协议在握手过程中通过headers进行约定。有时扩展和子协议太近似了以致于难以分别。最基本的区别是，扩展控制websocket 帧并且修改有效数据。然而子协议构成websocket有效数据并且从不修改任何事物。扩展是可选的广义的，子协议是必须的局限性的。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>将扩展看作压缩一个文件在发送之前，无论你如何做，你将发送相同的数据只不过帧不同而已。收件人最终将会受到与你本地拷贝相同的数据，不过以不同方式发送。这就是扩展做的事情。websockets定义了一个协议和基本的方式去发送数据，然而扩展例如压缩可以以更短的帧来阿松相同的数据。 </p>\n<h3 id=\"子协议\"><a href=\"#子协议\" class=\"headerlink\" title=\"子协议\"></a>子协议</h3><p>将子协议看作定做的xml表或者文档类型说明。你在使用XML和它的语法，但是你被限制于你同意的结构。WebSocket子协议就是如此。他们不介绍其他一些华丽的东西，仅仅建立结构，像一个文档类型和表一样，两个部分(client &amp; server)都同意该协议,和文档类型和表不同，子协议由服务器实现并且客户端不能对外引用。<br>一个客户端必须请求特定的子协议，为了达到目的，将会发送一些像下面的内容作为原始握手的一部分。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /chat HTTP/1.1</span><br><span class=\"line\">...</span><br><span class=\"line\">Sec-WebSocket-Protocol: soap, wamp</span><br><span class=\"line\">//或者等价的写法   </span><br><span class=\"line\">...</span><br><span class=\"line\">Sec-WebSocket-Protocol: soap</span><br><span class=\"line\">Sec-WebSocket-Protocol: wamp</span><br></pre></td></tr></table></figure>\n<p>现在，服务器必须选择客户端建议并且支持的一种协议。如果多余一个，发送客户端发送过来的第一个。想象我们的服务器可以使用soap和wamp中的一个，然后，返回的握手中将会发送如下形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sec-WebSocket-Protocol: soap</span><br></pre></td></tr></table></figure>\n<p>服务器不能发送超过一个的Sec-Websocket-Protocol消息头，如果服务器不想使用任一个子协议，应该不发送Sec-WebSocket-Protocol 消息头。发送一个空白的消息头是错误的。客户端可能会关闭连接如果不能获得期望的子协议。    </p>\n<p>如果我们希望我们的服务器遵守一定的子协议，自然地在我们的服务器需要额外的代码。想象我们使用一个子协议json，基于该子协议，所有的数据将会作为JSON传递，如果一个客户端征求子协议并且服务器想使用它，服务你需要有一个JSON解析。实话实说，将会有一个工具库，但是服务器也要需要传递数据。</p>\n<p>为了避免名称冲突，推荐选用domain的一部分作为子协议的名称。如果我们开发一个使用特定格式的聊天app，我们可能使用这样的名字:Sec-WebSocket-Protocol: chat.example.com  注意，这不是必须的。仅仅是一个可选的惯例，我们可以使用我们想用的任意字符。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>翻译这篇文档的初衷是看到关于websocket的中文大部分都是客户端相关的内容，自己又对服务器端的实现感兴趣，没有找到合适的资料，就只好自己阅读下英文，本着提高自己的目的将其翻译下来，希望对其他同学有所帮助，<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/tree/master/src/websocket\" target=\"_blank\" rel=\"noopener\">原文查看</a> 。后面请期待node实现websocket服务器的实践篇。</p>\n<h2 id=\"源文档出处\"><a href=\"#源文档出处\" class=\"headerlink\" title=\"源文档出处\"></a>源文档出处</h2><p>翻译自MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" target=\"_blank\" rel=\"noopener\">Writing WebSocket servers</a></p>\n","site":{"data":{}},"excerpt":"<p>本文是Writing WebSocket servers的中文文档，翻译自MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" target=\"_blank\" rel=\"noopener\">Writing WebSocket servers</a>。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。<br>","more":"</p>\n<h2 id=\"websocket服务器的本质\"><a href=\"#websocket服务器的本质\" class=\"headerlink\" title=\"websocket服务器的本质\"></a>websocket服务器的本质</h2><p>WebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建一个定制服务器的任务通常会让让人们感到害怕。然而基于实现一个简单的Websocket服务器没有那么麻烦。   </p>\n<p>一个WebSocket server可以使用任意的服务端编程语言来实现，只要该语言能实现基本的Berkeley sockets（伯克利套接字）。例如c(++)、Python、PHP、服务端JavaScript(node.js)。下面不是关于特定语言的教程，而是一个促进我们搭建自己服务器的指南。   </p>\n<p>我们需要明白http如何工作并且有中等编程经验。基于特定语言的支持，了解TCP sockets 同样也是必要的。该篇教程的范围是介绍开发一个WebSocket server需要的最少知识。   </p>\n<p>该文章将会从很底层的观点来解释一个 WebSocket server。WebSocket servers 通常是独立的专门的servers(因为负载均衡和其他一些原因),因此通常使用一个反向代理（例如一个标准的HTTP server）来发现 WebSocket握手协议，预处理他们然后将客户端信息发送给真正的WebSocket server。这意味着WebSocket server不必充斥这cookie和签名的处理方法。完全可以放在代理中处理。   </p>\n<h2 id=\"websocket-握手规则\"><a href=\"#websocket-握手规则\" class=\"headerlink\" title=\"websocket 握手规则\"></a>websocket 握手规则</h2><p>首先，服务器必须使用标准的TCPsocket来监听即将到来的socket连接。基于我们的平台，这些很可能被我们处理了(成熟的服务端语言提供了这些接口，使我们不必从头做起)。例如，假设我们的服务器监听example.com的8000端口，socket server响应/chat的GET请求。   </p>\n<p>警告：服务器可以选择监听任意端口，但是如果在80或443之外，可能会遇到防火墙或者代理的问题。443端口大多数情况下是可以的，当然需要一个安全连接(TLS/SSL)。此外，注意这一点，大多数浏览器不允许从安全的页面连接到不安全的Websocket服务器。<br>在WebSockets中握手是web，是HTTP想WS转化的桥梁。通过握手，连接的详情会被判断，并且在完成之前每一个部分都可以终端如果条件不满足。服务器必须谨慎解析客户端请求的所有信息，否则安全问题将会发生。  </p>\n<h2 id=\"客户端握手请求\"><a href=\"#客户端握手请求\" class=\"headerlink\" title=\"客户端握手请求\"></a>客户端握手请求</h2><p>尽管我们在开发一个服务器，客户端仍然需要发起一个Websocket握手过程。因此我们必须知道如何解析客户端的请求。客户端将会发送一个标准的HTTP请求，大概像下面的例子(HTTP版本必须1.1及以上，请求方式为GET)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /chat HTTP/1.1</span><br><span class=\"line\">Host: example.com:8000</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span><br><span class=\"line\">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure></p>\n<p>此处客户端可以发起扩展或者子协议，在<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous\" target=\"_blank\" rel=\"noopener\">Miscellaneous</a>查看更多细节。同样，公共的headers像User-Agent, Referer, Cookie, or authentication等同样可以包括，一句话做你想做的。这些并不直接和WebSocket相关，忽略掉他们也是安全的，在很多公共的设置中，会有一个代理服务器来处理这些信息。 </p>\n<p>如果有的header不被识别或者有非法值，服务器应该发送’400 Bad Request’并立刻关闭socket，通常也会在HTTP返回体中给出握手失败的原因，不过这些信息可能不会被展示(因为浏览器不会展示他们)。如果服务器不识别WebSockets的版本，应该返回一个Sec-WebSocket-Version 消息头，指明可以接受的版本(最好是V13,及最新)。下面一起看一下最神秘的消息头Sec-WebSocket-Key。    </p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><ul>\n<li>所有的浏览器将会发送一个Origin header,我们可以使用这个header来做安全限制（检查是否相同的origin）如果并不是期望的origin返回一个403 Forbidden。然后注意下那些非浏览器的客户端可以发送一个伪造的origin，很多应用将会拒绝没有该消息头的请求。  </li>\n<li>请求资源定位符(这里的/chat)在规范中没有明确的定义，所以很多人巧妙的使用它，让一个服务器处理多个WebSocket 应用。例如，example.com/chat可以指向一个多用户聊天app，而相同服务器上的/game指向多用户的游戏。即<a href=\"\">相同域名下的路径可以指向不同应用</a>。   </li>\n<li>规范的HTTP code只可以在握手之前使用，当握手成功之后，应该使用不同的code集合。请查看规范第7.4节   </li>\n</ul>\n<h2 id=\"服务器握手返回\"><a href=\"#服务器握手返回\" class=\"headerlink\" title=\"服务器握手返回\"></a>服务器握手返回</h2><p>当服务器接受到请求时，应该发送一个相当奇怪的响应，看起来大概这个样子，不过仍然遵循HTTP规范。 请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br></pre></td></tr></table></figure>\n<p>此外，服务器可以在这里决定扩展或者子协议请求。更多详情请查看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous\" target=\"_blank\" rel=\"noopener\">Miscellaneous</a>。Sec-WebSocket-Accept 部分很有趣，服务器必须基于客户端请求的Sec-WebSocket-Key 中得到它，具体做法如下：将Sec-WebSocket-Key 和”258EAFA5-E914-47DA-95CA-C5AB0DC85B11”链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。   </p>\n<h3 id=\"提示-1\"><a href=\"#提示-1\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>因为这个看似复杂的过程存在，所以客户端不用关心服务器是否支持websocket。另外，该过程的重要性还是在于安全性，如果一个服务器将一个Websocket连接作为http请求解析的话，将会有不小的问题。   </p>\n<p>因此，如果key是”dGhlIHNhbXBsZSBub25jZQ==”，Accept将会是”s3pPLMBiTxaQ9kYGzzhZRbK+xOo=”，一旦服务器发送这些消息头，握手协议就完成了。   </p>\n<p>服务器在回复握手之前，可以发送其他的header像Set-Cookie、要求签名、重定向等。   </p>\n<h2 id=\"跟踪客户端\"><a href=\"#跟踪客户端\" class=\"headerlink\" title=\"跟踪客户端\"></a>跟踪客户端</h2><p>虽然并不直接与Websocket协议相关，但值得我们注意。服务器将会跟踪客户端的sockets，因此我们不必和已经完成握手协议的客户端再次进行握手。相同客户端的IP地址可以尝试多次连接(但是服务器可以选择拒绝，如果他们尝试多次连接以达到保存自己Denial-of-Service 踪迹的目的)  </p>\n<h2 id=\"FramesEdit-数据交换\"><a href=\"#FramesEdit-数据交换\" class=\"headerlink\" title=\"FramesEdit 数据交换\"></a>FramesEdit 数据交换</h2><p>客户端和服务器都可以在任意时间发送消息、这正是websocket的魔力所在。然而从数据帧中提取信息的过程就不那么充满魔力了。尽管所有的帧遵循相同的特定格式，从客户端发到服务器的数据通过X异或加密 (使用32位的密钥)进行处理，该规范的第五章详细描述了相关内容。</p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>每个从客户端发送到服务器的数据帧遵循下面的格式：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    帧格式:  </span><br><span class=\"line\">​​</span><br><span class=\"line\">      0                   1                   2                   3</span><br><span class=\"line\">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class=\"line\">     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class=\"line\">     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class=\"line\">     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class=\"line\">     | |1|2|3|       |K|             |                               |</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |     Extended payload length continued, if payload len == 127  |</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class=\"line\">     |                               |Masking-key, if MASK set to 1  |</span><br><span class=\"line\">     +-------------------------------+-------------------------------+</span><br><span class=\"line\">     | Masking-key (continued)       |          Payload Data         |</span><br><span class=\"line\">     +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     :                     Payload Data continued ...                :</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |                     Payload Data continued ...                |</span><br><span class=\"line\">     +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>MASK (掩码:一串二进制代码对目标字段进行位与运算，屏蔽当前的输入位。)位只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1(事实上5.1节表明，如果客户端发送未掩码处理的消息，服务器必须断开连接)当发送一个帧至客户端时，不要处理数据并且不设置mask位。下面将会阐述原因。注意：我们必须处理消息即使用一个安全的socket。RSV1-3可以被忽略，这是待扩展位。   </p>\n<p>opcode字段定义如何解析有效的数据：  </p>\n<ul>\n<li>0x0 继续处理</li>\n<li>0x1 text(必须是UTF-8编码)  </li>\n<li>0x2 二进制 和其他叫做控制代码的数据。</li>\n<li>0x3-0x7 0xB-0xF 该版本的WebSockets无意义   </li>\n</ul>\n<p>FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。   </p>\n<h2 id=\"有效编码数据长度\"><a href=\"#有效编码数据长度\" class=\"headerlink\" title=\"有效编码数据长度\"></a>有效编码数据长度</h2><p>为了解析有效编码数据，我们必须知道何时结束。这是知道有效数据长度的重要所在。不幸的是，有一些复杂。让我们分步骤来看。  </p>\n<ol>\n<li>阅读9-15位并且作为无符号整数解释，如果是小于等于125，这就是数据的长度。如果是126，请继续步骤2,如果是127请阅读，步骤3   </li>\n<li>阅读后面16位并且作为无符号整数解读，结束  </li>\n<li>阅读后面64位并且作为无符号整数解读，结束    </li>\n</ol>\n<h2 id=\"读取并反掩码数据\"><a href=\"#读取并反掩码数据\" class=\"headerlink\" title=\"读取并反掩码数据\"></a>读取并反掩码数据</h2><p>如果MASK位被设置(当然它应该被设置，对于一个从客户端到服务器的消息)，读取后4字节（即32位），即加密的key。一旦数据长度和加密key被解码，我们可以直接从socket中读取成批的字节。获取编码的数据和掩码key，将其解码，循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算，如果用js就如下所示(该规则就是加密解密的规则而已，没必要深究，大家知道如何使用就好)。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DECODED = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ENCODED.length; i++) &#123;</span><br><span class=\"line\">    DECODED[i] = ENCODED[i] ^ MASK[i % <span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以知道我们应用上解码之后的数据具体含义了。</p>\n<h2 id=\"消息分割\"><a href=\"#消息分割\" class=\"headerlink\" title=\"消息分割\"></a>消息分割</h2><p>FIN和opcode字段共同工作来讲一个消息分解为单独的帧，该过程叫做消息分割，只有在opcodes为0x0-0x2时才可用（前面也提到，当前版本其他数值无意义）。  </p>\n<p>回想一下，opcode指明了一个帧的将要做什么，如果是0x1，数据是text。如果是0x2，诗句是二进制数据。然而当其为0x0时，该帧是一个继续帧，表示服务器应该将该帧的有效数据和服务器收到的最后一帧链接起来。这是一个草图，指明了当客户端发送text消息时，第一个消息在一个单独的帧里发送，然而第二个消息却包括三个帧，服务器如何反应。FIN和opcode细节仅仅对客户端展示。看一下下面的例子应该会更容易理解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client: FIN=1, opcode=0x1, msg=&quot;hello&quot;</span><br><span class=\"line\">Server: (消息传输过程完成) Hi.</span><br><span class=\"line\">Client: FIN=0, opcode=0x1, msg=&quot;and a&quot;</span><br><span class=\"line\">Server: (监听，新的消息包含开始的文本)</span><br><span class=\"line\">Client: FIN=0, opcode=0x0, msg=&quot;happy new&quot;</span><br><span class=\"line\">Server: (监听，有效数据与上面的消息拼接)</span><br><span class=\"line\">Client: FIN=1, opcode=0x0, msg=&quot;year!&quot;</span><br><span class=\"line\">Server: (消息传输完成) Happy new year to you too!</span><br></pre></td></tr></table></figure>\n<p>注意:第一帧包括一个完全的消息(FIN=1并且opcode!=0x0)，因此当服务器发现结束时可以返回。第二帧有效数据为text(opcode=0x1)，但是完整的消息没有到达(FIN=0)。该消息所有剩下的部分通过继续帧发送(opcode=0x0)，并且最后以帧通过FIN=1表明身份。  </p>\n<h2 id=\"WebSockets-的心跳：ping和pong\"><a href=\"#WebSockets-的心跳：ping和pong\" class=\"headerlink\" title=\"WebSockets 的心跳：ping和pong\"></a>WebSockets 的心跳：ping和pong</h2><p>在握手接受之后的任意点，不论是客户端还是服务器都可以选择发送ping给另一部分。当ping被接收时，接收方必须尽可能的返回一个pong。我们可以用该方式来确保连接依然有效。  </p>\n<p>一个ping或者pong只是一个规则的帧，但是是控制帧，Pings的opcode为0x9，pong是0xA。当我们得到ping时，返回具有完全相同有效数据的pong。(对ping和pong而言，最大有效数据长度是125)我们可能在没有发送ping的情况下，得到一个pong。这种情况请忽略。</p>\n<p>在发送pong之前，如果我们接收到不止一个ping，只需回应一个pong即可。  </p>\n<h2 id=\"关闭连接\"><a href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"></a>关闭连接</h2><p>要关闭客户端和服务器之间的连接，我们可以发送一个包含特定控制队列的数据的控制帧来开始关闭的握手协议。当接收到该帧时，另一方发送一个关闭帧作为回应。然后前者会关闭连接。关闭连接之后接收到的数据都会被丢弃。</p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><p>WebSocket 扩展和子协议在握手过程中通过headers进行约定。有时扩展和子协议太近似了以致于难以分别。最基本的区别是，扩展控制websocket 帧并且修改有效数据。然而子协议构成websocket有效数据并且从不修改任何事物。扩展是可选的广义的，子协议是必须的局限性的。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>将扩展看作压缩一个文件在发送之前，无论你如何做，你将发送相同的数据只不过帧不同而已。收件人最终将会受到与你本地拷贝相同的数据，不过以不同方式发送。这就是扩展做的事情。websockets定义了一个协议和基本的方式去发送数据，然而扩展例如压缩可以以更短的帧来阿松相同的数据。 </p>\n<h3 id=\"子协议\"><a href=\"#子协议\" class=\"headerlink\" title=\"子协议\"></a>子协议</h3><p>将子协议看作定做的xml表或者文档类型说明。你在使用XML和它的语法，但是你被限制于你同意的结构。WebSocket子协议就是如此。他们不介绍其他一些华丽的东西，仅仅建立结构，像一个文档类型和表一样，两个部分(client &amp; server)都同意该协议,和文档类型和表不同，子协议由服务器实现并且客户端不能对外引用。<br>一个客户端必须请求特定的子协议，为了达到目的，将会发送一些像下面的内容作为原始握手的一部分。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /chat HTTP/1.1</span><br><span class=\"line\">...</span><br><span class=\"line\">Sec-WebSocket-Protocol: soap, wamp</span><br><span class=\"line\">//或者等价的写法   </span><br><span class=\"line\">...</span><br><span class=\"line\">Sec-WebSocket-Protocol: soap</span><br><span class=\"line\">Sec-WebSocket-Protocol: wamp</span><br></pre></td></tr></table></figure>\n<p>现在，服务器必须选择客户端建议并且支持的一种协议。如果多余一个，发送客户端发送过来的第一个。想象我们的服务器可以使用soap和wamp中的一个，然后，返回的握手中将会发送如下形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sec-WebSocket-Protocol: soap</span><br></pre></td></tr></table></figure>\n<p>服务器不能发送超过一个的Sec-Websocket-Protocol消息头，如果服务器不想使用任一个子协议，应该不发送Sec-WebSocket-Protocol 消息头。发送一个空白的消息头是错误的。客户端可能会关闭连接如果不能获得期望的子协议。    </p>\n<p>如果我们希望我们的服务器遵守一定的子协议，自然地在我们的服务器需要额外的代码。想象我们使用一个子协议json，基于该子协议，所有的数据将会作为JSON传递，如果一个客户端征求子协议并且服务器想使用它，服务你需要有一个JSON解析。实话实说，将会有一个工具库，但是服务器也要需要传递数据。</p>\n<p>为了避免名称冲突，推荐选用domain的一部分作为子协议的名称。如果我们开发一个使用特定格式的聊天app，我们可能使用这样的名字:Sec-WebSocket-Protocol: chat.example.com  注意，这不是必须的。仅仅是一个可选的惯例，我们可以使用我们想用的任意字符。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>翻译这篇文档的初衷是看到关于websocket的中文大部分都是客户端相关的内容，自己又对服务器端的实现感兴趣，没有找到合适的资料，就只好自己阅读下英文，本着提高自己的目的将其翻译下来，希望对其他同学有所帮助，<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/tree/master/src/websocket\" target=\"_blank\" rel=\"noopener\">原文查看</a> 。后面请期待node实现websocket服务器的实践篇。</p>\n<h2 id=\"源文档出处\"><a href=\"#源文档出处\" class=\"headerlink\" title=\"源文档出处\"></a>源文档出处</h2><p>翻译自MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" target=\"_blank\" rel=\"noopener\">Writing WebSocket servers</a></p>"},{"title":"实现一个websocket服务器-node","date":"2017-11-21T16:00:00.000Z","_content":"早点时候翻译了篇[实现一个websocket服务器-理论篇 ](https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/README.md)，简单介绍了下理论基础，本来打算放在一起，但是感觉太长了大家可能都看不下去。不过发现如果拆开的话，还是不可避免的要提及理论部分。用到的地方就简要回顾一下好了。\n<!-- more -->\n## Websockt 基本通信流程\n在具体代码实现之前，我们需要大概理一下思路。回顾一下websocket的理论部分。简单的websocket流程如下(这里就不谈详细的过程了，大概描述一下)   \n\n1. 客户端发送握手请求\n2. 服务器响应、处理握手并返回 \n3. 客户端验证通过后，发送数据\n4. 服务器接收、处理数据，然后返回给客户端\n5. 客户端接收服务器的推送  \n\n作为一个服务器而言，我们主要的精力需要放在2，4这两个步骤。\n## 响应并处理握手   \n\n虽然websocket可以实现服务器推送，前提在于该连接已经建立。客户端仍然需要发起一个Websocket握手请求。 既然要响应该握手请求，我们需要了解一下该请求。\n### 客户端握手请求\n\n客户端的握手请求是一个标准的HTTP请求，大概像下面的例子。   \n \n    \n```\nGET / HTTP/1.1  //HTTP版本必须1.1及以上，请求方式为GET\nHost: localhost:8081 //本地项目\nConnection: Upgrade \nPragma: no-cache\nCache-Control: no-cache\nUpgrade: websocket //指定websocket协议\nOrigin: http://192.168.132.170:8000\nSec-WebSocket-Version: 13 //版本\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\nCookie: optimizelyEndUserId=oeu1505722530441r0.5993643212774391; _ga=GA1.1.557695983.1505722531\nSec-WebSocket-Key: /2R6uuzPqLT/6z8fnZfN3w==   //握手返回基于该密钥\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\n```\n上面列出了实际例子中的请求头，内容由浏览器生成，需要注意的部分如下。  \n\n* HTTP版本必须1.1及以上，请求方式为GET\n* Connection: Upgrade  \n* Upgrade: websocket //指定websocket  \n* Sec-WebSocket-Key  密钥 服务器处理握手的依据 \n\n  \n我们服务器处理握手时需要关注的就是上面四点。\n   \n### 响应握手请求\n\n服务器根据是否websocket的必须请求头，分下面两种情况：  \n  \n1. 不满足，作为http请求来响应。\n2. 满足，解析处理按照websocket规定的数据格式来响应 \n\n#### 返回格式  \n\n```\n    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n```\n请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 \n\n这里的Sec-WebSocket-Accept 就是基于请求头中Sec-WebSocket-Key来生成。规则如下：  \nSec-WebSocket-Key 和\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。\n代码如下：\n  \n```js\n// 指定拼接字符\nvar ws_key = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n// 生成相应key\nfunction getAccpectKey(rSWKey) {\n    return crypto.createHash('sha1').update(rSWKey + ws_key).digest('base64')\n}\nfunction handShake(socket, headers) {\n    var reqSWKey = headers['Sec-WebSocket-Key'],\n        resSWKey = getAccpectKey(reqSWKey)\n    socket.write('HTTP/1.1 101 Switching Protocols\\r\\n');\n    socket.write('Upgrade: websocket\\r\\n');\n    socket.write('Connection: Upgrade\\r\\n');\n    socket.write('Sec-WebSocket-Accept: ' + resSWKey + '\\r\\n');\n    socket.write('\\r\\n');\n}\n```\n\n这样我们的握手协议就算完成了，此时会触发客户端websocket的onopen事件，即websocket打开，可以进行通信\n\n### 解析数据  \n#### 客户端发送帧格式\n握手协议完成之后，我们就该解析数据了，还是要把这张帧格式拿出来。  \n\n```  \n    帧格式:  \n​​\n      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n\n```\n\n每个从客户端发送到服务器的数据帧都遵循上面的格式。  \n\n1. MASK位：只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1   \n\n2. opcode字段定义如何解析有效的数据：  \n    * 0x0 继续处理\n    * 0x1 text(必须是UTF-8编码)  \n    * 0x2 二进制 和其他叫做控制代码的数据。\n    * 0x3-0x7 0xB-0xF 该版本的WebSockets无意义   \n\n3. FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。\n4. Payload len：有效数据长度  \n    * Payload len<126, 即为真实长度\n    * 126,说明真实长度大于125，后面2个字节的值为真实长度\n    * 127,真实长度大于65535，后面8字节值为真实长度 \n      \n\n#### 解析数据  \n所谓解析数据，肯定是基于上面的格式按照一定规则来进行处理。下面就是处理的规则。  \n  \n1. 获取有效数据长度  \n2. 获取掩码并依据规则进行反序列化数据\n\n直接看代码应该更加清晰。    \n\n```js\n// 解析接受的数据帧\nfunction decodeFrame(buffer) {\n    /**\n     * >>> 7 右移操作，即字节右移7位，目的是为了即只取第一位的值\n     * 10010030  ====>   00000001\n     * & 按位与  同1为1    \n     * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值\n     * 11011000 & 00001111  ===》  00001000\n     *  \n     */\n    var fBite = buffer[0],\n        /**\n         * 获取Fin的值，\n         * 1传输结束\n         * 0 继续监听 \n         */\n        Fin = fBite >>> 7,\n        /**\n         * 获取opcode的值，opcode为fBite的4-7位\n         * & 按位与  同1为1    \n         * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值\n         */\n        opcode = buffer[0] & 15,\n        /**\n         * 获取有效数据长度 \n         */\n        len = buffer[1] & 127,\n        // 是否进行掩码处理，客户端请求必须为1\n        Mask = buffer[1] >>> 7,\n        maskKey = null\n    // 获取数据长度\n    //真实长度大于125，读取后面2字节\n    if (len == 126) {\n        len = buffer.readUInt16BE(2)\n    } else if (len == 127) {\n        // 真实长度大于65535，读取后面8字节\n        len = buffer.readUInt64BE(2)\n    }\n    // 判断是否进行掩码处理\n    Mask && (maskKey = buffer.slice(2,5))\n    /**\n     * 反掩码处理 \n     * 循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算\n     */\n    if(Mask){\n        for (var i = 2;i<len ;i++){\n            buffer[i] = maskKey[(i - 2) % 4] ^ buffer[i];\n        }\n    }\n    var data = buffer.slice(2)\n    return {\n        Fin:Fin,\n        opcode:opcode,\n        data:data\n    }\n}\n```    \n\n#### 发送数据\n处理完接收到的数据之后，下面就是发送响应了。 \n响应数据不需要进行掩码运算，只需要根据帧的格式(即上面的帧)，将数据进行组装就好\n\n```js\n// 加密发送数据\nfunction encodeFrame(data){\n    var len = Buffer.byteLength(data),\n        // 2的64位\n        payload_len = len > 65535 ?10:(len > 125 ? 4 : 2),\n        buf = new Buffer(len+payload_len)\n    /**\n     * 首个字节，0x81 = 10000001 \n     *对应的Fin 为1 opcode为001 mask 为0 \n     * 即表明 返回数据为txt文本已经结束并未使用掩码处理\n     */\n    buf[0] = 0x81  \n    /**\n     * 根据真实数据长度设置payload_len位\n     */        \n    if(payload_len == 2){\n        buf[1] = len\n    }else if(payload_len == 4){\n        buf[1] = 126;\n        buf.writeUInt16BE(payload_len, 2);\n    }else {\n        buf[1] = 127;\n        buf.writeUInt32BE(payload_len >>> 32, 2);\n        buf.writeUInt32BE(payload_len & 0xFFFFFFFF, 6);\n    }  \n    buf.write(data, payload_len);\n    return buf;\n}    \n```    \n\n#### 心跳响应  \n当收到opcode 为 9时即ping请求，直接返回具有完全相同有效数据的pong即可。\nPings的opcode为0x9，pong是0xA，所以可以直接如下   \n\n```js\n// ping请求\nif(opcode == 9){\n   console.log(\"ping相应\");\n   /**\n    * ping pong最大长度为125，所以可以直接拼接\n    * 前两位数据为10001010+数据长度\n    * 即传输完毕的pong响应，数据肯定小于125\n    */\n    socke.write(Buffer.concat([new Buffer([0x8A, data.length]), data]))\n}\n```  \n\n## 结束语 \n至此，一个websocket服务器的简单实现就完成了[更多细节请查看](https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/ws.js)。当然成熟的websocket库处理各种情况是比较完善的，更推荐大家使用，这里只是简单实践，更多的是满足一下自己的好奇心，知其然，也要知其所以然，希望大家共同学习和进步\n","source":"_posts/websocket/node.md","raw":"---\ntitle: 实现一个websocket服务器-node  \ndate: 2017-11-22\n---\n早点时候翻译了篇[实现一个websocket服务器-理论篇 ](https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/README.md)，简单介绍了下理论基础，本来打算放在一起，但是感觉太长了大家可能都看不下去。不过发现如果拆开的话，还是不可避免的要提及理论部分。用到的地方就简要回顾一下好了。\n<!-- more -->\n## Websockt 基本通信流程\n在具体代码实现之前，我们需要大概理一下思路。回顾一下websocket的理论部分。简单的websocket流程如下(这里就不谈详细的过程了，大概描述一下)   \n\n1. 客户端发送握手请求\n2. 服务器响应、处理握手并返回 \n3. 客户端验证通过后，发送数据\n4. 服务器接收、处理数据，然后返回给客户端\n5. 客户端接收服务器的推送  \n\n作为一个服务器而言，我们主要的精力需要放在2，4这两个步骤。\n## 响应并处理握手   \n\n虽然websocket可以实现服务器推送，前提在于该连接已经建立。客户端仍然需要发起一个Websocket握手请求。 既然要响应该握手请求，我们需要了解一下该请求。\n### 客户端握手请求\n\n客户端的握手请求是一个标准的HTTP请求，大概像下面的例子。   \n \n    \n```\nGET / HTTP/1.1  //HTTP版本必须1.1及以上，请求方式为GET\nHost: localhost:8081 //本地项目\nConnection: Upgrade \nPragma: no-cache\nCache-Control: no-cache\nUpgrade: websocket //指定websocket协议\nOrigin: http://192.168.132.170:8000\nSec-WebSocket-Version: 13 //版本\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\nCookie: optimizelyEndUserId=oeu1505722530441r0.5993643212774391; _ga=GA1.1.557695983.1505722531\nSec-WebSocket-Key: /2R6uuzPqLT/6z8fnZfN3w==   //握手返回基于该密钥\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\n```\n上面列出了实际例子中的请求头，内容由浏览器生成，需要注意的部分如下。  \n\n* HTTP版本必须1.1及以上，请求方式为GET\n* Connection: Upgrade  \n* Upgrade: websocket //指定websocket  \n* Sec-WebSocket-Key  密钥 服务器处理握手的依据 \n\n  \n我们服务器处理握手时需要关注的就是上面四点。\n   \n### 响应握手请求\n\n服务器根据是否websocket的必须请求头，分下面两种情况：  \n  \n1. 不满足，作为http请求来响应。\n2. 满足，解析处理按照websocket规定的数据格式来响应 \n\n#### 返回格式  \n\n```\n    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n```\n请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 \n\n这里的Sec-WebSocket-Accept 就是基于请求头中Sec-WebSocket-Key来生成。规则如下：  \nSec-WebSocket-Key 和\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。\n代码如下：\n  \n```js\n// 指定拼接字符\nvar ws_key = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n// 生成相应key\nfunction getAccpectKey(rSWKey) {\n    return crypto.createHash('sha1').update(rSWKey + ws_key).digest('base64')\n}\nfunction handShake(socket, headers) {\n    var reqSWKey = headers['Sec-WebSocket-Key'],\n        resSWKey = getAccpectKey(reqSWKey)\n    socket.write('HTTP/1.1 101 Switching Protocols\\r\\n');\n    socket.write('Upgrade: websocket\\r\\n');\n    socket.write('Connection: Upgrade\\r\\n');\n    socket.write('Sec-WebSocket-Accept: ' + resSWKey + '\\r\\n');\n    socket.write('\\r\\n');\n}\n```\n\n这样我们的握手协议就算完成了，此时会触发客户端websocket的onopen事件，即websocket打开，可以进行通信\n\n### 解析数据  \n#### 客户端发送帧格式\n握手协议完成之后，我们就该解析数据了，还是要把这张帧格式拿出来。  \n\n```  \n    帧格式:  \n​​\n      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n\n```\n\n每个从客户端发送到服务器的数据帧都遵循上面的格式。  \n\n1. MASK位：只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1   \n\n2. opcode字段定义如何解析有效的数据：  \n    * 0x0 继续处理\n    * 0x1 text(必须是UTF-8编码)  \n    * 0x2 二进制 和其他叫做控制代码的数据。\n    * 0x3-0x7 0xB-0xF 该版本的WebSockets无意义   \n\n3. FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。\n4. Payload len：有效数据长度  \n    * Payload len<126, 即为真实长度\n    * 126,说明真实长度大于125，后面2个字节的值为真实长度\n    * 127,真实长度大于65535，后面8字节值为真实长度 \n      \n\n#### 解析数据  \n所谓解析数据，肯定是基于上面的格式按照一定规则来进行处理。下面就是处理的规则。  \n  \n1. 获取有效数据长度  \n2. 获取掩码并依据规则进行反序列化数据\n\n直接看代码应该更加清晰。    \n\n```js\n// 解析接受的数据帧\nfunction decodeFrame(buffer) {\n    /**\n     * >>> 7 右移操作，即字节右移7位，目的是为了即只取第一位的值\n     * 10010030  ====>   00000001\n     * & 按位与  同1为1    \n     * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值\n     * 11011000 & 00001111  ===》  00001000\n     *  \n     */\n    var fBite = buffer[0],\n        /**\n         * 获取Fin的值，\n         * 1传输结束\n         * 0 继续监听 \n         */\n        Fin = fBite >>> 7,\n        /**\n         * 获取opcode的值，opcode为fBite的4-7位\n         * & 按位与  同1为1    \n         * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值\n         */\n        opcode = buffer[0] & 15,\n        /**\n         * 获取有效数据长度 \n         */\n        len = buffer[1] & 127,\n        // 是否进行掩码处理，客户端请求必须为1\n        Mask = buffer[1] >>> 7,\n        maskKey = null\n    // 获取数据长度\n    //真实长度大于125，读取后面2字节\n    if (len == 126) {\n        len = buffer.readUInt16BE(2)\n    } else if (len == 127) {\n        // 真实长度大于65535，读取后面8字节\n        len = buffer.readUInt64BE(2)\n    }\n    // 判断是否进行掩码处理\n    Mask && (maskKey = buffer.slice(2,5))\n    /**\n     * 反掩码处理 \n     * 循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算\n     */\n    if(Mask){\n        for (var i = 2;i<len ;i++){\n            buffer[i] = maskKey[(i - 2) % 4] ^ buffer[i];\n        }\n    }\n    var data = buffer.slice(2)\n    return {\n        Fin:Fin,\n        opcode:opcode,\n        data:data\n    }\n}\n```    \n\n#### 发送数据\n处理完接收到的数据之后，下面就是发送响应了。 \n响应数据不需要进行掩码运算，只需要根据帧的格式(即上面的帧)，将数据进行组装就好\n\n```js\n// 加密发送数据\nfunction encodeFrame(data){\n    var len = Buffer.byteLength(data),\n        // 2的64位\n        payload_len = len > 65535 ?10:(len > 125 ? 4 : 2),\n        buf = new Buffer(len+payload_len)\n    /**\n     * 首个字节，0x81 = 10000001 \n     *对应的Fin 为1 opcode为001 mask 为0 \n     * 即表明 返回数据为txt文本已经结束并未使用掩码处理\n     */\n    buf[0] = 0x81  \n    /**\n     * 根据真实数据长度设置payload_len位\n     */        \n    if(payload_len == 2){\n        buf[1] = len\n    }else if(payload_len == 4){\n        buf[1] = 126;\n        buf.writeUInt16BE(payload_len, 2);\n    }else {\n        buf[1] = 127;\n        buf.writeUInt32BE(payload_len >>> 32, 2);\n        buf.writeUInt32BE(payload_len & 0xFFFFFFFF, 6);\n    }  \n    buf.write(data, payload_len);\n    return buf;\n}    \n```    \n\n#### 心跳响应  \n当收到opcode 为 9时即ping请求，直接返回具有完全相同有效数据的pong即可。\nPings的opcode为0x9，pong是0xA，所以可以直接如下   \n\n```js\n// ping请求\nif(opcode == 9){\n   console.log(\"ping相应\");\n   /**\n    * ping pong最大长度为125，所以可以直接拼接\n    * 前两位数据为10001010+数据长度\n    * 即传输完毕的pong响应，数据肯定小于125\n    */\n    socke.write(Buffer.concat([new Buffer([0x8A, data.length]), data]))\n}\n```  \n\n## 结束语 \n至此，一个websocket服务器的简单实现就完成了[更多细节请查看](https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/ws.js)。当然成熟的websocket库处理各种情况是比较完善的，更推荐大家使用，这里只是简单实践，更多的是满足一下自己的好奇心，知其然，也要知其所以然，希望大家共同学习和进步\n","slug":"websocket/node","published":1,"updated":"2017-12-15T13:02:08.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhjw7dom000hnl929177tomn","content":"<p>早点时候翻译了篇<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/README.md\" target=\"_blank\" rel=\"noopener\">实现一个websocket服务器-理论篇 </a>，简单介绍了下理论基础，本来打算放在一起，但是感觉太长了大家可能都看不下去。不过发现如果拆开的话，还是不可避免的要提及理论部分。用到的地方就简要回顾一下好了。<br><a id=\"more\"></a></p>\n<h2 id=\"Websockt-基本通信流程\"><a href=\"#Websockt-基本通信流程\" class=\"headerlink\" title=\"Websockt 基本通信流程\"></a>Websockt 基本通信流程</h2><p>在具体代码实现之前，我们需要大概理一下思路。回顾一下websocket的理论部分。简单的websocket流程如下(这里就不谈详细的过程了，大概描述一下)   </p>\n<ol>\n<li>客户端发送握手请求</li>\n<li>服务器响应、处理握手并返回 </li>\n<li>客户端验证通过后，发送数据</li>\n<li>服务器接收、处理数据，然后返回给客户端</li>\n<li>客户端接收服务器的推送  </li>\n</ol>\n<p>作为一个服务器而言，我们主要的精力需要放在2，4这两个步骤。</p>\n<h2 id=\"响应并处理握手\"><a href=\"#响应并处理握手\" class=\"headerlink\" title=\"响应并处理握手\"></a>响应并处理握手</h2><p>虽然websocket可以实现服务器推送，前提在于该连接已经建立。客户端仍然需要发起一个Websocket握手请求。 既然要响应该握手请求，我们需要了解一下该请求。</p>\n<h3 id=\"客户端握手请求\"><a href=\"#客户端握手请求\" class=\"headerlink\" title=\"客户端握手请求\"></a>客户端握手请求</h3><p>客户端的握手请求是一个标准的HTTP请求，大概像下面的例子。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1  //HTTP版本必须1.1及以上，请求方式为GET</span><br><span class=\"line\">Host: localhost:8081 //本地项目</span><br><span class=\"line\">Connection: Upgrade </span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Upgrade: websocket //指定websocket协议</span><br><span class=\"line\">Origin: http://192.168.132.170:8000</span><br><span class=\"line\">Sec-WebSocket-Version: 13 //版本</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class=\"line\">Cookie: optimizelyEndUserId=oeu1505722530441r0.5993643212774391; _ga=GA1.1.557695983.1505722531</span><br><span class=\"line\">Sec-WebSocket-Key: /2R6uuzPqLT/6z8fnZfN3w==   //握手返回基于该密钥</span><br><span class=\"line\">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span><br></pre></td></tr></table></figure>\n<p>上面列出了实际例子中的请求头，内容由浏览器生成，需要注意的部分如下。  </p>\n<ul>\n<li>HTTP版本必须1.1及以上，请求方式为GET</li>\n<li>Connection: Upgrade  </li>\n<li>Upgrade: websocket //指定websocket  </li>\n<li>Sec-WebSocket-Key  密钥 服务器处理握手的依据 </li>\n</ul>\n<p>我们服务器处理握手时需要关注的就是上面四点。</p>\n<h3 id=\"响应握手请求\"><a href=\"#响应握手请求\" class=\"headerlink\" title=\"响应握手请求\"></a>响应握手请求</h3><p>服务器根据是否websocket的必须请求头，分下面两种情况：  </p>\n<ol>\n<li>不满足，作为http请求来响应。</li>\n<li>满足，解析处理按照websocket规定的数据格式来响应 </li>\n</ol>\n<h4 id=\"返回格式\"><a href=\"#返回格式\" class=\"headerlink\" title=\"返回格式\"></a>返回格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br></pre></td></tr></table></figure>\n<p>请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 </p>\n<p>这里的Sec-WebSocket-Accept 就是基于请求头中Sec-WebSocket-Key来生成。规则如下：<br>Sec-WebSocket-Key 和”258EAFA5-E914-47DA-95CA-C5AB0DC85B11”链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。<br>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定拼接字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ws_key = <span class=\"string\">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 生成相应key</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAccpectKey</span>(<span class=\"params\">rSWKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> crypto.createHash(<span class=\"string\">'sha1'</span>).update(rSWKey + ws_key).digest(<span class=\"string\">'base64'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handShake</span>(<span class=\"params\">socket, headers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reqSWKey = headers[<span class=\"string\">'Sec-WebSocket-Key'</span>],</span><br><span class=\"line\">        resSWKey = getAccpectKey(reqSWKey)</span><br><span class=\"line\">    socket.write(<span class=\"string\">'HTTP/1.1 101 Switching Protocols\\r\\n'</span>);</span><br><span class=\"line\">    socket.write(<span class=\"string\">'Upgrade: websocket\\r\\n'</span>);</span><br><span class=\"line\">    socket.write(<span class=\"string\">'Connection: Upgrade\\r\\n'</span>);</span><br><span class=\"line\">    socket.write(<span class=\"string\">'Sec-WebSocket-Accept: '</span> + resSWKey + <span class=\"string\">'\\r\\n'</span>);</span><br><span class=\"line\">    socket.write(<span class=\"string\">'\\r\\n'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们的握手协议就算完成了，此时会触发客户端websocket的onopen事件，即websocket打开，可以进行通信</p>\n<h3 id=\"解析数据\"><a href=\"#解析数据\" class=\"headerlink\" title=\"解析数据\"></a>解析数据</h3><h4 id=\"客户端发送帧格式\"><a href=\"#客户端发送帧格式\" class=\"headerlink\" title=\"客户端发送帧格式\"></a>客户端发送帧格式</h4><p>握手协议完成之后，我们就该解析数据了，还是要把这张帧格式拿出来。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    帧格式:  </span><br><span class=\"line\">​​</span><br><span class=\"line\">      0                   1                   2                   3</span><br><span class=\"line\">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class=\"line\">     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class=\"line\">     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class=\"line\">     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class=\"line\">     | |1|2|3|       |K|             |                               |</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |     Extended payload length continued, if payload len == 127  |</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class=\"line\">     |                               |Masking-key, if MASK set to 1  |</span><br><span class=\"line\">     +-------------------------------+-------------------------------+</span><br><span class=\"line\">     | Masking-key (continued)       |          Payload Data         |</span><br><span class=\"line\">     +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     :                     Payload Data continued ...                :</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |                     Payload Data continued ...                |</span><br><span class=\"line\">     +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>每个从客户端发送到服务器的数据帧都遵循上面的格式。  </p>\n<ol>\n<li><p>MASK位：只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1   </p>\n</li>\n<li><p>opcode字段定义如何解析有效的数据：  </p>\n<ul>\n<li>0x0 继续处理</li>\n<li>0x1 text(必须是UTF-8编码)  </li>\n<li>0x2 二进制 和其他叫做控制代码的数据。</li>\n<li>0x3-0x7 0xB-0xF 该版本的WebSockets无意义   </li>\n</ul>\n</li>\n<li><p>FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。</p>\n</li>\n<li>Payload len：有效数据长度  <ul>\n<li>Payload len&lt;126, 即为真实长度</li>\n<li>126,说明真实长度大于125，后面2个字节的值为真实长度</li>\n<li>127,真实长度大于65535，后面8字节值为真实长度 </li>\n</ul>\n</li>\n</ol>\n<h4 id=\"解析数据-1\"><a href=\"#解析数据-1\" class=\"headerlink\" title=\"解析数据\"></a>解析数据</h4><p>所谓解析数据，肯定是基于上面的格式按照一定规则来进行处理。下面就是处理的规则。  </p>\n<ol>\n<li>获取有效数据长度  </li>\n<li>获取掩码并依据规则进行反序列化数据</li>\n</ol>\n<p>直接看代码应该更加清晰。    </p>\n<pre><code class=\"js\"><span class=\"comment\">// 解析接受的数据帧</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decodeFrame</span>(<span class=\"params\">buffer</span>) </span>{\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * &gt;&gt;&gt; 7 右移操作，即字节右移7位，目的是为了即只取第一位的值</span>\n<span class=\"comment\">     * 10010030  ====&gt;   00000001</span>\n<span class=\"comment\">     * &amp; 按位与  同1为1    </span>\n<span class=\"comment\">     * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值</span>\n<span class=\"comment\">     * 11011000 &amp; 00001111  ===》  00001000</span>\n<span class=\"comment\">     *  </span>\n<span class=\"comment\">     */</span>\n    <span class=\"keyword\">var</span> fBite = buffer[<span class=\"number\">0</span>],\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取Fin的值，</span>\n<span class=\"comment\">         * 1传输结束</span>\n<span class=\"comment\">         * 0 继续监听 </span>\n<span class=\"comment\">         */</span>\n        Fin = fBite &gt;&gt;&gt; <span class=\"number\">7</span>,\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取opcode的值，opcode为fBite的4-7位</span>\n<span class=\"comment\">         * &amp; 按位与  同1为1    </span>\n<span class=\"comment\">         * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值</span>\n<span class=\"comment\">         */</span>\n        opcode = buffer[<span class=\"number\">0</span>] &amp; <span class=\"number\">15</span>,\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取有效数据长度 </span>\n<span class=\"comment\">         */</span>\n        len = buffer[<span class=\"number\">1</span>] &amp; <span class=\"number\">127</span>,\n        <span class=\"comment\">// 是否进行掩码处理，客户端请求必须为1</span>\n        Mask = buffer[<span class=\"number\">1</span>] &gt;&gt;&gt; <span class=\"number\">7</span>,\n        maskKey = <span class=\"literal\">null</span>\n    <span class=\"comment\">// 获取数据长度</span>\n    <span class=\"comment\">//真实长度大于125，读取后面2字节</span>\n    <span class=\"keyword\">if</span> (len == <span class=\"number\">126</span>) {\n        len = buffer.readUInt16BE(<span class=\"number\">2</span>)\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">127</span>) {\n        <span class=\"comment\">// 真实长度大于65535，读取后面8字节</span>\n        len = buffer.readUInt64BE(<span class=\"number\">2</span>)\n    }\n    <span class=\"comment\">// 判断是否进行掩码处理</span>\n    Mask &amp;&amp; (maskKey = buffer.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>))\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 反掩码处理 </span>\n<span class=\"comment\">     * 循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算</span>\n<span class=\"comment\">     */</span>\n    <span class=\"keyword\">if</span>(Mask){\n        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;i&lt;len ;i++){\n            buffer[i] = maskKey[(i - <span class=\"number\">2</span>) % <span class=\"number\">4</span>] ^ buffer[i];\n        }\n    }\n    <span class=\"keyword\">var</span> data = buffer.slice(<span class=\"number\">2</span>)\n    <span class=\"keyword\">return</span> {\n        Fin:Fin,\n        opcode:opcode,\n        data:data\n    }\n}\n</code></pre>\n<h4 id=\"发送数据\"><a href=\"#发送数据\" class=\"headerlink\" title=\"发送数据\"></a>发送数据</h4><p>处理完接收到的数据之后，下面就是发送响应了。<br>响应数据不需要进行掩码运算，只需要根据帧的格式(即上面的帧)，将数据进行组装就好</p>\n<pre><code class=\"js\"><span class=\"comment\">// 加密发送数据</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encodeFrame</span>(<span class=\"params\">data</span>)</span>{\n    <span class=\"keyword\">var</span> len = Buffer.byteLength(data),\n        <span class=\"comment\">// 2的64位</span>\n        payload_len = len &gt; <span class=\"number\">65535</span> ?<span class=\"number\">10</span>:(len &gt; <span class=\"number\">125</span> ? <span class=\"number\">4</span> : <span class=\"number\">2</span>),\n        buf = <span class=\"keyword\">new</span> Buffer(len+payload_len)\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 首个字节，0x81 = 10000001 </span>\n<span class=\"comment\">     *对应的Fin 为1 opcode为001 mask 为0 </span>\n<span class=\"comment\">     * 即表明 返回数据为txt文本已经结束并未使用掩码处理</span>\n<span class=\"comment\">     */</span>\n    buf[<span class=\"number\">0</span>] = <span class=\"number\">0x81</span>  \n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 根据真实数据长度设置payload_len位</span>\n<span class=\"comment\">     */</span>        \n    <span class=\"keyword\">if</span>(payload_len == <span class=\"number\">2</span>){\n        buf[<span class=\"number\">1</span>] = len\n    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(payload_len == <span class=\"number\">4</span>){\n        buf[<span class=\"number\">1</span>] = <span class=\"number\">126</span>;\n        buf.writeUInt16BE(payload_len, <span class=\"number\">2</span>);\n    }<span class=\"keyword\">else</span> {\n        buf[<span class=\"number\">1</span>] = <span class=\"number\">127</span>;\n        buf.writeUInt32BE(payload_len &gt;&gt;&gt; <span class=\"number\">32</span>, <span class=\"number\">2</span>);\n        buf.writeUInt32BE(payload_len &amp; <span class=\"number\">0xFFFFFFFF</span>, <span class=\"number\">6</span>);\n    }  \n    buf.write(data, payload_len);\n    <span class=\"keyword\">return</span> buf;\n}\n</code></pre>\n<h4 id=\"心跳响应\"><a href=\"#心跳响应\" class=\"headerlink\" title=\"心跳响应\"></a>心跳响应</h4><p>当收到opcode 为 9时即ping请求，直接返回具有完全相同有效数据的pong即可。<br>Pings的opcode为0x9，pong是0xA，所以可以直接如下   </p>\n<pre><code class=\"js\"><span class=\"comment\">// ping请求</span>\n<span class=\"keyword\">if</span>(opcode == <span class=\"number\">9</span>){\n   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ping相应\"</span>);\n   <span class=\"comment\">/**</span>\n<span class=\"comment\">    * ping pong最大长度为125，所以可以直接拼接</span>\n<span class=\"comment\">    * 前两位数据为10001010+数据长度</span>\n<span class=\"comment\">    * 即传输完毕的pong响应，数据肯定小于125</span>\n<span class=\"comment\">    */</span>\n    socke.write(Buffer.concat([<span class=\"keyword\">new</span> Buffer([<span class=\"number\">0x8A</span>, data.length]), data]))\n}\n</code></pre>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>至此，一个websocket服务器的简单实现就完成了<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/ws.js\" target=\"_blank\" rel=\"noopener\">更多细节请查看</a>。当然成熟的websocket库处理各种情况是比较完善的，更推荐大家使用，这里只是简单实践，更多的是满足一下自己的好奇心，知其然，也要知其所以然，希望大家共同学习和进步</p>\n","site":{"data":{}},"excerpt":"<p>早点时候翻译了篇<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/README.md\" target=\"_blank\" rel=\"noopener\">实现一个websocket服务器-理论篇 </a>，简单介绍了下理论基础，本来打算放在一起，但是感觉太长了大家可能都看不下去。不过发现如果拆开的话，还是不可避免的要提及理论部分。用到的地方就简要回顾一下好了。<br>","more":"</p>\n<h2 id=\"Websockt-基本通信流程\"><a href=\"#Websockt-基本通信流程\" class=\"headerlink\" title=\"Websockt 基本通信流程\"></a>Websockt 基本通信流程</h2><p>在具体代码实现之前，我们需要大概理一下思路。回顾一下websocket的理论部分。简单的websocket流程如下(这里就不谈详细的过程了，大概描述一下)   </p>\n<ol>\n<li>客户端发送握手请求</li>\n<li>服务器响应、处理握手并返回 </li>\n<li>客户端验证通过后，发送数据</li>\n<li>服务器接收、处理数据，然后返回给客户端</li>\n<li>客户端接收服务器的推送  </li>\n</ol>\n<p>作为一个服务器而言，我们主要的精力需要放在2，4这两个步骤。</p>\n<h2 id=\"响应并处理握手\"><a href=\"#响应并处理握手\" class=\"headerlink\" title=\"响应并处理握手\"></a>响应并处理握手</h2><p>虽然websocket可以实现服务器推送，前提在于该连接已经建立。客户端仍然需要发起一个Websocket握手请求。 既然要响应该握手请求，我们需要了解一下该请求。</p>\n<h3 id=\"客户端握手请求\"><a href=\"#客户端握手请求\" class=\"headerlink\" title=\"客户端握手请求\"></a>客户端握手请求</h3><p>客户端的握手请求是一个标准的HTTP请求，大概像下面的例子。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1  //HTTP版本必须1.1及以上，请求方式为GET</span><br><span class=\"line\">Host: localhost:8081 //本地项目</span><br><span class=\"line\">Connection: Upgrade </span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Upgrade: websocket //指定websocket协议</span><br><span class=\"line\">Origin: http://192.168.132.170:8000</span><br><span class=\"line\">Sec-WebSocket-Version: 13 //版本</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class=\"line\">Cookie: optimizelyEndUserId=oeu1505722530441r0.5993643212774391; _ga=GA1.1.557695983.1505722531</span><br><span class=\"line\">Sec-WebSocket-Key: /2R6uuzPqLT/6z8fnZfN3w==   //握手返回基于该密钥</span><br><span class=\"line\">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span><br></pre></td></tr></table></figure>\n<p>上面列出了实际例子中的请求头，内容由浏览器生成，需要注意的部分如下。  </p>\n<ul>\n<li>HTTP版本必须1.1及以上，请求方式为GET</li>\n<li>Connection: Upgrade  </li>\n<li>Upgrade: websocket //指定websocket  </li>\n<li>Sec-WebSocket-Key  密钥 服务器处理握手的依据 </li>\n</ul>\n<p>我们服务器处理握手时需要关注的就是上面四点。</p>\n<h3 id=\"响应握手请求\"><a href=\"#响应握手请求\" class=\"headerlink\" title=\"响应握手请求\"></a>响应握手请求</h3><p>服务器根据是否websocket的必须请求头，分下面两种情况：  </p>\n<ol>\n<li>不满足，作为http请求来响应。</li>\n<li>满足，解析处理按照websocket规定的数据格式来响应 </li>\n</ol>\n<h4 id=\"返回格式\"><a href=\"#返回格式\" class=\"headerlink\" title=\"返回格式\"></a>返回格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br></pre></td></tr></table></figure>\n<p>请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 </p>\n<p>这里的Sec-WebSocket-Accept 就是基于请求头中Sec-WebSocket-Key来生成。规则如下：<br>Sec-WebSocket-Key 和”258EAFA5-E914-47DA-95CA-C5AB0DC85B11”链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。<br>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定拼接字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ws_key = <span class=\"string\">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 生成相应key</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAccpectKey</span>(<span class=\"params\">rSWKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> crypto.createHash(<span class=\"string\">'sha1'</span>).update(rSWKey + ws_key).digest(<span class=\"string\">'base64'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handShake</span>(<span class=\"params\">socket, headers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reqSWKey = headers[<span class=\"string\">'Sec-WebSocket-Key'</span>],</span><br><span class=\"line\">        resSWKey = getAccpectKey(reqSWKey)</span><br><span class=\"line\">    socket.write(<span class=\"string\">'HTTP/1.1 101 Switching Protocols\\r\\n'</span>);</span><br><span class=\"line\">    socket.write(<span class=\"string\">'Upgrade: websocket\\r\\n'</span>);</span><br><span class=\"line\">    socket.write(<span class=\"string\">'Connection: Upgrade\\r\\n'</span>);</span><br><span class=\"line\">    socket.write(<span class=\"string\">'Sec-WebSocket-Accept: '</span> + resSWKey + <span class=\"string\">'\\r\\n'</span>);</span><br><span class=\"line\">    socket.write(<span class=\"string\">'\\r\\n'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们的握手协议就算完成了，此时会触发客户端websocket的onopen事件，即websocket打开，可以进行通信</p>\n<h3 id=\"解析数据\"><a href=\"#解析数据\" class=\"headerlink\" title=\"解析数据\"></a>解析数据</h3><h4 id=\"客户端发送帧格式\"><a href=\"#客户端发送帧格式\" class=\"headerlink\" title=\"客户端发送帧格式\"></a>客户端发送帧格式</h4><p>握手协议完成之后，我们就该解析数据了，还是要把这张帧格式拿出来。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    帧格式:  </span><br><span class=\"line\">​​</span><br><span class=\"line\">      0                   1                   2                   3</span><br><span class=\"line\">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class=\"line\">     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class=\"line\">     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class=\"line\">     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class=\"line\">     | |1|2|3|       |K|             |                               |</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |     Extended payload length continued, if payload len == 127  |</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class=\"line\">     |                               |Masking-key, if MASK set to 1  |</span><br><span class=\"line\">     +-------------------------------+-------------------------------+</span><br><span class=\"line\">     | Masking-key (continued)       |          Payload Data         |</span><br><span class=\"line\">     +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     :                     Payload Data continued ...                :</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |                     Payload Data continued ...                |</span><br><span class=\"line\">     +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>每个从客户端发送到服务器的数据帧都遵循上面的格式。  </p>\n<ol>\n<li><p>MASK位：只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1   </p>\n</li>\n<li><p>opcode字段定义如何解析有效的数据：  </p>\n<ul>\n<li>0x0 继续处理</li>\n<li>0x1 text(必须是UTF-8编码)  </li>\n<li>0x2 二进制 和其他叫做控制代码的数据。</li>\n<li>0x3-0x7 0xB-0xF 该版本的WebSockets无意义   </li>\n</ul>\n</li>\n<li><p>FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。</p>\n</li>\n<li>Payload len：有效数据长度  <ul>\n<li>Payload len&lt;126, 即为真实长度</li>\n<li>126,说明真实长度大于125，后面2个字节的值为真实长度</li>\n<li>127,真实长度大于65535，后面8字节值为真实长度 </li>\n</ul>\n</li>\n</ol>\n<h4 id=\"解析数据-1\"><a href=\"#解析数据-1\" class=\"headerlink\" title=\"解析数据\"></a>解析数据</h4><p>所谓解析数据，肯定是基于上面的格式按照一定规则来进行处理。下面就是处理的规则。  </p>\n<ol>\n<li>获取有效数据长度  </li>\n<li>获取掩码并依据规则进行反序列化数据</li>\n</ol>\n<p>直接看代码应该更加清晰。    </p>\n<pre><code class=\"js\"><span class=\"comment\">// 解析接受的数据帧</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decodeFrame</span>(<span class=\"params\">buffer</span>) </span>{\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * &gt;&gt;&gt; 7 右移操作，即字节右移7位，目的是为了即只取第一位的值</span>\n<span class=\"comment\">     * 10010030  ====&gt;   00000001</span>\n<span class=\"comment\">     * &amp; 按位与  同1为1    </span>\n<span class=\"comment\">     * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值</span>\n<span class=\"comment\">     * 11011000 &amp; 00001111  ===》  00001000</span>\n<span class=\"comment\">     *  </span>\n<span class=\"comment\">     */</span>\n    <span class=\"keyword\">var</span> fBite = buffer[<span class=\"number\">0</span>],\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取Fin的值，</span>\n<span class=\"comment\">         * 1传输结束</span>\n<span class=\"comment\">         * 0 继续监听 </span>\n<span class=\"comment\">         */</span>\n        Fin = fBite &gt;&gt;&gt; <span class=\"number\">7</span>,\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取opcode的值，opcode为fBite的4-7位</span>\n<span class=\"comment\">         * &amp; 按位与  同1为1    </span>\n<span class=\"comment\">         * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值</span>\n<span class=\"comment\">         */</span>\n        opcode = buffer[<span class=\"number\">0</span>] &amp; <span class=\"number\">15</span>,\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取有效数据长度 </span>\n<span class=\"comment\">         */</span>\n        len = buffer[<span class=\"number\">1</span>] &amp; <span class=\"number\">127</span>,\n        <span class=\"comment\">// 是否进行掩码处理，客户端请求必须为1</span>\n        Mask = buffer[<span class=\"number\">1</span>] &gt;&gt;&gt; <span class=\"number\">7</span>,\n        maskKey = <span class=\"literal\">null</span>\n    <span class=\"comment\">// 获取数据长度</span>\n    <span class=\"comment\">//真实长度大于125，读取后面2字节</span>\n    <span class=\"keyword\">if</span> (len == <span class=\"number\">126</span>) {\n        len = buffer.readUInt16BE(<span class=\"number\">2</span>)\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">127</span>) {\n        <span class=\"comment\">// 真实长度大于65535，读取后面8字节</span>\n        len = buffer.readUInt64BE(<span class=\"number\">2</span>)\n    }\n    <span class=\"comment\">// 判断是否进行掩码处理</span>\n    Mask &amp;&amp; (maskKey = buffer.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>))\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 反掩码处理 </span>\n<span class=\"comment\">     * 循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算</span>\n<span class=\"comment\">     */</span>\n    <span class=\"keyword\">if</span>(Mask){\n        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;i&lt;len ;i++){\n            buffer[i] = maskKey[(i - <span class=\"number\">2</span>) % <span class=\"number\">4</span>] ^ buffer[i];\n        }\n    }\n    <span class=\"keyword\">var</span> data = buffer.slice(<span class=\"number\">2</span>)\n    <span class=\"keyword\">return</span> {\n        Fin:Fin,\n        opcode:opcode,\n        data:data\n    }\n}\n</code></pre>\n<h4 id=\"发送数据\"><a href=\"#发送数据\" class=\"headerlink\" title=\"发送数据\"></a>发送数据</h4><p>处理完接收到的数据之后，下面就是发送响应了。<br>响应数据不需要进行掩码运算，只需要根据帧的格式(即上面的帧)，将数据进行组装就好</p>\n<pre><code class=\"js\"><span class=\"comment\">// 加密发送数据</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encodeFrame</span>(<span class=\"params\">data</span>)</span>{\n    <span class=\"keyword\">var</span> len = Buffer.byteLength(data),\n        <span class=\"comment\">// 2的64位</span>\n        payload_len = len &gt; <span class=\"number\">65535</span> ?<span class=\"number\">10</span>:(len &gt; <span class=\"number\">125</span> ? <span class=\"number\">4</span> : <span class=\"number\">2</span>),\n        buf = <span class=\"keyword\">new</span> Buffer(len+payload_len)\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 首个字节，0x81 = 10000001 </span>\n<span class=\"comment\">     *对应的Fin 为1 opcode为001 mask 为0 </span>\n<span class=\"comment\">     * 即表明 返回数据为txt文本已经结束并未使用掩码处理</span>\n<span class=\"comment\">     */</span>\n    buf[<span class=\"number\">0</span>] = <span class=\"number\">0x81</span>  \n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 根据真实数据长度设置payload_len位</span>\n<span class=\"comment\">     */</span>        \n    <span class=\"keyword\">if</span>(payload_len == <span class=\"number\">2</span>){\n        buf[<span class=\"number\">1</span>] = len\n    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(payload_len == <span class=\"number\">4</span>){\n        buf[<span class=\"number\">1</span>] = <span class=\"number\">126</span>;\n        buf.writeUInt16BE(payload_len, <span class=\"number\">2</span>);\n    }<span class=\"keyword\">else</span> {\n        buf[<span class=\"number\">1</span>] = <span class=\"number\">127</span>;\n        buf.writeUInt32BE(payload_len &gt;&gt;&gt; <span class=\"number\">32</span>, <span class=\"number\">2</span>);\n        buf.writeUInt32BE(payload_len &amp; <span class=\"number\">0xFFFFFFFF</span>, <span class=\"number\">6</span>);\n    }  \n    buf.write(data, payload_len);\n    <span class=\"keyword\">return</span> buf;\n}\n</code></pre>\n<h4 id=\"心跳响应\"><a href=\"#心跳响应\" class=\"headerlink\" title=\"心跳响应\"></a>心跳响应</h4><p>当收到opcode 为 9时即ping请求，直接返回具有完全相同有效数据的pong即可。<br>Pings的opcode为0x9，pong是0xA，所以可以直接如下   </p>\n<pre><code class=\"js\"><span class=\"comment\">// ping请求</span>\n<span class=\"keyword\">if</span>(opcode == <span class=\"number\">9</span>){\n   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ping相应\"</span>);\n   <span class=\"comment\">/**</span>\n<span class=\"comment\">    * ping pong最大长度为125，所以可以直接拼接</span>\n<span class=\"comment\">    * 前两位数据为10001010+数据长度</span>\n<span class=\"comment\">    * 即传输完毕的pong响应，数据肯定小于125</span>\n<span class=\"comment\">    */</span>\n    socke.write(Buffer.concat([<span class=\"keyword\">new</span> Buffer([<span class=\"number\">0x8A</span>, data.length]), data]))\n}\n</code></pre>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>至此，一个websocket服务器的简单实现就完成了<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/ws.js\" target=\"_blank\" rel=\"noopener\">更多细节请查看</a>。当然成熟的websocket库处理各种情况是比较完善的，更推荐大家使用，这里只是简单实践，更多的是满足一下自己的好奇心，知其然，也要知其所以然，希望大家共同学习和进步</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhjw7dnw000dnl92kx25xek3","tag_id":"cjhjw7do3000fnl92ew7c5n81","_id":"cjhjw7don000inl9279lm5aa8"}],"Tag":[{"name":"webpack","_id":"cjhjw7do3000fnl92ew7c5n81"}]}}