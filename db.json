{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"8962578830ff3908b06d264d46ed7a0c287ebc2e","modified":1513261827463},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1513338593101},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1513338593101},{"_id":"themes/hexo-theme-next/.git","hash":"3425b125179f900ab9d79c9d7c71331936367a72","modified":1513338593090},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1513338593101},{"_id":"themes/hexo-theme-next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1513338593102},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1513338593102},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1513338593102},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1513338593102},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1513338593102},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1513338593102},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1513338593103},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1513338593103},{"_id":"themes/hexo-theme-next/README.md","hash":"aa2fb15ef016074b10755323c99025df506d5ca3","modified":1513338593103},{"_id":"themes/hexo-theme-next/_config.yml","hash":"3b51f3d94f17315e2a89b0bcedb70586ca69ba50","modified":1513338593103},{"_id":"themes/hexo-theme-next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1513338593104},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1513338593104},{"_id":"themes/hexo-theme-next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1513338593120},{"_id":"source/_posts/index.md","hash":"1ec5ee0bae5bfa7b0602c15cba6893d491723e36","modified":1513259183000},{"_id":"source/_posts/review.md","hash":"7281a770610f487afd568541550581a9c1e1ba4e","modified":1513324712610},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1513338593101},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1513338593101},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1513338593101},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1513338593102},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1513338593104},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1513338593105},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1513338593106},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1513338593106},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1513338593106},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1513338593106},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1513338593106},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1513338593120},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1513338593120},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1513338593120},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1513338593120},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1513338593121},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1513338593208},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1513338593208},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1513338593209},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593146},{"_id":"source/_posts/websocket/node.md","hash":"d10e2b7b76c5284533545d47390572001f0fdc45","modified":1513337959483},{"_id":"source/_posts/webpack/loader.md","hash":"0366733f728ed17802a78ae8aaf9389b9809111a","modified":1513337950672},{"_id":"source/_posts/webpack/plugin.md","hash":"6beca85a56462d015e3a92217a1f505164be0f9e","modified":1513337896000},{"_id":"source/_posts/websocket/frame.md","hash":"5425dfed3dd6f0be795c007669f19d6247fdde71","modified":1513324878670},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1513338593107},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1513338593108},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1513338593108},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1513338593108},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1513338593108},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1513338593109},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1513338593109},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1513338593109},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1513338593118},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1513338593117},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1513338593121},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1513338593121},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1513338593121},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1513338593122},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1513338593122},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1513338593146},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1513338593147},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1513338593147},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1513338593147},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1513338593147},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1513338593148},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1513338593148},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1513338593148},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1513338593149},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1513338593149},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1513338593150},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1513338593150},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1513338593150},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1513338593151},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1513338593151},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593113},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593137},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593145},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513338593146},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1513338593109},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1513338593110},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1513338593111},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1513338593112},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1513338593113},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1513338593114},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1513338593115},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1513338593116},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1513338593117},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1513338593118},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1513338593118},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1513338593119},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1513338593119},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1513338593137},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1513338593137},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1513338593145},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1513338593145},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1513338593145},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1513338593146},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1513338593152},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1513338593152},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1513338593153},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1513338593153},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1513338593153},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1513338593153},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1513338593154},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1513338593154},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1513338593155},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1513338593155},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1513338593155},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1513338593160},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1513338593163},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1513338593164},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1513338593164},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1513338593164},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1513338593170},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1513338593171},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1513338593171},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1513338593171},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1513338593173},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1513338593173},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1513338593174},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1513338593174},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1513338593174},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1513338593188},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1513338593190},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1513338593190},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1513338593190},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1513338593191},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1513338593191},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1513338593191},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1513338593192},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1513338593193},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1513338593193},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1513338593193},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1513338593194},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1513338593194},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1513338593194},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1513338593194},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1513338593195},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1513338593195},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1513338593195},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1513338593196},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1513338593196},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1513338593196},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1513338593197},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1513338593197},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1513338593197},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1513338593198},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1513338593199},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1513338593199},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1513338593205},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1513338593205},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1513338593207},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1513338593207},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1513338593208},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1513338593189},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1513338593118},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1513338593118},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1513338593123},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1513338593135},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1513338593135},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1513338593135},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1513338593136},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1513338593136},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1513338593136},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1513338593136},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1513338593139},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1513338593138},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1513338593139},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1513338593139},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1513338593139},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1513338593140},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1513338593140},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1513338593140},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1513338593143},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1513338593143},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1513338593143},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1513338593144},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1513338593144},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1513338593144},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1513338593141},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1513338593154},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1513338593158},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1513338593159},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1513338593159},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513338593165},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513338593165},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1513338593168},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1513338593170},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1513338593169},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1513338593172},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1513338593173},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1513338593175},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1513338593176},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1513338593175},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1513338593204},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1513338593204},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1513338593158},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1513338593187},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1513338593187},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1513338593206},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1513338593124},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1513338593125},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1513338593126},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1513338593127},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1513338593128},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1513338593129},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1513338593130},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1513338593131},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1513338593132},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1513338593133},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1513338593134},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1513338593134},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1513338593134},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1513338593134},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1513338593140},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1513338593141},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1513338593142},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1513338593156},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1513338593156},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1513338593156},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1513338593157},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1513338593157},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513338593166},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513338593167},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1513338593167},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1513338593168},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513338593168},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1513338593168},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1513338593178},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1513338593186},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1513338593180},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1513338593163},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1513338593203},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1513338593184},{"_id":"public/2017/12/14/review/index.html","hash":"ac83e98cac4357cd5f85a29bbc713c3c4f744cf4","modified":1513338601599},{"_id":"public/2017/12/14/index/index.html","hash":"6978a23074459ff277d2acba08afa24f8cc59542","modified":1513338601601},{"_id":"public/archives/index.html","hash":"e16ec2564370a9ad3d6c50f9f5b48dda7398de5b","modified":1513338601602},{"_id":"public/archives/2017/index.html","hash":"346c7957a3b693cac97a592b80d1b6dae53fee0d","modified":1513338601602},{"_id":"public/archives/2017/12/index.html","hash":"00836e81e95290491744f59ff18dd2b5a9da4b44","modified":1513338601602},{"_id":"public/index.html","hash":"f5ddcdf2114438523351ef42c110ad745a80c9d3","modified":1513338601602},{"_id":"public/archives/2017/10/index.html","hash":"d17307dee2aa61739c4c09d29fa05a657058d722","modified":1513338601611},{"_id":"public/archives/2017/11/index.html","hash":"b1b4743bb3930cab2cdc20810eb866e80b3225c3","modified":1513338601611},{"_id":"public/2017/11/06/websocket/frame/index.html","hash":"4fd2292a37eba38c1746d61c000e7911c1a67a94","modified":1513338601611},{"_id":"public/2017/11/22/websocket/node/index.html","hash":"f6fb4ea89aae1b1bb623248f604d235a6262ee8a","modified":1513338601611},{"_id":"public/2017/10/23/webpack/loader/index.html","hash":"fde2cf795cfc6d5394c819a53996c37dba787349","modified":1513338601611},{"_id":"public/2017/10/14/webpack/plugin/index.html","hash":"ccbc8b48597ecf67d5c662fd4236c96f00ca85e5","modified":1513338601611},{"_id":"public/CNAME","hash":"8962578830ff3908b06d264d46ed7a0c287ebc2e","modified":1513338601625},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1513338601625},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1513338601625},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1513338601625},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1513338601625},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1513338601625},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1513338601625},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1513338601625},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1513338601625},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1513338601625},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1513338601625},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1513338601625},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1513338601625},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513338601625},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1513338601625},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513338601626},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1513338601626},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1513338601626},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1513338601626},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1513338601626},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1513338601626},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513338601626},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513338601626},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513338601626},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513338601626},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513338601626},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513338601626},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1513338601626},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1513338601626},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1513338601626},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1513338601626},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1513338601626},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1513338601626},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513338601626},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1513338602560},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1513338602734},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1513338602918},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1513338602921},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1513338602921},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1513338602922},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1513338602923},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1513338602923},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1513338602923},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1513338602923},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1513338602923},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1513338602923},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1513338602924},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1513338602924},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1513338602924},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1513338602925},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1513338602925},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1513338602925},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1513338602925},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1513338602925},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1513338602925},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1513338602926},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1513338602926},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1513338602926},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1513338602926},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1513338602927},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1513338602927},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1513338602927},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1513338602927},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1513338602927},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1513338602927},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1513338602927},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1513338602927},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1513338602927},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1513338602928},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1513338602928},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1513338602928},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513338602928},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1513338602928},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1513338602929},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513338602929},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1513338602929},{"_id":"public/css/main.css","hash":"c74cc922359ec8fe448f2da7dff43d40815efff8","modified":1513338602929},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1513338602929},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1513338602929},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1513338602930},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1513338602930},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1513338602931},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1513338602931},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1513338602931},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1513338602933},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1513338602940},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1513338602941},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1513338602941},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1513338602941},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1513338602942},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1513338602942},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1513338602942},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1513338602942},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1513338602942},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1513338602942},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1513338602943},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1513338602943},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1513338602943},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1513338602944},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1513338602944},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1513338603050}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"开篇","date":"2017-09-13T16:00:00.000Z","_content":"原本也有些技术总结和学习笔记，不给过一直都是放在[博客园](http://www.cnblogs.com/pqjwyn/)和[掘金](https://juejin.im/user/584e46a2ac502e006c749486)上面。当时的想法是，既然第三方已经提供了成熟的博客系统，其实也没必要自己折腾了，有这个时间还不如干点别的(说到底还是懒)。就这样坚持了一段时间，最终让我自己动起来的原因在于，搞了下PWA，结果发现只能自己本地调试，打算偷个懒发现还不能加载js。算了还是把gitpages利用起来好了。就这样开始折腾了，先大致搞出来东西再说\n<!-- more -->\n## [早期博客](http://www.cnblogs.com/pqjwyn/p/) \n","source":"_posts/index.md","raw":"---\ntitle: 开篇\ndate: 2017-09-14\n---\n原本也有些技术总结和学习笔记，不给过一直都是放在[博客园](http://www.cnblogs.com/pqjwyn/)和[掘金](https://juejin.im/user/584e46a2ac502e006c749486)上面。当时的想法是，既然第三方已经提供了成熟的博客系统，其实也没必要自己折腾了，有这个时间还不如干点别的(说到底还是懒)。就这样坚持了一段时间，最终让我自己动起来的原因在于，搞了下PWA，结果发现只能自己本地调试，打算偷个懒发现还不能加载js。算了还是把gitpages利用起来好了。就这样开始折腾了，先大致搞出来东西再说\n<!-- more -->\n## [早期博客](http://www.cnblogs.com/pqjwyn/p/) \n","slug":"index","published":1,"updated":"2017-12-15T11:54:52.000Z","_id":"cjb7uq9710000ue92rlqqztn3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>原本也有些技术总结和学习笔记，不给过一直都是放在<a href=\"http://www.cnblogs.com/pqjwyn/\" target=\"_blank\" rel=\"noopener\">博客园</a>和<a href=\"https://juejin.im/user/584e46a2ac502e006c749486\" target=\"_blank\" rel=\"noopener\">掘金</a>上面。当时的想法是，既然第三方已经提供了成熟的博客系统，其实也没必要自己折腾了，有这个时间还不如干点别的(说到底还是懒)。就这样坚持了一段时间，最终让我自己动起来的原因在于，搞了下PWA，结果发现只能自己本地调试，打算偷个懒发现还不能加载js。算了还是把gitpages利用起来好了。就这样开始折腾了，先大致搞出来东西再说<br><a id=\"more\"></a></p>\n<h2 id=\"早期博客\"><a href=\"#早期博客\" class=\"headerlink\" title=\"早期博客\"></a><a href=\"http://www.cnblogs.com/pqjwyn/p/\" target=\"_blank\" rel=\"noopener\">早期博客</a></h2>","site":{"data":{}},"excerpt":"<p>原本也有些技术总结和学习笔记，不给过一直都是放在<a href=\"http://www.cnblogs.com/pqjwyn/\" target=\"_blank\" rel=\"noopener\">博客园</a>和<a href=\"https://juejin.im/user/584e46a2ac502e006c749486\" target=\"_blank\" rel=\"noopener\">掘金</a>上面。当时的想法是，既然第三方已经提供了成熟的博客系统，其实也没必要自己折腾了，有这个时间还不如干点别的(说到底还是懒)。就这样坚持了一段时间，最终让我自己动起来的原因在于，搞了下PWA，结果发现只能自己本地调试，打算偷个懒发现还不能加载js。算了还是把gitpages利用起来好了。就这样开始折腾了，先大致搞出来东西再说<br>","more":"</p>\n<h2 id=\"早期博客\"><a href=\"#早期博客\" class=\"headerlink\" title=\"早期博客\"></a><a href=\"http://www.cnblogs.com/pqjwyn/p/\" target=\"_blank\" rel=\"noopener\">早期博客</a></h2>"},{"title":"前文回顾","date":"2017-09-14T16:00:00.000Z","_content":"原先多多少少也写了几十篇文章，也不忍心直接丢下。这里放个链接供自己查看吧。  \n<!-- more -->  \n\n## 文章列表   \n* [node实现一个Websocket服务器](https://juejin.im/post/5a2bf66151882546d71f44b2)\n* [实现一个websocket服务器-理论篇](https://juejin.im/post/5a05d89051882540f36305df)\n* [如何开发webpack plugin](https://juejin.im/post/59e8b724f265da431875dd5c)\n* [移动端踩坑之旅-ios下fixed、软键盘相关问题总结](https://juejin.im/post/59e725865188257e0c3246bf)\n* [如何开发webpack loader](https://juejin.im/post/59e6a5de518825469c7461da)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)","source":"_posts/review.md","raw":"---\ntitle: 前文回顾\ndate: 2017-09-15\n---\n原先多多少少也写了几十篇文章，也不忍心直接丢下。这里放个链接供自己查看吧。  \n<!-- more -->  \n\n## 文章列表   \n* [node实现一个Websocket服务器](https://juejin.im/post/5a2bf66151882546d71f44b2)\n* [实现一个websocket服务器-理论篇](https://juejin.im/post/5a05d89051882540f36305df)\n* [如何开发webpack plugin](https://juejin.im/post/59e8b724f265da431875dd5c)\n* [移动端踩坑之旅-ios下fixed、软键盘相关问题总结](https://juejin.im/post/59e725865188257e0c3246bf)\n* [如何开发webpack loader](https://juejin.im/post/59e6a5de518825469c7461da)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)\n* [node实现一个Websocket服务器](http://www.cnblogs.com/pqjwyn/p/8012197.html)","slug":"review","published":1,"updated":"2017-12-15T11:55:08.000Z","_id":"cjb7uq97b0001ue923d596a1m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>原先多多少少也写了几十篇文章，也不忍心直接丢下。这里放个链接供自己查看吧。<br><a id=\"more\"></a>  </p>\n<h2 id=\"文章列表\"><a href=\"#文章列表\" class=\"headerlink\" title=\"文章列表\"></a>文章列表</h2><ul>\n<li><a href=\"https://juejin.im/post/5a2bf66151882546d71f44b2\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"https://juejin.im/post/5a05d89051882540f36305df\" target=\"_blank\" rel=\"noopener\">实现一个websocket服务器-理论篇</a></li>\n<li><a href=\"https://juejin.im/post/59e8b724f265da431875dd5c\" target=\"_blank\" rel=\"noopener\">如何开发webpack plugin</a></li>\n<li><a href=\"https://juejin.im/post/59e725865188257e0c3246bf\" target=\"_blank\" rel=\"noopener\">移动端踩坑之旅-ios下fixed、软键盘相关问题总结</a></li>\n<li><a href=\"https://juejin.im/post/59e6a5de518825469c7461da\" target=\"_blank\" rel=\"noopener\">如何开发webpack loader</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>原先多多少少也写了几十篇文章，也不忍心直接丢下。这里放个链接供自己查看吧。<br>","more":"</p>\n<h2 id=\"文章列表\"><a href=\"#文章列表\" class=\"headerlink\" title=\"文章列表\"></a>文章列表</h2><ul>\n<li><a href=\"https://juejin.im/post/5a2bf66151882546d71f44b2\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"https://juejin.im/post/5a05d89051882540f36305df\" target=\"_blank\" rel=\"noopener\">实现一个websocket服务器-理论篇</a></li>\n<li><a href=\"https://juejin.im/post/59e8b724f265da431875dd5c\" target=\"_blank\" rel=\"noopener\">如何开发webpack plugin</a></li>\n<li><a href=\"https://juejin.im/post/59e725865188257e0c3246bf\" target=\"_blank\" rel=\"noopener\">移动端踩坑之旅-ios下fixed、软键盘相关问题总结</a></li>\n<li><a href=\"https://juejin.im/post/59e6a5de518825469c7461da\" target=\"_blank\" rel=\"noopener\">如何开发webpack loader</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n<li><a href=\"http://www.cnblogs.com/pqjwyn/p/8012197.html\" target=\"_blank\" rel=\"noopener\">node实现一个Websocket服务器</a></li>\n</ul>"},{"title":"如何开发webpack plugin","date":"2017-10-22T16:00:00.000Z","_content":"继上回介绍了[如何开发webpack loader](https://github.com/xiaoxiangdaiyu/w-loader/blob/master/loader/DOC.md) 之后。趁热打铁，来继续看下webpack另一个核心组成：plugin。  \n下面也和loader一样，让我们一起从基本的[官方文档](https://webpack.js.org/contribute/writing-a-plugin/)着手看起。  \n<!-- more -->\n## loader和plugin的差别   \n\n*  loader : 顾名思义，某种类型资源文件的加载器，作用于某种类型的文件上。webpack本身也是不能直接打包这些非js文件的，需要一个转化器即loader。 loader本身是单一，简单的，不能将多个功能放在一个loader里。   \n*  plugin比loaders更加先进一点，你可以扩展webpack的功能来满足自己的需要，换句话说，loader不能满足的时候，就需要plugin了。\n   \n\n## 如何开发一个plugin  \n\n插件将webpack引擎所有的能力暴露给第三方开发者。通过阶梯式的build回调，开发者可以在webpack编译过程中加入自己的行为。开发插件比loaders更加先进一点，因为你需要理解webpack一些底层构成来添加钩子回调。准备好读一些源码吧。       \n\n## 开发一个插件   \n\n一个webpack的插件由以下几方面组成：  \n* 一个非匿名的js函数   \n* 在它的原型对象上定义apply方法  \n* 指明挂载自身的webpack钩子事件  \n* 操作webpack内部情况的特定数据  \n* 方法完成时唤起webpack提供的回调\n```js\n// A named JavaScript function.\nfunction MyExampleWebpackPlugin() {\n   //\n};\n// Defines `apply` method in it's prototype.\nMyExampleWebpackPlugin.prototype.apply = function(compiler) {\n  // Specifies webpack's event hook to attach itself.\n  compiler.plugin('webpacksEventHook', function(compilation /* Manipulates webpack internal instance specific data. */, callback) {\n    console.log(\"This is an example plugin!!!\");\n    // Invokes webpack provided callback after functionality is complete.\n    callback();\n  });\n};    \n```  \n## 编译器和编译     \n\n开发插件过程中最重要的两个对象就是compiler 和compilation。理解他们的职责是扩展webpack功能最重要的第一步   \n\n编译器对象就是webpack完整的配置环境。该对象一经webpack开始执行就创建，并且通过所有可操作的设置项来设置，例如options，loaders，和plugins。当在webpack环境中应用一个插件时，该插件将会接受到一个指向该编译器的引用。使用该编译器来访问主要的webpack环境。\n\ncompilation对象是一个单独的关于版本资源的创建。当执行webpack 开发中间件时，当一个文件的更改被检测到就会创建一个新的compilation对象，因此产生了一些可被编译的资源。一个compilation展现了一些信息关于当前模块资源状态、编译资源、改变的文件、监视的依赖等信息。同样提供了很多关键的回调，当插件扩展自定义行为时   \n\n这两个组件是webpack 插件必需的组成部分(特别是compilation)，所以开发者如果熟悉下面这些源文件将会获益不小。   \n* [Compiler Source](https://github.com/webpack/webpack/blob/master/lib/Compiler.js)  \n* [Compilation Source](https://github.com/webpack/webpack/blob/master/lib/Compilation.js)   \n\n## 插件的基本结构   \n\n插件是在原型中带有一个apply方法的实例化对象，当安装插件的时候，这个apply方法就会被webpack调用一次。apply方法提供一个指向当前活动的webpack compiler的引用，该引用允许访问compiler的回调。一个简单的插件结构如下：  \n \n```js\nfunction HelloWorldPlugin(options) {\n  // Setup the plugin instance with options...\n}\n\nHelloWorldPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('done', function() {\n    console.log('Hello World!');\n  });\n};\n\nmodule.exports = HelloWorldPlugin;   \n```    \n然后安装一个插件，仅仅需要在你的 webpack config 中plugins对应的数组中，增加一个插件的实例即可   \n\n```js\nvar HelloWorldPlugin = require('hello-world');\n\nvar webpackConfig = {\n  // ... config settings here ...\n  plugins: [\n    new HelloWorldPlugin({options: true})\n  ]\n};\n``` \n\n## 访问编译    \n\n通过使用编译器对象，你可能会绑定提供指向每个新的compilation应用的回调。这些compilations提供了编译过程中很多步骤的回调函数。   \n\n```js\nfunction HelloCompilationPlugin(options) {}\n\nHelloCompilationPlugin.prototype.apply = function(compiler) {\n\n  // Setup callback for accessing a compilation:\n  compiler.plugin(\"compilation\", function(compilation) {\n\n    // Now setup callbacks for accessing compilation steps:\n    compilation.plugin(\"optimize\", function() {\n      console.log(\"Assets are being optimized.\");\n    });\n  });\n};\n\nmodule.exports = HelloCompilationPlugin;\n```      \n如果想了解更多关于在编译器、编译中哪些回调是可用的和其他一些更重要的对象，轻戳[plugin文档](https://doc.webpack-china.org/api/plugins/) \n\n## 异步插件    \n\n一些编译插件步骤是异步的并且提供了一个当你的插件结束编译时必须调用的回调方法\n\n```js\nfunction HelloAsyncPlugin(options) {}\n\nHelloAsyncPlugin.prototype.apply = function(compiler) {\n  compiler.plugin(\"emit\", function(compilation, callback) {\n\n    // Do something async...\n    setTimeout(function() {\n      console.log(\"Done with async work...\");\n      callback();\n    }, 1000);\n\n  });\n};\n\nmodule.exports = HelloAsyncPlugin;\n```  \n\n## 示例  \n\n一旦我们打开了webpack编译器和每个单独编译的大门，我们可以使用引擎做的事情是无限可能的。我们可以重新格式化存在的文件、创建派生文件、完全伪造一个新文件  \n\n让我们写个简单的示例插件，目的是生成一个新的名字为filelist.md的文件。内容如下：列出构建过程中所有的生成文件。这个插件大概如下：\n \n```js\nfunction FileListPlugin(options) {}\n\nFileListPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('emit', function(compilation, callback) {\n    // Create a header string for the generated file:\n    var filelist = 'In this build:\\n\\n';\n\n    // Loop through all compiled assets,\n    // adding a new line item for each filename.\n    for (var filename in compilation.assets) {\n      filelist += ('- '+ filename +'\\n');\n    }\n\n    // Insert this list into the webpack build as a new file asset:\n    compilation.assets['filelist.md'] = {\n      source: function() {\n        return filelist;\n      },\n      size: function() {\n        return filelist.length;\n      }\n    };\n\n    callback();\n  });\n};\n\nmodule.exports = FileListPlugin;\n```     \n\n## 不同类型的插件   \n\n插件可以依据其注册的事件来分成不同的类型，每个事件钩子决定了在触发时如何调用该插件。  \n\n#### 同步类型 \n\n这种类型的实例使用如下方式来调用插件  \n```js\napplyPlugins(name: string, args: any...)\n\napplyPluginsBailResult(name: string, args: any...)  \n```\n这意味着每一个插件的回调将伴随特定参数args依次被调用。对插件而言这是最简单的格式。很多有用的事件例如\"compile\", \"this-compilation\"，是期望插件同步执行的。  \n\n#### 流式类型 \n\nwaterfall Plugins 通过下面的方式调用  \n```js\napplyPluginsWaterfall(name: string, init: any, args: any...)\n```  \n\n#### 异步类型   \n\n当所有的插件被使用下面的方法异步调用的时候，即为异步插件\n```js\napplyPluginsAsync(name: string, args: any..., callback: (err?: Error) -> void)\n```    \n插件控制方法被调用，参数是所有的args和带有这种标志(err?: Error) -> void的回调。handler方法按照注册回调在所有handlers被调用之后的顺序来调用。对于\"emit\", \"run\"事件来说这是很常用的模式。\n\n#### 异步流    \n\n这种插件将按照流失方式来被异步使用  \n\n```js\napplyPluginsAsyncWaterfall(name: string, init: any, callback: (err: Error, result: any) -> void)\n```   \n这种插件的handler被调用时，参数是当前value和带有这种标志(err?: Error) -> void的回调。当被调用时，nextValue是下一个handler的当前值。第一个handler的当前值是init。所有的handler被调用之后，最后一个值将会被赋给回调。如果有的handler传递了一个err的值，回调将会接受err，并且不会有其他handler被第阿勇。这种插件模式使用与于\"before-resolve\" and \"after-resolve\"之类的事件。   \n\n#### 异步系列  \n\n这种和异步插件很相似，不同在于如果有点插件注册失败，将不会调用任何插件   \n```js\napplyPluginsAsyncSeries(name: string, args: any..., callback: (err: Error, result: any) -> void)\n```    \n#### 结束语   \n至此，如何开发一个基本的webpack plugin 我相信大家已经知道了，如果还不太清楚的话，可以移步[w-loader](https://github.com/xiaoxiangdaiyu/w-loader)查看。   \n另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   ","source":"_posts/webpack/loader.md","raw":"---\ntitle: 如何开发webpack plugin\ndate: 2017-10-23\n---\n继上回介绍了[如何开发webpack loader](https://github.com/xiaoxiangdaiyu/w-loader/blob/master/loader/DOC.md) 之后。趁热打铁，来继续看下webpack另一个核心组成：plugin。  \n下面也和loader一样，让我们一起从基本的[官方文档](https://webpack.js.org/contribute/writing-a-plugin/)着手看起。  \n<!-- more -->\n## loader和plugin的差别   \n\n*  loader : 顾名思义，某种类型资源文件的加载器，作用于某种类型的文件上。webpack本身也是不能直接打包这些非js文件的，需要一个转化器即loader。 loader本身是单一，简单的，不能将多个功能放在一个loader里。   \n*  plugin比loaders更加先进一点，你可以扩展webpack的功能来满足自己的需要，换句话说，loader不能满足的时候，就需要plugin了。\n   \n\n## 如何开发一个plugin  \n\n插件将webpack引擎所有的能力暴露给第三方开发者。通过阶梯式的build回调，开发者可以在webpack编译过程中加入自己的行为。开发插件比loaders更加先进一点，因为你需要理解webpack一些底层构成来添加钩子回调。准备好读一些源码吧。       \n\n## 开发一个插件   \n\n一个webpack的插件由以下几方面组成：  \n* 一个非匿名的js函数   \n* 在它的原型对象上定义apply方法  \n* 指明挂载自身的webpack钩子事件  \n* 操作webpack内部情况的特定数据  \n* 方法完成时唤起webpack提供的回调\n```js\n// A named JavaScript function.\nfunction MyExampleWebpackPlugin() {\n   //\n};\n// Defines `apply` method in it's prototype.\nMyExampleWebpackPlugin.prototype.apply = function(compiler) {\n  // Specifies webpack's event hook to attach itself.\n  compiler.plugin('webpacksEventHook', function(compilation /* Manipulates webpack internal instance specific data. */, callback) {\n    console.log(\"This is an example plugin!!!\");\n    // Invokes webpack provided callback after functionality is complete.\n    callback();\n  });\n};    \n```  \n## 编译器和编译     \n\n开发插件过程中最重要的两个对象就是compiler 和compilation。理解他们的职责是扩展webpack功能最重要的第一步   \n\n编译器对象就是webpack完整的配置环境。该对象一经webpack开始执行就创建，并且通过所有可操作的设置项来设置，例如options，loaders，和plugins。当在webpack环境中应用一个插件时，该插件将会接受到一个指向该编译器的引用。使用该编译器来访问主要的webpack环境。\n\ncompilation对象是一个单独的关于版本资源的创建。当执行webpack 开发中间件时，当一个文件的更改被检测到就会创建一个新的compilation对象，因此产生了一些可被编译的资源。一个compilation展现了一些信息关于当前模块资源状态、编译资源、改变的文件、监视的依赖等信息。同样提供了很多关键的回调，当插件扩展自定义行为时   \n\n这两个组件是webpack 插件必需的组成部分(特别是compilation)，所以开发者如果熟悉下面这些源文件将会获益不小。   \n* [Compiler Source](https://github.com/webpack/webpack/blob/master/lib/Compiler.js)  \n* [Compilation Source](https://github.com/webpack/webpack/blob/master/lib/Compilation.js)   \n\n## 插件的基本结构   \n\n插件是在原型中带有一个apply方法的实例化对象，当安装插件的时候，这个apply方法就会被webpack调用一次。apply方法提供一个指向当前活动的webpack compiler的引用，该引用允许访问compiler的回调。一个简单的插件结构如下：  \n \n```js\nfunction HelloWorldPlugin(options) {\n  // Setup the plugin instance with options...\n}\n\nHelloWorldPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('done', function() {\n    console.log('Hello World!');\n  });\n};\n\nmodule.exports = HelloWorldPlugin;   \n```    \n然后安装一个插件，仅仅需要在你的 webpack config 中plugins对应的数组中，增加一个插件的实例即可   \n\n```js\nvar HelloWorldPlugin = require('hello-world');\n\nvar webpackConfig = {\n  // ... config settings here ...\n  plugins: [\n    new HelloWorldPlugin({options: true})\n  ]\n};\n``` \n\n## 访问编译    \n\n通过使用编译器对象，你可能会绑定提供指向每个新的compilation应用的回调。这些compilations提供了编译过程中很多步骤的回调函数。   \n\n```js\nfunction HelloCompilationPlugin(options) {}\n\nHelloCompilationPlugin.prototype.apply = function(compiler) {\n\n  // Setup callback for accessing a compilation:\n  compiler.plugin(\"compilation\", function(compilation) {\n\n    // Now setup callbacks for accessing compilation steps:\n    compilation.plugin(\"optimize\", function() {\n      console.log(\"Assets are being optimized.\");\n    });\n  });\n};\n\nmodule.exports = HelloCompilationPlugin;\n```      \n如果想了解更多关于在编译器、编译中哪些回调是可用的和其他一些更重要的对象，轻戳[plugin文档](https://doc.webpack-china.org/api/plugins/) \n\n## 异步插件    \n\n一些编译插件步骤是异步的并且提供了一个当你的插件结束编译时必须调用的回调方法\n\n```js\nfunction HelloAsyncPlugin(options) {}\n\nHelloAsyncPlugin.prototype.apply = function(compiler) {\n  compiler.plugin(\"emit\", function(compilation, callback) {\n\n    // Do something async...\n    setTimeout(function() {\n      console.log(\"Done with async work...\");\n      callback();\n    }, 1000);\n\n  });\n};\n\nmodule.exports = HelloAsyncPlugin;\n```  \n\n## 示例  \n\n一旦我们打开了webpack编译器和每个单独编译的大门，我们可以使用引擎做的事情是无限可能的。我们可以重新格式化存在的文件、创建派生文件、完全伪造一个新文件  \n\n让我们写个简单的示例插件，目的是生成一个新的名字为filelist.md的文件。内容如下：列出构建过程中所有的生成文件。这个插件大概如下：\n \n```js\nfunction FileListPlugin(options) {}\n\nFileListPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('emit', function(compilation, callback) {\n    // Create a header string for the generated file:\n    var filelist = 'In this build:\\n\\n';\n\n    // Loop through all compiled assets,\n    // adding a new line item for each filename.\n    for (var filename in compilation.assets) {\n      filelist += ('- '+ filename +'\\n');\n    }\n\n    // Insert this list into the webpack build as a new file asset:\n    compilation.assets['filelist.md'] = {\n      source: function() {\n        return filelist;\n      },\n      size: function() {\n        return filelist.length;\n      }\n    };\n\n    callback();\n  });\n};\n\nmodule.exports = FileListPlugin;\n```     \n\n## 不同类型的插件   \n\n插件可以依据其注册的事件来分成不同的类型，每个事件钩子决定了在触发时如何调用该插件。  \n\n#### 同步类型 \n\n这种类型的实例使用如下方式来调用插件  \n```js\napplyPlugins(name: string, args: any...)\n\napplyPluginsBailResult(name: string, args: any...)  \n```\n这意味着每一个插件的回调将伴随特定参数args依次被调用。对插件而言这是最简单的格式。很多有用的事件例如\"compile\", \"this-compilation\"，是期望插件同步执行的。  \n\n#### 流式类型 \n\nwaterfall Plugins 通过下面的方式调用  \n```js\napplyPluginsWaterfall(name: string, init: any, args: any...)\n```  \n\n#### 异步类型   \n\n当所有的插件被使用下面的方法异步调用的时候，即为异步插件\n```js\napplyPluginsAsync(name: string, args: any..., callback: (err?: Error) -> void)\n```    \n插件控制方法被调用，参数是所有的args和带有这种标志(err?: Error) -> void的回调。handler方法按照注册回调在所有handlers被调用之后的顺序来调用。对于\"emit\", \"run\"事件来说这是很常用的模式。\n\n#### 异步流    \n\n这种插件将按照流失方式来被异步使用  \n\n```js\napplyPluginsAsyncWaterfall(name: string, init: any, callback: (err: Error, result: any) -> void)\n```   \n这种插件的handler被调用时，参数是当前value和带有这种标志(err?: Error) -> void的回调。当被调用时，nextValue是下一个handler的当前值。第一个handler的当前值是init。所有的handler被调用之后，最后一个值将会被赋给回调。如果有的handler传递了一个err的值，回调将会接受err，并且不会有其他handler被第阿勇。这种插件模式使用与于\"before-resolve\" and \"after-resolve\"之类的事件。   \n\n#### 异步系列  \n\n这种和异步插件很相似，不同在于如果有点插件注册失败，将不会调用任何插件   \n```js\napplyPluginsAsyncSeries(name: string, args: any..., callback: (err: Error, result: any) -> void)\n```    \n#### 结束语   \n至此，如何开发一个基本的webpack plugin 我相信大家已经知道了，如果还不太清楚的话，可以移步[w-loader](https://github.com/xiaoxiangdaiyu/w-loader)查看。   \n另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   ","slug":"webpack/loader","published":1,"updated":"2017-12-15T11:54:11.046Z","_id":"cjb7uq9an0002ue922n6inh6r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>继上回介绍了<a href=\"https://github.com/xiaoxiangdaiyu/w-loader/blob/master/loader/DOC.md\" target=\"_blank\" rel=\"noopener\">如何开发webpack loader</a> 之后。趁热打铁，来继续看下webpack另一个核心组成：plugin。<br>下面也和loader一样，让我们一起从基本的<a href=\"https://webpack.js.org/contribute/writing-a-plugin/\" target=\"_blank\" rel=\"noopener\">官方文档</a>着手看起。<br><a id=\"more\"></a></p>\n<h2 id=\"loader和plugin的差别\"><a href=\"#loader和plugin的差别\" class=\"headerlink\" title=\"loader和plugin的差别\"></a>loader和plugin的差别</h2><ul>\n<li>loader : 顾名思义，某种类型资源文件的加载器，作用于某种类型的文件上。webpack本身也是不能直接打包这些非js文件的，需要一个转化器即loader。 loader本身是单一，简单的，不能将多个功能放在一个loader里。   </li>\n<li>plugin比loaders更加先进一点，你可以扩展webpack的功能来满足自己的需要，换句话说，loader不能满足的时候，就需要plugin了。</li>\n</ul>\n<h2 id=\"如何开发一个plugin\"><a href=\"#如何开发一个plugin\" class=\"headerlink\" title=\"如何开发一个plugin\"></a>如何开发一个plugin</h2><p>插件将webpack引擎所有的能力暴露给第三方开发者。通过阶梯式的build回调，开发者可以在webpack编译过程中加入自己的行为。开发插件比loaders更加先进一点，因为你需要理解webpack一些底层构成来添加钩子回调。准备好读一些源码吧。       </p>\n<h2 id=\"开发一个插件\"><a href=\"#开发一个插件\" class=\"headerlink\" title=\"开发一个插件\"></a>开发一个插件</h2><p>一个webpack的插件由以下几方面组成：  </p>\n<ul>\n<li>一个非匿名的js函数   </li>\n<li>在它的原型对象上定义apply方法  </li>\n<li>指明挂载自身的webpack钩子事件  </li>\n<li>操作webpack内部情况的特定数据  </li>\n<li>方法完成时唤起webpack提供的回调<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A named JavaScript function.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyExampleWebpackPlugin</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Defines `apply` method in it's prototype.</span></span><br><span class=\"line\">MyExampleWebpackPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Specifies webpack's event hook to attach itself.</span></span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'webpacksEventHook'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation <span class=\"regexp\">/* Manipulates webpack internal instance specific data. */</span>, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is an example plugin!!!\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Invokes webpack provided callback after functionality is complete.</span></span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;    </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">## 编译器和编译     </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">开发插件过程中最重要的两个对象就是compiler 和compilation。理解他们的职责是扩展webpack功能最重要的第一步   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">编译器对象就是webpack完整的配置环境。该对象一经webpack开始执行就创建，并且通过所有可操作的设置项来设置，例如options，loaders，和plugins。当在webpack环境中应用一个插件时，该插件将会接受到一个指向该编译器的引用。使用该编译器来访问主要的webpack环境。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">compilation对象是一个单独的关于版本资源的创建。当执行webpack 开发中间件时，当一个文件的更改被检测到就会创建一个新的compilation对象，因此产生了一些可被编译的资源。一个compilation展现了一些信息关于当前模块资源状态、编译资源、改变的文件、监视的依赖等信息。同样提供了很多关键的回调，当插件扩展自定义行为时   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">这两个组件是webpack 插件必需的组成部分(特别是compilation)，所以开发者如果熟悉下面这些源文件将会获益不小。   </span></span><br><span class=\"line\"><span class=\"string\">* [Compiler Source](https://github.com/webpack/webpack/blob/master/lib/Compiler.js)  </span></span><br><span class=\"line\"><span class=\"string\">* [Compilation Source](https://github.com/webpack/webpack/blob/master/lib/Compilation.js)   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 插件的基本结构   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">插件是在原型中带有一个apply方法的实例化对象，当安装插件的时候，这个apply方法就会被webpack调用一次。apply方法提供一个指向当前活动的webpack compiler的引用，该引用允许访问compiler的回调。一个简单的插件结构如下：  </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloWorldPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Setup the plugin instance with options...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloWorldPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloWorldPlugin;   </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\">然后安装一个插件，仅仅需要在你的 webpack config 中plugins对应的数组中，增加一个插件的实例即可   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"keyword\">var</span> HelloWorldPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'hello-world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... config settings here ...</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HelloWorldPlugin(&#123;<span class=\"attr\">options</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 访问编译    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">通过使用编译器对象，你可能会绑定提供指向每个新的compilation应用的回调。这些compilations提供了编译过程中很多步骤的回调函数。   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloCompilationPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloCompilationPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Setup callback for accessing a compilation:</span></span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">\"compilation\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Now setup callbacks for accessing compilation steps:</span></span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">\"optimize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Assets are being optimized.\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloCompilationPlugin;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`      </span></span><br><span class=\"line\"><span class=\"string\">如果想了解更多关于在编译器、编译中哪些回调是可用的和其他一些更重要的对象，轻戳[plugin文档](https://doc.webpack-china.org/api/plugins/) </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 异步插件    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">一些编译插件步骤是异步的并且提供了一个当你的插件结束编译时必须调用的回调方法</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloAsyncPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloAsyncPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">\"emit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something async...</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Done with async work...\"</span>);</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloAsyncPlugin;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 示例  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">一旦我们打开了webpack编译器和每个单独编译的大门，我们可以使用引擎做的事情是无限可能的。我们可以重新格式化存在的文件、创建派生文件、完全伪造一个新文件  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">让我们写个简单的示例插件，目的是生成一个新的名字为filelist.md的文件。内容如下：列出构建过程中所有的生成文件。这个插件大概如下：</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FileListPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FileListPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'emit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a header string for the generated file:</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> filelist = <span class=\"string\">'In this build:\\n\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Loop through all compiled assets,</span></span><br><span class=\"line\">    <span class=\"comment\">// adding a new line item for each filename.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> filename <span class=\"keyword\">in</span> compilation.assets) &#123;</span><br><span class=\"line\">      filelist += (<span class=\"string\">'- '</span>+ filename +<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Insert this list into the webpack build as a new file asset:</span></span><br><span class=\"line\">    compilation.assets[<span class=\"string\">'filelist.md'</span>] = &#123;</span><br><span class=\"line\">      source: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filelist;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filelist.length;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = FileListPlugin;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`     </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 不同类型的插件   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">插件可以依据其注册的事件来分成不同的类型，每个事件钩子决定了在触发时如何调用该插件。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 同步类型 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">这种类型的实例使用如下方式来调用插件  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">applyPlugins(name: string, <span class=\"attr\">args</span>: any...)</span><br><span class=\"line\"></span><br><span class=\"line\">applyPluginsBailResult(name: string, <span class=\"attr\">args</span>: any...)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这意味着每一个插件的回调将伴随特定参数args依次被调用。对插件而言这是最简单的格式。很多有用的事件例如”compile”, “this-compilation”，是期望插件同步执行的。  </p>\n<h4 id=\"流式类型\"><a href=\"#流式类型\" class=\"headerlink\" title=\"流式类型\"></a>流式类型</h4><p>waterfall Plugins 通过下面的方式调用  </p>\n<pre><code class=\"js\">applyPluginsWaterfall(name: string, <span class=\"attr\">init</span>: any, <span class=\"attr\">args</span>: any...)\n</code></pre>\n<h4 id=\"异步类型\"><a href=\"#异步类型\" class=\"headerlink\" title=\"异步类型\"></a>异步类型</h4><p>当所有的插件被使用下面的方法异步调用的时候，即为异步插件</p>\n<pre><code class=\"js\">applyPluginsAsync(name: string, <span class=\"attr\">args</span>: any..., <span class=\"attr\">callback</span>: (err?: <span class=\"built_in\">Error</span>) -&gt; <span class=\"keyword\">void</span>)\n</code></pre>\n<p>插件控制方法被调用，参数是所有的args和带有这种标志(err?: Error) -&gt; void的回调。handler方法按照注册回调在所有handlers被调用之后的顺序来调用。对于”emit”, “run”事件来说这是很常用的模式。</p>\n<h4 id=\"异步流\"><a href=\"#异步流\" class=\"headerlink\" title=\"异步流\"></a>异步流</h4><p>这种插件将按照流失方式来被异步使用  </p>\n<pre><code class=\"js\">applyPluginsAsyncWaterfall(name: string, <span class=\"attr\">init</span>: any, <span class=\"attr\">callback</span>: (err: <span class=\"built_in\">Error</span>, <span class=\"attr\">result</span>: any) -&gt; <span class=\"keyword\">void</span>)\n</code></pre>\n<p>这种插件的handler被调用时，参数是当前value和带有这种标志(err?: Error) -&gt; void的回调。当被调用时，nextValue是下一个handler的当前值。第一个handler的当前值是init。所有的handler被调用之后，最后一个值将会被赋给回调。如果有的handler传递了一个err的值，回调将会接受err，并且不会有其他handler被第阿勇。这种插件模式使用与于”before-resolve” and “after-resolve”之类的事件。   </p>\n<h4 id=\"异步系列\"><a href=\"#异步系列\" class=\"headerlink\" title=\"异步系列\"></a>异步系列</h4><p>这种和异步插件很相似，不同在于如果有点插件注册失败，将不会调用任何插件   </p>\n<pre><code class=\"js\">applyPluginsAsyncSeries(name: string, <span class=\"attr\">args</span>: any..., <span class=\"attr\">callback</span>: (err: <span class=\"built_in\">Error</span>, <span class=\"attr\">result</span>: any) -&gt; <span class=\"keyword\">void</span>)\n</code></pre>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此，如何开发一个基本的webpack plugin 我相信大家已经知道了，如果还不太清楚的话，可以移步<a href=\"https://github.com/xiaoxiangdaiyu/w-loader\" target=\"_blank\" rel=\"noopener\">w-loader</a>查看。<br>另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   </p>\n","site":{"data":{}},"excerpt":"<p>继上回介绍了<a href=\"https://github.com/xiaoxiangdaiyu/w-loader/blob/master/loader/DOC.md\" target=\"_blank\" rel=\"noopener\">如何开发webpack loader</a> 之后。趁热打铁，来继续看下webpack另一个核心组成：plugin。<br>下面也和loader一样，让我们一起从基本的<a href=\"https://webpack.js.org/contribute/writing-a-plugin/\" target=\"_blank\" rel=\"noopener\">官方文档</a>着手看起。<br>","more":"</p>\n<h2 id=\"loader和plugin的差别\"><a href=\"#loader和plugin的差别\" class=\"headerlink\" title=\"loader和plugin的差别\"></a>loader和plugin的差别</h2><ul>\n<li>loader : 顾名思义，某种类型资源文件的加载器，作用于某种类型的文件上。webpack本身也是不能直接打包这些非js文件的，需要一个转化器即loader。 loader本身是单一，简单的，不能将多个功能放在一个loader里。   </li>\n<li>plugin比loaders更加先进一点，你可以扩展webpack的功能来满足自己的需要，换句话说，loader不能满足的时候，就需要plugin了。</li>\n</ul>\n<h2 id=\"如何开发一个plugin\"><a href=\"#如何开发一个plugin\" class=\"headerlink\" title=\"如何开发一个plugin\"></a>如何开发一个plugin</h2><p>插件将webpack引擎所有的能力暴露给第三方开发者。通过阶梯式的build回调，开发者可以在webpack编译过程中加入自己的行为。开发插件比loaders更加先进一点，因为你需要理解webpack一些底层构成来添加钩子回调。准备好读一些源码吧。       </p>\n<h2 id=\"开发一个插件\"><a href=\"#开发一个插件\" class=\"headerlink\" title=\"开发一个插件\"></a>开发一个插件</h2><p>一个webpack的插件由以下几方面组成：  </p>\n<ul>\n<li>一个非匿名的js函数   </li>\n<li>在它的原型对象上定义apply方法  </li>\n<li>指明挂载自身的webpack钩子事件  </li>\n<li>操作webpack内部情况的特定数据  </li>\n<li>方法完成时唤起webpack提供的回调<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A named JavaScript function.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyExampleWebpackPlugin</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Defines `apply` method in it's prototype.</span></span><br><span class=\"line\">MyExampleWebpackPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Specifies webpack's event hook to attach itself.</span></span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'webpacksEventHook'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation <span class=\"regexp\">/* Manipulates webpack internal instance specific data. */</span>, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is an example plugin!!!\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Invokes webpack provided callback after functionality is complete.</span></span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;    </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">## 编译器和编译     </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">开发插件过程中最重要的两个对象就是compiler 和compilation。理解他们的职责是扩展webpack功能最重要的第一步   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">编译器对象就是webpack完整的配置环境。该对象一经webpack开始执行就创建，并且通过所有可操作的设置项来设置，例如options，loaders，和plugins。当在webpack环境中应用一个插件时，该插件将会接受到一个指向该编译器的引用。使用该编译器来访问主要的webpack环境。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">compilation对象是一个单独的关于版本资源的创建。当执行webpack 开发中间件时，当一个文件的更改被检测到就会创建一个新的compilation对象，因此产生了一些可被编译的资源。一个compilation展现了一些信息关于当前模块资源状态、编译资源、改变的文件、监视的依赖等信息。同样提供了很多关键的回调，当插件扩展自定义行为时   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">这两个组件是webpack 插件必需的组成部分(特别是compilation)，所以开发者如果熟悉下面这些源文件将会获益不小。   </span></span><br><span class=\"line\"><span class=\"string\">* [Compiler Source](https://github.com/webpack/webpack/blob/master/lib/Compiler.js)  </span></span><br><span class=\"line\"><span class=\"string\">* [Compilation Source](https://github.com/webpack/webpack/blob/master/lib/Compilation.js)   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 插件的基本结构   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">插件是在原型中带有一个apply方法的实例化对象，当安装插件的时候，这个apply方法就会被webpack调用一次。apply方法提供一个指向当前活动的webpack compiler的引用，该引用允许访问compiler的回调。一个简单的插件结构如下：  </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloWorldPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Setup the plugin instance with options...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloWorldPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloWorldPlugin;   </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\">然后安装一个插件，仅仅需要在你的 webpack config 中plugins对应的数组中，增加一个插件的实例即可   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"keyword\">var</span> HelloWorldPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'hello-world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... config settings here ...</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HelloWorldPlugin(&#123;<span class=\"attr\">options</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 访问编译    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">通过使用编译器对象，你可能会绑定提供指向每个新的compilation应用的回调。这些compilations提供了编译过程中很多步骤的回调函数。   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloCompilationPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloCompilationPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Setup callback for accessing a compilation:</span></span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">\"compilation\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Now setup callbacks for accessing compilation steps:</span></span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">\"optimize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Assets are being optimized.\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloCompilationPlugin;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`      </span></span><br><span class=\"line\"><span class=\"string\">如果想了解更多关于在编译器、编译中哪些回调是可用的和其他一些更重要的对象，轻戳[plugin文档](https://doc.webpack-china.org/api/plugins/) </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 异步插件    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">一些编译插件步骤是异步的并且提供了一个当你的插件结束编译时必须调用的回调方法</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloAsyncPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HelloAsyncPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">\"emit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something async...</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Done with async work...\"</span>);</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = HelloAsyncPlugin;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 示例  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">一旦我们打开了webpack编译器和每个单独编译的大门，我们可以使用引擎做的事情是无限可能的。我们可以重新格式化存在的文件、创建派生文件、完全伪造一个新文件  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">让我们写个简单的示例插件，目的是生成一个新的名字为filelist.md的文件。内容如下：列出构建过程中所有的生成文件。这个插件大概如下：</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FileListPlugin</span>(<span class=\"params\">options</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FileListPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">'emit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a header string for the generated file:</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> filelist = <span class=\"string\">'In this build:\\n\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Loop through all compiled assets,</span></span><br><span class=\"line\">    <span class=\"comment\">// adding a new line item for each filename.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> filename <span class=\"keyword\">in</span> compilation.assets) &#123;</span><br><span class=\"line\">      filelist += (<span class=\"string\">'- '</span>+ filename +<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Insert this list into the webpack build as a new file asset:</span></span><br><span class=\"line\">    compilation.assets[<span class=\"string\">'filelist.md'</span>] = &#123;</span><br><span class=\"line\">      source: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filelist;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filelist.length;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = FileListPlugin;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`     </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 不同类型的插件   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">插件可以依据其注册的事件来分成不同的类型，每个事件钩子决定了在触发时如何调用该插件。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 同步类型 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">这种类型的实例使用如下方式来调用插件  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">applyPlugins(name: string, <span class=\"attr\">args</span>: any...)</span><br><span class=\"line\"></span><br><span class=\"line\">applyPluginsBailResult(name: string, <span class=\"attr\">args</span>: any...)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这意味着每一个插件的回调将伴随特定参数args依次被调用。对插件而言这是最简单的格式。很多有用的事件例如”compile”, “this-compilation”，是期望插件同步执行的。  </p>\n<h4 id=\"流式类型\"><a href=\"#流式类型\" class=\"headerlink\" title=\"流式类型\"></a>流式类型</h4><p>waterfall Plugins 通过下面的方式调用  </p>\n<pre><code class=\"js\">applyPluginsWaterfall(name: string, <span class=\"attr\">init</span>: any, <span class=\"attr\">args</span>: any...)\n</code></pre>\n<h4 id=\"异步类型\"><a href=\"#异步类型\" class=\"headerlink\" title=\"异步类型\"></a>异步类型</h4><p>当所有的插件被使用下面的方法异步调用的时候，即为异步插件</p>\n<pre><code class=\"js\">applyPluginsAsync(name: string, <span class=\"attr\">args</span>: any..., <span class=\"attr\">callback</span>: (err?: <span class=\"built_in\">Error</span>) -&gt; <span class=\"keyword\">void</span>)\n</code></pre>\n<p>插件控制方法被调用，参数是所有的args和带有这种标志(err?: Error) -&gt; void的回调。handler方法按照注册回调在所有handlers被调用之后的顺序来调用。对于”emit”, “run”事件来说这是很常用的模式。</p>\n<h4 id=\"异步流\"><a href=\"#异步流\" class=\"headerlink\" title=\"异步流\"></a>异步流</h4><p>这种插件将按照流失方式来被异步使用  </p>\n<pre><code class=\"js\">applyPluginsAsyncWaterfall(name: string, <span class=\"attr\">init</span>: any, <span class=\"attr\">callback</span>: (err: <span class=\"built_in\">Error</span>, <span class=\"attr\">result</span>: any) -&gt; <span class=\"keyword\">void</span>)\n</code></pre>\n<p>这种插件的handler被调用时，参数是当前value和带有这种标志(err?: Error) -&gt; void的回调。当被调用时，nextValue是下一个handler的当前值。第一个handler的当前值是init。所有的handler被调用之后，最后一个值将会被赋给回调。如果有的handler传递了一个err的值，回调将会接受err，并且不会有其他handler被第阿勇。这种插件模式使用与于”before-resolve” and “after-resolve”之类的事件。   </p>\n<h4 id=\"异步系列\"><a href=\"#异步系列\" class=\"headerlink\" title=\"异步系列\"></a>异步系列</h4><p>这种和异步插件很相似，不同在于如果有点插件注册失败，将不会调用任何插件   </p>\n<pre><code class=\"js\">applyPluginsAsyncSeries(name: string, <span class=\"attr\">args</span>: any..., <span class=\"attr\">callback</span>: (err: <span class=\"built_in\">Error</span>, <span class=\"attr\">result</span>: any) -&gt; <span class=\"keyword\">void</span>)\n</code></pre>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此，如何开发一个基本的webpack plugin 我相信大家已经知道了，如果还不太清楚的话，可以移步<a href=\"https://github.com/xiaoxiangdaiyu/w-loader\" target=\"_blank\" rel=\"noopener\">w-loader</a>查看。<br>另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   </p>"},{"title":"实现一个websocket服务器-node","date":"2017-11-21T16:00:00.000Z","_content":"早点时候翻译了篇[实现一个websocket服务器-理论篇 ](https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/README.md)，简单介绍了下理论基础，本来打算放在一起，但是感觉太长了大家可能都看不下去。不过发现如果拆开的话，还是不可避免的要提及理论部分。用到的地方就简要回顾一下好了。\n<!-- more -->\n## Websockt 基本通信流程\n在具体代码实现之前，我们需要大概理一下思路。回顾一下websocket的理论部分。简单的websocket流程如下(这里就不谈详细的过程了，大概描述一下)   \n\n1. 客户端发送握手请求\n2. 服务器响应、处理握手并返回 \n3. 客户端验证通过后，发送数据\n4. 服务器接收、处理数据，然后返回给客户端\n5. 客户端接收服务器的推送  \n\n作为一个服务器而言，我们主要的精力需要放在2，4这两个步骤。\n## 响应并处理握手   \n\n虽然websocket可以实现服务器推送，前提在于该连接已经建立。客户端仍然需要发起一个Websocket握手请求。 既然要响应该握手请求，我们需要了解一下该请求。\n### 客户端握手请求\n\n客户端的握手请求是一个标准的HTTP请求，大概像下面的例子。   \n \n```  \nGET / HTTP/1.1  //HTTP版本必须1.1及以上，请求方式为GET\nHost: localhost:8081 //本地项目\nConnection: Upgrade \nPragma: no-cache\nCache-Control: no-cache\nUpgrade: websocket //指定websocket协议\nOrigin: http://192.168.132.170:8000\nSec-WebSocket-Version: 13 //版本\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\nCookie: optimizelyEndUserId=oeu1505722530441r0.5993643212774391; _ga=GA1.1.557695983.1505722531\nSec-WebSocket-Key: /2R6uuzPqLT/6z8fnZfN3w==   //握手返回基于该密钥\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\n  \n```     \n上面列出了实际例子中的请求头，内容由浏览器生成，需要注意的部分如下。  \n\n* HTTP版本必须1.1及以上，请求方式为GET\n* Connection: Upgrade  \n* Upgrade: websocket //指定websocket  \n* Sec-WebSocket-Key  密钥 服务器处理握手的依据 \n\n  \n我们服务器处理握手时需要关注的就是上面四点。\n   \n### 响应握手请求\n\n服务器根据是否websocket的必须请求头，分下面两种情况：  \n  \n1. 不满足，作为http请求来响应。\n2. 满足，解析处理按照websocket规定的数据格式来响应 \n\n#### 返回格式  \n\n```js  \n    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n``` \n请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 \n\n这里的Sec-WebSocket-Accept 就是基于请求头中Sec-WebSocket-Key来生成。规则如下：  \nSec-WebSocket-Key 和\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。\n代码如下：\n\n```js  \n// 指定拼接字符\nvar ws_key = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n// 生成相应key\nfunction getAccpectKey(rSWKey) {\n    return crypto.createHash('sha1').update(rSWKey + ws_key).digest('base64')\n}\nfunction handShake(socket, headers) {\n    var reqSWKey = headers['Sec-WebSocket-Key'],\n        resSWKey = getAccpectKey(reqSWKey)\n    socket.write('HTTP/1.1 101 Switching Protocols\\r\\n');\n    socket.write('Upgrade: websocket\\r\\n');\n    socket.write('Connection: Upgrade\\r\\n');\n    socket.write('Sec-WebSocket-Accept: ' + resSWKey + '\\r\\n');\n    socket.write('\\r\\n');\n}\n```  \n\n这样我们的握手协议就算完成了，此时会触发客户端websocket的onopen事件，即websocket打开，可以进行通信\n\n### 解析数据  \n#### 客户端发送帧格式\n握手协议完成之后，我们就该解析数据了，还是要把这张帧格式拿出来。  \n\n```  \n    帧格式:  \n​​\n      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n\n```\n\n每个从客户端发送到服务器的数据帧都遵循上面的格式。  \n\n1. MASK位：只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1   \n\n2. opcode字段定义如何解析有效的数据：  \n    * 0x0 继续处理\n    * 0x1 text(必须是UTF-8编码)  \n    * 0x2 二进制 和其他叫做控制代码的数据。\n    * 0x3-0x7 0xB-0xF 该版本的WebSockets无意义   \n\n3. FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。\n4. Payload len：有效数据长度  \n    * Payload len<126, 即为真实长度\n    * 126,说明真实长度大于125，后面2个字节的值为真实长度\n    * 127,真实长度大于65535，后面8字节值为真实长度 \n      \n\n#### 解析数据  \n所谓解析数据，肯定是基于上面的格式按照一定规则来进行处理。下面就是处理的规则。  \n  \n1. 获取有效数据长度  \n2. 获取掩码并依据规则进行反序列化数据\n\n直接看代码应该更加清晰。    \n\n```js\n// 解析接受的数据帧\nfunction decodeFrame(buffer) {\n    /**\n     * >>> 7 右移操作，即字节右移7位，目的是为了即只取第一位的值\n     * 10010030  ====>   00000001\n     * & 按位与  同1为1    \n     * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值\n     * 11011000 & 00001111  ===》  00001000\n     *  \n     */\n    var fBite = buffer[0],\n        /**\n         * 获取Fin的值，\n         * 1传输结束\n         * 0 继续监听 \n         */\n        Fin = fBite >>> 7,\n        /**\n         * 获取opcode的值，opcode为fBite的4-7位\n         * & 按位与  同1为1    \n         * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值\n         */\n        opcode = buffer[0] & 15,\n        /**\n         * 获取有效数据长度 \n         */\n        len = buffer[1] & 127,\n        // 是否进行掩码处理，客户端请求必须为1\n        Mask = buffer[1] >>> 7,\n        maskKey = null\n    // 获取数据长度\n    //真实长度大于125，读取后面2字节\n    if (len == 126) {\n        len = buffer.readUInt16BE(2)\n    } else if (len == 127) {\n        // 真实长度大于65535，读取后面8字节\n        len = buffer.readUInt64BE(2)\n    }\n    // 判断是否进行掩码处理\n    Mask && (maskKey = buffer.slice(2,5))\n    /**\n     * 反掩码处理 \n     * 循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算\n     */\n    if(Mask){\n        for (var i = 2;i<len ;i++){\n            buffer[i] = maskKey[(i - 2) % 4] ^ buffer[i];\n        }\n    }\n    var data = buffer.slice(2)\n    return {\n        Fin:Fin,\n        opcode:opcode,\n        data:data\n    }\n}\n```    \n\n#### 发送数据\n处理完接收到的数据之后，下面就是发送响应了。 \n响应数据不需要进行掩码运算，只需要根据帧的格式(即上面的帧)，将数据进行组装就好\n\n```js\n// 加密发送数据\nfunction encodeFrame(data){\n    var len = Buffer.byteLength(data),\n        // 2的64位\n        payload_len = len > 65535 ?10:(len > 125 ? 4 : 2),\n        buf = new Buffer(len+payload_len)\n    /**\n     * 首个字节，0x81 = 10000001 \n     *对应的Fin 为1 opcode为001 mask 为0 \n     * 即表明 返回数据为txt文本已经结束并未使用掩码处理\n     */\n    buf[0] = 0x81  \n    /**\n     * 根据真实数据长度设置payload_len位\n     */        \n    if(payload_len == 2){\n        buf[1] = len\n    }else if(payload_len == 4){\n        buf[1] = 126;\n        buf.writeUInt16BE(payload_len, 2);\n    }else {\n        buf[1] = 127;\n        buf.writeUInt32BE(payload_len >>> 32, 2);\n        buf.writeUInt32BE(payload_len & 0xFFFFFFFF, 6);\n    }  \n    buf.write(data, payload_len);\n    return buf;\n}    \n```    \n\n#### 心跳响应  \n当收到opcode 为 9时即ping请求，直接返回具有完全相同有效数据的pong即可。\nPings的opcode为0x9，pong是0xA，所以可以直接如下   \n\n```js\n// ping请求\nif(opcode == 9){\n   console.log(\"ping相应\");\n   /**\n    * ping pong最大长度为125，所以可以直接拼接\n    * 前两位数据为10001010+数据长度\n    * 即传输完毕的pong响应，数据肯定小于125\n    */\n    socke.write(Buffer.concat([new Buffer([0x8A, data.length]), data]))\n}\n```  \n\n## 结束语 \n至此，一个websocket服务器的简单实现就完成了[更多细节请查看](https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/ws.js)。当然成熟的websocket库处理各种情况是比较完善的，更推荐大家使用，这里只是简单实践，更多的是满足一下自己的好奇心，知其然，也要知其所以然，希望大家共同学习和进步\n","source":"_posts/websocket/node.md","raw":"---\ntitle: 实现一个websocket服务器-node  \ndate: 2017-11-22\n---\n早点时候翻译了篇[实现一个websocket服务器-理论篇 ](https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/README.md)，简单介绍了下理论基础，本来打算放在一起，但是感觉太长了大家可能都看不下去。不过发现如果拆开的话，还是不可避免的要提及理论部分。用到的地方就简要回顾一下好了。\n<!-- more -->\n## Websockt 基本通信流程\n在具体代码实现之前，我们需要大概理一下思路。回顾一下websocket的理论部分。简单的websocket流程如下(这里就不谈详细的过程了，大概描述一下)   \n\n1. 客户端发送握手请求\n2. 服务器响应、处理握手并返回 \n3. 客户端验证通过后，发送数据\n4. 服务器接收、处理数据，然后返回给客户端\n5. 客户端接收服务器的推送  \n\n作为一个服务器而言，我们主要的精力需要放在2，4这两个步骤。\n## 响应并处理握手   \n\n虽然websocket可以实现服务器推送，前提在于该连接已经建立。客户端仍然需要发起一个Websocket握手请求。 既然要响应该握手请求，我们需要了解一下该请求。\n### 客户端握手请求\n\n客户端的握手请求是一个标准的HTTP请求，大概像下面的例子。   \n \n```  \nGET / HTTP/1.1  //HTTP版本必须1.1及以上，请求方式为GET\nHost: localhost:8081 //本地项目\nConnection: Upgrade \nPragma: no-cache\nCache-Control: no-cache\nUpgrade: websocket //指定websocket协议\nOrigin: http://192.168.132.170:8000\nSec-WebSocket-Version: 13 //版本\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\nCookie: optimizelyEndUserId=oeu1505722530441r0.5993643212774391; _ga=GA1.1.557695983.1505722531\nSec-WebSocket-Key: /2R6uuzPqLT/6z8fnZfN3w==   //握手返回基于该密钥\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\n  \n```     \n上面列出了实际例子中的请求头，内容由浏览器生成，需要注意的部分如下。  \n\n* HTTP版本必须1.1及以上，请求方式为GET\n* Connection: Upgrade  \n* Upgrade: websocket //指定websocket  \n* Sec-WebSocket-Key  密钥 服务器处理握手的依据 \n\n  \n我们服务器处理握手时需要关注的就是上面四点。\n   \n### 响应握手请求\n\n服务器根据是否websocket的必须请求头，分下面两种情况：  \n  \n1. 不满足，作为http请求来响应。\n2. 满足，解析处理按照websocket规定的数据格式来响应 \n\n#### 返回格式  \n\n```js  \n    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n``` \n请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 \n\n这里的Sec-WebSocket-Accept 就是基于请求头中Sec-WebSocket-Key来生成。规则如下：  \nSec-WebSocket-Key 和\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。\n代码如下：\n\n```js  \n// 指定拼接字符\nvar ws_key = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n// 生成相应key\nfunction getAccpectKey(rSWKey) {\n    return crypto.createHash('sha1').update(rSWKey + ws_key).digest('base64')\n}\nfunction handShake(socket, headers) {\n    var reqSWKey = headers['Sec-WebSocket-Key'],\n        resSWKey = getAccpectKey(reqSWKey)\n    socket.write('HTTP/1.1 101 Switching Protocols\\r\\n');\n    socket.write('Upgrade: websocket\\r\\n');\n    socket.write('Connection: Upgrade\\r\\n');\n    socket.write('Sec-WebSocket-Accept: ' + resSWKey + '\\r\\n');\n    socket.write('\\r\\n');\n}\n```  \n\n这样我们的握手协议就算完成了，此时会触发客户端websocket的onopen事件，即websocket打开，可以进行通信\n\n### 解析数据  \n#### 客户端发送帧格式\n握手协议完成之后，我们就该解析数据了，还是要把这张帧格式拿出来。  \n\n```  \n    帧格式:  \n​​\n      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n\n```\n\n每个从客户端发送到服务器的数据帧都遵循上面的格式。  \n\n1. MASK位：只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1   \n\n2. opcode字段定义如何解析有效的数据：  \n    * 0x0 继续处理\n    * 0x1 text(必须是UTF-8编码)  \n    * 0x2 二进制 和其他叫做控制代码的数据。\n    * 0x3-0x7 0xB-0xF 该版本的WebSockets无意义   \n\n3. FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。\n4. Payload len：有效数据长度  \n    * Payload len<126, 即为真实长度\n    * 126,说明真实长度大于125，后面2个字节的值为真实长度\n    * 127,真实长度大于65535，后面8字节值为真实长度 \n      \n\n#### 解析数据  \n所谓解析数据，肯定是基于上面的格式按照一定规则来进行处理。下面就是处理的规则。  \n  \n1. 获取有效数据长度  \n2. 获取掩码并依据规则进行反序列化数据\n\n直接看代码应该更加清晰。    \n\n```js\n// 解析接受的数据帧\nfunction decodeFrame(buffer) {\n    /**\n     * >>> 7 右移操作，即字节右移7位，目的是为了即只取第一位的值\n     * 10010030  ====>   00000001\n     * & 按位与  同1为1    \n     * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值\n     * 11011000 & 00001111  ===》  00001000\n     *  \n     */\n    var fBite = buffer[0],\n        /**\n         * 获取Fin的值，\n         * 1传输结束\n         * 0 继续监听 \n         */\n        Fin = fBite >>> 7,\n        /**\n         * 获取opcode的值，opcode为fBite的4-7位\n         * & 按位与  同1为1    \n         * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值\n         */\n        opcode = buffer[0] & 15,\n        /**\n         * 获取有效数据长度 \n         */\n        len = buffer[1] & 127,\n        // 是否进行掩码处理，客户端请求必须为1\n        Mask = buffer[1] >>> 7,\n        maskKey = null\n    // 获取数据长度\n    //真实长度大于125，读取后面2字节\n    if (len == 126) {\n        len = buffer.readUInt16BE(2)\n    } else if (len == 127) {\n        // 真实长度大于65535，读取后面8字节\n        len = buffer.readUInt64BE(2)\n    }\n    // 判断是否进行掩码处理\n    Mask && (maskKey = buffer.slice(2,5))\n    /**\n     * 反掩码处理 \n     * 循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算\n     */\n    if(Mask){\n        for (var i = 2;i<len ;i++){\n            buffer[i] = maskKey[(i - 2) % 4] ^ buffer[i];\n        }\n    }\n    var data = buffer.slice(2)\n    return {\n        Fin:Fin,\n        opcode:opcode,\n        data:data\n    }\n}\n```    \n\n#### 发送数据\n处理完接收到的数据之后，下面就是发送响应了。 \n响应数据不需要进行掩码运算，只需要根据帧的格式(即上面的帧)，将数据进行组装就好\n\n```js\n// 加密发送数据\nfunction encodeFrame(data){\n    var len = Buffer.byteLength(data),\n        // 2的64位\n        payload_len = len > 65535 ?10:(len > 125 ? 4 : 2),\n        buf = new Buffer(len+payload_len)\n    /**\n     * 首个字节，0x81 = 10000001 \n     *对应的Fin 为1 opcode为001 mask 为0 \n     * 即表明 返回数据为txt文本已经结束并未使用掩码处理\n     */\n    buf[0] = 0x81  \n    /**\n     * 根据真实数据长度设置payload_len位\n     */        \n    if(payload_len == 2){\n        buf[1] = len\n    }else if(payload_len == 4){\n        buf[1] = 126;\n        buf.writeUInt16BE(payload_len, 2);\n    }else {\n        buf[1] = 127;\n        buf.writeUInt32BE(payload_len >>> 32, 2);\n        buf.writeUInt32BE(payload_len & 0xFFFFFFFF, 6);\n    }  \n    buf.write(data, payload_len);\n    return buf;\n}    \n```    \n\n#### 心跳响应  \n当收到opcode 为 9时即ping请求，直接返回具有完全相同有效数据的pong即可。\nPings的opcode为0x9，pong是0xA，所以可以直接如下   \n\n```js\n// ping请求\nif(opcode == 9){\n   console.log(\"ping相应\");\n   /**\n    * ping pong最大长度为125，所以可以直接拼接\n    * 前两位数据为10001010+数据长度\n    * 即传输完毕的pong响应，数据肯定小于125\n    */\n    socke.write(Buffer.concat([new Buffer([0x8A, data.length]), data]))\n}\n```  \n\n## 结束语 \n至此，一个websocket服务器的简单实现就完成了[更多细节请查看](https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/ws.js)。当然成熟的websocket库处理各种情况是比较完善的，更推荐大家使用，这里只是简单实践，更多的是满足一下自己的好奇心，知其然，也要知其所以然，希望大家共同学习和进步\n","slug":"websocket/node","published":1,"updated":"2017-12-15T11:54:18.000Z","_id":"cjb7uq9ap0003ue9277rvxi24","comments":1,"layout":"post","photos":[],"link":"","content":"<p>早点时候翻译了篇<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/README.md\" target=\"_blank\" rel=\"noopener\">实现一个websocket服务器-理论篇 </a>，简单介绍了下理论基础，本来打算放在一起，但是感觉太长了大家可能都看不下去。不过发现如果拆开的话，还是不可避免的要提及理论部分。用到的地方就简要回顾一下好了。<br><a id=\"more\"></a></p>\n<h2 id=\"Websockt-基本通信流程\"><a href=\"#Websockt-基本通信流程\" class=\"headerlink\" title=\"Websockt 基本通信流程\"></a>Websockt 基本通信流程</h2><p>在具体代码实现之前，我们需要大概理一下思路。回顾一下websocket的理论部分。简单的websocket流程如下(这里就不谈详细的过程了，大概描述一下)   </p>\n<ol>\n<li>客户端发送握手请求</li>\n<li>服务器响应、处理握手并返回 </li>\n<li>客户端验证通过后，发送数据</li>\n<li>服务器接收、处理数据，然后返回给客户端</li>\n<li>客户端接收服务器的推送  </li>\n</ol>\n<p>作为一个服务器而言，我们主要的精力需要放在2，4这两个步骤。</p>\n<h2 id=\"响应并处理握手\"><a href=\"#响应并处理握手\" class=\"headerlink\" title=\"响应并处理握手\"></a>响应并处理握手</h2><p>虽然websocket可以实现服务器推送，前提在于该连接已经建立。客户端仍然需要发起一个Websocket握手请求。 既然要响应该握手请求，我们需要了解一下该请求。</p>\n<h3 id=\"客户端握手请求\"><a href=\"#客户端握手请求\" class=\"headerlink\" title=\"客户端握手请求\"></a>客户端握手请求</h3><p>客户端的握手请求是一个标准的HTTP请求，大概像下面的例子。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1  //HTTP版本必须1.1及以上，请求方式为GET</span><br><span class=\"line\">Host: localhost:8081 //本地项目</span><br><span class=\"line\">Connection: Upgrade </span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Upgrade: websocket //指定websocket协议</span><br><span class=\"line\">Origin: http://192.168.132.170:8000</span><br><span class=\"line\">Sec-WebSocket-Version: 13 //版本</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class=\"line\">Cookie: optimizelyEndUserId=oeu1505722530441r0.5993643212774391; _ga=GA1.1.557695983.1505722531</span><br><span class=\"line\">Sec-WebSocket-Key: /2R6uuzPqLT/6z8fnZfN3w==   //握手返回基于该密钥</span><br><span class=\"line\">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span><br><span class=\"line\">  </span><br><span class=\"line\">```     </span><br><span class=\"line\">上面列出了实际例子中的请求头，内容由浏览器生成，需要注意的部分如下。  </span><br><span class=\"line\"></span><br><span class=\"line\">* HTTP版本必须1.1及以上，请求方式为GET</span><br><span class=\"line\">* Connection: Upgrade  </span><br><span class=\"line\">* Upgrade: websocket //指定websocket  </span><br><span class=\"line\">* Sec-WebSocket-Key  密钥 服务器处理握手的依据 </span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">我们服务器处理握手时需要关注的就是上面四点。</span><br><span class=\"line\">   </span><br><span class=\"line\">### 响应握手请求</span><br><span class=\"line\"></span><br><span class=\"line\">服务器根据是否websocket的必须请求头，分下面两种情况：  </span><br><span class=\"line\">  </span><br><span class=\"line\">1. 不满足，作为http请求来响应。</span><br><span class=\"line\">2. 满足，解析处理按照websocket规定的数据格式来响应 </span><br><span class=\"line\"></span><br><span class=\"line\">#### 返回格式  </span><br><span class=\"line\"></span><br><span class=\"line\">```js  </span><br><span class=\"line\">    HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">    Upgrade: websocket</span><br><span class=\"line\">    Connection: Upgrade</span><br><span class=\"line\">    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br><span class=\"line\">``` </span><br><span class=\"line\">请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 </span><br><span class=\"line\"></span><br><span class=\"line\">这里的Sec-WebSocket-Accept 就是基于请求头中Sec-WebSocket-Key来生成。规则如下：  </span><br><span class=\"line\">Sec-WebSocket-Key 和&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。</span><br><span class=\"line\">代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\">```js  </span><br><span class=\"line\">// 指定拼接字符</span><br><span class=\"line\">var ws_key = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;;</span><br><span class=\"line\">// 生成相应key</span><br><span class=\"line\">function getAccpectKey(rSWKey) &#123;</span><br><span class=\"line\">    return crypto.createHash(&apos;sha1&apos;).update(rSWKey + ws_key).digest(&apos;base64&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function handShake(socket, headers) &#123;</span><br><span class=\"line\">    var reqSWKey = headers[&apos;Sec-WebSocket-Key&apos;],</span><br><span class=\"line\">        resSWKey = getAccpectKey(reqSWKey)</span><br><span class=\"line\">    socket.write(&apos;HTTP/1.1 101 Switching Protocols\\r\\n&apos;);</span><br><span class=\"line\">    socket.write(&apos;Upgrade: websocket\\r\\n&apos;);</span><br><span class=\"line\">    socket.write(&apos;Connection: Upgrade\\r\\n&apos;);</span><br><span class=\"line\">    socket.write(&apos;Sec-WebSocket-Accept: &apos; + resSWKey + &apos;\\r\\n&apos;);</span><br><span class=\"line\">    socket.write(&apos;\\r\\n&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">这样我们的握手协议就算完成了，此时会触发客户端websocket的onopen事件，即websocket打开，可以进行通信</span><br><span class=\"line\"></span><br><span class=\"line\">### 解析数据  </span><br><span class=\"line\">#### 客户端发送帧格式</span><br><span class=\"line\">握手协议完成之后，我们就该解析数据了，还是要把这张帧格式拿出来。  </span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\">    帧格式:  </span><br><span class=\"line\">​​</span><br><span class=\"line\">      0                   1                   2                   3</span><br><span class=\"line\">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class=\"line\">     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class=\"line\">     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class=\"line\">     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class=\"line\">     | |1|2|3|       |K|             |                               |</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |     Extended payload length continued, if payload len == 127  |</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class=\"line\">     |                               |Masking-key, if MASK set to 1  |</span><br><span class=\"line\">     +-------------------------------+-------------------------------+</span><br><span class=\"line\">     | Masking-key (continued)       |          Payload Data         |</span><br><span class=\"line\">     +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     :                     Payload Data continued ...                :</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |                     Payload Data continued ...                |</span><br><span class=\"line\">     +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>每个从客户端发送到服务器的数据帧都遵循上面的格式。  </p>\n<ol>\n<li><p>MASK位：只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1   </p>\n</li>\n<li><p>opcode字段定义如何解析有效的数据：  </p>\n<ul>\n<li>0x0 继续处理</li>\n<li>0x1 text(必须是UTF-8编码)  </li>\n<li>0x2 二进制 和其他叫做控制代码的数据。</li>\n<li>0x3-0x7 0xB-0xF 该版本的WebSockets无意义   </li>\n</ul>\n</li>\n<li><p>FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。</p>\n</li>\n<li>Payload len：有效数据长度  <ul>\n<li>Payload len&lt;126, 即为真实长度</li>\n<li>126,说明真实长度大于125，后面2个字节的值为真实长度</li>\n<li>127,真实长度大于65535，后面8字节值为真实长度 </li>\n</ul>\n</li>\n</ol>\n<h4 id=\"解析数据\"><a href=\"#解析数据\" class=\"headerlink\" title=\"解析数据\"></a>解析数据</h4><p>所谓解析数据，肯定是基于上面的格式按照一定规则来进行处理。下面就是处理的规则。  </p>\n<ol>\n<li>获取有效数据长度  </li>\n<li>获取掩码并依据规则进行反序列化数据</li>\n</ol>\n<p>直接看代码应该更加清晰。    </p>\n<pre><code class=\"js\"><span class=\"comment\">// 解析接受的数据帧</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decodeFrame</span>(<span class=\"params\">buffer</span>) </span>{\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * &gt;&gt;&gt; 7 右移操作，即字节右移7位，目的是为了即只取第一位的值</span>\n<span class=\"comment\">     * 10010030  ====&gt;   00000001</span>\n<span class=\"comment\">     * &amp; 按位与  同1为1    </span>\n<span class=\"comment\">     * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值</span>\n<span class=\"comment\">     * 11011000 &amp; 00001111  ===》  00001000</span>\n<span class=\"comment\">     *  </span>\n<span class=\"comment\">     */</span>\n    <span class=\"keyword\">var</span> fBite = buffer[<span class=\"number\">0</span>],\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取Fin的值，</span>\n<span class=\"comment\">         * 1传输结束</span>\n<span class=\"comment\">         * 0 继续监听 </span>\n<span class=\"comment\">         */</span>\n        Fin = fBite &gt;&gt;&gt; <span class=\"number\">7</span>,\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取opcode的值，opcode为fBite的4-7位</span>\n<span class=\"comment\">         * &amp; 按位与  同1为1    </span>\n<span class=\"comment\">         * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值</span>\n<span class=\"comment\">         */</span>\n        opcode = buffer[<span class=\"number\">0</span>] &amp; <span class=\"number\">15</span>,\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取有效数据长度 </span>\n<span class=\"comment\">         */</span>\n        len = buffer[<span class=\"number\">1</span>] &amp; <span class=\"number\">127</span>,\n        <span class=\"comment\">// 是否进行掩码处理，客户端请求必须为1</span>\n        Mask = buffer[<span class=\"number\">1</span>] &gt;&gt;&gt; <span class=\"number\">7</span>,\n        maskKey = <span class=\"literal\">null</span>\n    <span class=\"comment\">// 获取数据长度</span>\n    <span class=\"comment\">//真实长度大于125，读取后面2字节</span>\n    <span class=\"keyword\">if</span> (len == <span class=\"number\">126</span>) {\n        len = buffer.readUInt16BE(<span class=\"number\">2</span>)\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">127</span>) {\n        <span class=\"comment\">// 真实长度大于65535，读取后面8字节</span>\n        len = buffer.readUInt64BE(<span class=\"number\">2</span>)\n    }\n    <span class=\"comment\">// 判断是否进行掩码处理</span>\n    Mask &amp;&amp; (maskKey = buffer.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>))\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 反掩码处理 </span>\n<span class=\"comment\">     * 循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算</span>\n<span class=\"comment\">     */</span>\n    <span class=\"keyword\">if</span>(Mask){\n        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;i&lt;len ;i++){\n            buffer[i] = maskKey[(i - <span class=\"number\">2</span>) % <span class=\"number\">4</span>] ^ buffer[i];\n        }\n    }\n    <span class=\"keyword\">var</span> data = buffer.slice(<span class=\"number\">2</span>)\n    <span class=\"keyword\">return</span> {\n        Fin:Fin,\n        opcode:opcode,\n        data:data\n    }\n}\n</code></pre>\n<h4 id=\"发送数据\"><a href=\"#发送数据\" class=\"headerlink\" title=\"发送数据\"></a>发送数据</h4><p>处理完接收到的数据之后，下面就是发送响应了。<br>响应数据不需要进行掩码运算，只需要根据帧的格式(即上面的帧)，将数据进行组装就好</p>\n<pre><code class=\"js\"><span class=\"comment\">// 加密发送数据</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encodeFrame</span>(<span class=\"params\">data</span>)</span>{\n    <span class=\"keyword\">var</span> len = Buffer.byteLength(data),\n        <span class=\"comment\">// 2的64位</span>\n        payload_len = len &gt; <span class=\"number\">65535</span> ?<span class=\"number\">10</span>:(len &gt; <span class=\"number\">125</span> ? <span class=\"number\">4</span> : <span class=\"number\">2</span>),\n        buf = <span class=\"keyword\">new</span> Buffer(len+payload_len)\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 首个字节，0x81 = 10000001 </span>\n<span class=\"comment\">     *对应的Fin 为1 opcode为001 mask 为0 </span>\n<span class=\"comment\">     * 即表明 返回数据为txt文本已经结束并未使用掩码处理</span>\n<span class=\"comment\">     */</span>\n    buf[<span class=\"number\">0</span>] = <span class=\"number\">0x81</span>  \n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 根据真实数据长度设置payload_len位</span>\n<span class=\"comment\">     */</span>        \n    <span class=\"keyword\">if</span>(payload_len == <span class=\"number\">2</span>){\n        buf[<span class=\"number\">1</span>] = len\n    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(payload_len == <span class=\"number\">4</span>){\n        buf[<span class=\"number\">1</span>] = <span class=\"number\">126</span>;\n        buf.writeUInt16BE(payload_len, <span class=\"number\">2</span>);\n    }<span class=\"keyword\">else</span> {\n        buf[<span class=\"number\">1</span>] = <span class=\"number\">127</span>;\n        buf.writeUInt32BE(payload_len &gt;&gt;&gt; <span class=\"number\">32</span>, <span class=\"number\">2</span>);\n        buf.writeUInt32BE(payload_len &amp; <span class=\"number\">0xFFFFFFFF</span>, <span class=\"number\">6</span>);\n    }  \n    buf.write(data, payload_len);\n    <span class=\"keyword\">return</span> buf;\n}\n</code></pre>\n<h4 id=\"心跳响应\"><a href=\"#心跳响应\" class=\"headerlink\" title=\"心跳响应\"></a>心跳响应</h4><p>当收到opcode 为 9时即ping请求，直接返回具有完全相同有效数据的pong即可。<br>Pings的opcode为0x9，pong是0xA，所以可以直接如下   </p>\n<pre><code class=\"js\"><span class=\"comment\">// ping请求</span>\n<span class=\"keyword\">if</span>(opcode == <span class=\"number\">9</span>){\n   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ping相应\"</span>);\n   <span class=\"comment\">/**</span>\n<span class=\"comment\">    * ping pong最大长度为125，所以可以直接拼接</span>\n<span class=\"comment\">    * 前两位数据为10001010+数据长度</span>\n<span class=\"comment\">    * 即传输完毕的pong响应，数据肯定小于125</span>\n<span class=\"comment\">    */</span>\n    socke.write(Buffer.concat([<span class=\"keyword\">new</span> Buffer([<span class=\"number\">0x8A</span>, data.length]), data]))\n}\n</code></pre>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>至此，一个websocket服务器的简单实现就完成了<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/ws.js\" target=\"_blank\" rel=\"noopener\">更多细节请查看</a>。当然成熟的websocket库处理各种情况是比较完善的，更推荐大家使用，这里只是简单实践，更多的是满足一下自己的好奇心，知其然，也要知其所以然，希望大家共同学习和进步</p>\n","site":{"data":{}},"excerpt":"<p>早点时候翻译了篇<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/README.md\" target=\"_blank\" rel=\"noopener\">实现一个websocket服务器-理论篇 </a>，简单介绍了下理论基础，本来打算放在一起，但是感觉太长了大家可能都看不下去。不过发现如果拆开的话，还是不可避免的要提及理论部分。用到的地方就简要回顾一下好了。<br>","more":"</p>\n<h2 id=\"Websockt-基本通信流程\"><a href=\"#Websockt-基本通信流程\" class=\"headerlink\" title=\"Websockt 基本通信流程\"></a>Websockt 基本通信流程</h2><p>在具体代码实现之前，我们需要大概理一下思路。回顾一下websocket的理论部分。简单的websocket流程如下(这里就不谈详细的过程了，大概描述一下)   </p>\n<ol>\n<li>客户端发送握手请求</li>\n<li>服务器响应、处理握手并返回 </li>\n<li>客户端验证通过后，发送数据</li>\n<li>服务器接收、处理数据，然后返回给客户端</li>\n<li>客户端接收服务器的推送  </li>\n</ol>\n<p>作为一个服务器而言，我们主要的精力需要放在2，4这两个步骤。</p>\n<h2 id=\"响应并处理握手\"><a href=\"#响应并处理握手\" class=\"headerlink\" title=\"响应并处理握手\"></a>响应并处理握手</h2><p>虽然websocket可以实现服务器推送，前提在于该连接已经建立。客户端仍然需要发起一个Websocket握手请求。 既然要响应该握手请求，我们需要了解一下该请求。</p>\n<h3 id=\"客户端握手请求\"><a href=\"#客户端握手请求\" class=\"headerlink\" title=\"客户端握手请求\"></a>客户端握手请求</h3><p>客户端的握手请求是一个标准的HTTP请求，大概像下面的例子。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1  //HTTP版本必须1.1及以上，请求方式为GET</span><br><span class=\"line\">Host: localhost:8081 //本地项目</span><br><span class=\"line\">Connection: Upgrade </span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Upgrade: websocket //指定websocket协议</span><br><span class=\"line\">Origin: http://192.168.132.170:8000</span><br><span class=\"line\">Sec-WebSocket-Version: 13 //版本</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class=\"line\">Cookie: optimizelyEndUserId=oeu1505722530441r0.5993643212774391; _ga=GA1.1.557695983.1505722531</span><br><span class=\"line\">Sec-WebSocket-Key: /2R6uuzPqLT/6z8fnZfN3w==   //握手返回基于该密钥</span><br><span class=\"line\">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span><br><span class=\"line\">  </span><br><span class=\"line\">```     </span><br><span class=\"line\">上面列出了实际例子中的请求头，内容由浏览器生成，需要注意的部分如下。  </span><br><span class=\"line\"></span><br><span class=\"line\">* HTTP版本必须1.1及以上，请求方式为GET</span><br><span class=\"line\">* Connection: Upgrade  </span><br><span class=\"line\">* Upgrade: websocket //指定websocket  </span><br><span class=\"line\">* Sec-WebSocket-Key  密钥 服务器处理握手的依据 </span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">我们服务器处理握手时需要关注的就是上面四点。</span><br><span class=\"line\">   </span><br><span class=\"line\">### 响应握手请求</span><br><span class=\"line\"></span><br><span class=\"line\">服务器根据是否websocket的必须请求头，分下面两种情况：  </span><br><span class=\"line\">  </span><br><span class=\"line\">1. 不满足，作为http请求来响应。</span><br><span class=\"line\">2. 满足，解析处理按照websocket规定的数据格式来响应 </span><br><span class=\"line\"></span><br><span class=\"line\">#### 返回格式  </span><br><span class=\"line\"></span><br><span class=\"line\">```js  </span><br><span class=\"line\">    HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">    Upgrade: websocket</span><br><span class=\"line\">    Connection: Upgrade</span><br><span class=\"line\">    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br><span class=\"line\">``` </span><br><span class=\"line\">请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 </span><br><span class=\"line\"></span><br><span class=\"line\">这里的Sec-WebSocket-Accept 就是基于请求头中Sec-WebSocket-Key来生成。规则如下：  </span><br><span class=\"line\">Sec-WebSocket-Key 和&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。</span><br><span class=\"line\">代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\">```js  </span><br><span class=\"line\">// 指定拼接字符</span><br><span class=\"line\">var ws_key = &apos;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&apos;;</span><br><span class=\"line\">// 生成相应key</span><br><span class=\"line\">function getAccpectKey(rSWKey) &#123;</span><br><span class=\"line\">    return crypto.createHash(&apos;sha1&apos;).update(rSWKey + ws_key).digest(&apos;base64&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function handShake(socket, headers) &#123;</span><br><span class=\"line\">    var reqSWKey = headers[&apos;Sec-WebSocket-Key&apos;],</span><br><span class=\"line\">        resSWKey = getAccpectKey(reqSWKey)</span><br><span class=\"line\">    socket.write(&apos;HTTP/1.1 101 Switching Protocols\\r\\n&apos;);</span><br><span class=\"line\">    socket.write(&apos;Upgrade: websocket\\r\\n&apos;);</span><br><span class=\"line\">    socket.write(&apos;Connection: Upgrade\\r\\n&apos;);</span><br><span class=\"line\">    socket.write(&apos;Sec-WebSocket-Accept: &apos; + resSWKey + &apos;\\r\\n&apos;);</span><br><span class=\"line\">    socket.write(&apos;\\r\\n&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">这样我们的握手协议就算完成了，此时会触发客户端websocket的onopen事件，即websocket打开，可以进行通信</span><br><span class=\"line\"></span><br><span class=\"line\">### 解析数据  </span><br><span class=\"line\">#### 客户端发送帧格式</span><br><span class=\"line\">握手协议完成之后，我们就该解析数据了，还是要把这张帧格式拿出来。  </span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\">    帧格式:  </span><br><span class=\"line\">​​</span><br><span class=\"line\">      0                   1                   2                   3</span><br><span class=\"line\">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class=\"line\">     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class=\"line\">     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class=\"line\">     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class=\"line\">     | |1|2|3|       |K|             |                               |</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |     Extended payload length continued, if payload len == 127  |</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class=\"line\">     |                               |Masking-key, if MASK set to 1  |</span><br><span class=\"line\">     +-------------------------------+-------------------------------+</span><br><span class=\"line\">     | Masking-key (continued)       |          Payload Data         |</span><br><span class=\"line\">     +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     :                     Payload Data continued ...                :</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |                     Payload Data continued ...                |</span><br><span class=\"line\">     +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>每个从客户端发送到服务器的数据帧都遵循上面的格式。  </p>\n<ol>\n<li><p>MASK位：只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1   </p>\n</li>\n<li><p>opcode字段定义如何解析有效的数据：  </p>\n<ul>\n<li>0x0 继续处理</li>\n<li>0x1 text(必须是UTF-8编码)  </li>\n<li>0x2 二进制 和其他叫做控制代码的数据。</li>\n<li>0x3-0x7 0xB-0xF 该版本的WebSockets无意义   </li>\n</ul>\n</li>\n<li><p>FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。</p>\n</li>\n<li>Payload len：有效数据长度  <ul>\n<li>Payload len&lt;126, 即为真实长度</li>\n<li>126,说明真实长度大于125，后面2个字节的值为真实长度</li>\n<li>127,真实长度大于65535，后面8字节值为真实长度 </li>\n</ul>\n</li>\n</ol>\n<h4 id=\"解析数据\"><a href=\"#解析数据\" class=\"headerlink\" title=\"解析数据\"></a>解析数据</h4><p>所谓解析数据，肯定是基于上面的格式按照一定规则来进行处理。下面就是处理的规则。  </p>\n<ol>\n<li>获取有效数据长度  </li>\n<li>获取掩码并依据规则进行反序列化数据</li>\n</ol>\n<p>直接看代码应该更加清晰。    </p>\n<pre><code class=\"js\"><span class=\"comment\">// 解析接受的数据帧</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decodeFrame</span>(<span class=\"params\">buffer</span>) </span>{\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * &gt;&gt;&gt; 7 右移操作，即字节右移7位，目的是为了即只取第一位的值</span>\n<span class=\"comment\">     * 10010030  ====&gt;   00000001</span>\n<span class=\"comment\">     * &amp; 按位与  同1为1    </span>\n<span class=\"comment\">     * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值</span>\n<span class=\"comment\">     * 11011000 &amp; 00001111  ===》  00001000</span>\n<span class=\"comment\">     *  </span>\n<span class=\"comment\">     */</span>\n    <span class=\"keyword\">var</span> fBite = buffer[<span class=\"number\">0</span>],\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取Fin的值，</span>\n<span class=\"comment\">         * 1传输结束</span>\n<span class=\"comment\">         * 0 继续监听 </span>\n<span class=\"comment\">         */</span>\n        Fin = fBite &gt;&gt;&gt; <span class=\"number\">7</span>,\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取opcode的值，opcode为fBite的4-7位</span>\n<span class=\"comment\">         * &amp; 按位与  同1为1    </span>\n<span class=\"comment\">         * 15二进制表示为：00001111  ,运算之后前四位即为0，得到后四位的值</span>\n<span class=\"comment\">         */</span>\n        opcode = buffer[<span class=\"number\">0</span>] &amp; <span class=\"number\">15</span>,\n        <span class=\"comment\">/**</span>\n<span class=\"comment\">         * 获取有效数据长度 </span>\n<span class=\"comment\">         */</span>\n        len = buffer[<span class=\"number\">1</span>] &amp; <span class=\"number\">127</span>,\n        <span class=\"comment\">// 是否进行掩码处理，客户端请求必须为1</span>\n        Mask = buffer[<span class=\"number\">1</span>] &gt;&gt;&gt; <span class=\"number\">7</span>,\n        maskKey = <span class=\"literal\">null</span>\n    <span class=\"comment\">// 获取数据长度</span>\n    <span class=\"comment\">//真实长度大于125，读取后面2字节</span>\n    <span class=\"keyword\">if</span> (len == <span class=\"number\">126</span>) {\n        len = buffer.readUInt16BE(<span class=\"number\">2</span>)\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">127</span>) {\n        <span class=\"comment\">// 真实长度大于65535，读取后面8字节</span>\n        len = buffer.readUInt64BE(<span class=\"number\">2</span>)\n    }\n    <span class=\"comment\">// 判断是否进行掩码处理</span>\n    Mask &amp;&amp; (maskKey = buffer.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>))\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 反掩码处理 </span>\n<span class=\"comment\">     * 循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算</span>\n<span class=\"comment\">     */</span>\n    <span class=\"keyword\">if</span>(Mask){\n        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;i&lt;len ;i++){\n            buffer[i] = maskKey[(i - <span class=\"number\">2</span>) % <span class=\"number\">4</span>] ^ buffer[i];\n        }\n    }\n    <span class=\"keyword\">var</span> data = buffer.slice(<span class=\"number\">2</span>)\n    <span class=\"keyword\">return</span> {\n        Fin:Fin,\n        opcode:opcode,\n        data:data\n    }\n}\n</code></pre>\n<h4 id=\"发送数据\"><a href=\"#发送数据\" class=\"headerlink\" title=\"发送数据\"></a>发送数据</h4><p>处理完接收到的数据之后，下面就是发送响应了。<br>响应数据不需要进行掩码运算，只需要根据帧的格式(即上面的帧)，将数据进行组装就好</p>\n<pre><code class=\"js\"><span class=\"comment\">// 加密发送数据</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encodeFrame</span>(<span class=\"params\">data</span>)</span>{\n    <span class=\"keyword\">var</span> len = Buffer.byteLength(data),\n        <span class=\"comment\">// 2的64位</span>\n        payload_len = len &gt; <span class=\"number\">65535</span> ?<span class=\"number\">10</span>:(len &gt; <span class=\"number\">125</span> ? <span class=\"number\">4</span> : <span class=\"number\">2</span>),\n        buf = <span class=\"keyword\">new</span> Buffer(len+payload_len)\n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 首个字节，0x81 = 10000001 </span>\n<span class=\"comment\">     *对应的Fin 为1 opcode为001 mask 为0 </span>\n<span class=\"comment\">     * 即表明 返回数据为txt文本已经结束并未使用掩码处理</span>\n<span class=\"comment\">     */</span>\n    buf[<span class=\"number\">0</span>] = <span class=\"number\">0x81</span>  \n    <span class=\"comment\">/**</span>\n<span class=\"comment\">     * 根据真实数据长度设置payload_len位</span>\n<span class=\"comment\">     */</span>        \n    <span class=\"keyword\">if</span>(payload_len == <span class=\"number\">2</span>){\n        buf[<span class=\"number\">1</span>] = len\n    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(payload_len == <span class=\"number\">4</span>){\n        buf[<span class=\"number\">1</span>] = <span class=\"number\">126</span>;\n        buf.writeUInt16BE(payload_len, <span class=\"number\">2</span>);\n    }<span class=\"keyword\">else</span> {\n        buf[<span class=\"number\">1</span>] = <span class=\"number\">127</span>;\n        buf.writeUInt32BE(payload_len &gt;&gt;&gt; <span class=\"number\">32</span>, <span class=\"number\">2</span>);\n        buf.writeUInt32BE(payload_len &amp; <span class=\"number\">0xFFFFFFFF</span>, <span class=\"number\">6</span>);\n    }  \n    buf.write(data, payload_len);\n    <span class=\"keyword\">return</span> buf;\n}\n</code></pre>\n<h4 id=\"心跳响应\"><a href=\"#心跳响应\" class=\"headerlink\" title=\"心跳响应\"></a>心跳响应</h4><p>当收到opcode 为 9时即ping请求，直接返回具有完全相同有效数据的pong即可。<br>Pings的opcode为0x9，pong是0xA，所以可以直接如下   </p>\n<pre><code class=\"js\"><span class=\"comment\">// ping请求</span>\n<span class=\"keyword\">if</span>(opcode == <span class=\"number\">9</span>){\n   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ping相应\"</span>);\n   <span class=\"comment\">/**</span>\n<span class=\"comment\">    * ping pong最大长度为125，所以可以直接拼接</span>\n<span class=\"comment\">    * 前两位数据为10001010+数据长度</span>\n<span class=\"comment\">    * 即传输完毕的pong响应，数据肯定小于125</span>\n<span class=\"comment\">    */</span>\n    socke.write(Buffer.concat([<span class=\"keyword\">new</span> Buffer([<span class=\"number\">0x8A</span>, data.length]), data]))\n}\n</code></pre>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>至此，一个websocket服务器的简单实现就完成了<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/blob/master/src/websocket/ws.js\" target=\"_blank\" rel=\"noopener\">更多细节请查看</a>。当然成熟的websocket库处理各种情况是比较完善的，更推荐大家使用，这里只是简单实践，更多的是满足一下自己的好奇心，知其然，也要知其所以然，希望大家共同学习和进步</p>"},{"title":"如何开发webpack plugin","date":"2017-10-13T16:00:00.000Z","_content":"## 关于webpack  \n作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。  \n有兴趣的同学可以参考下我很早之前的[webpack简介](http://www.cnblogs.com/pqjwyn/p/5380689.html) .  \n确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。  \n对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。   \n<!-- more -->\n#### 学习方法  \n对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。  \n只是其[官方文档](https://webpack.js.org/contribute/writing-a-loader/)是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。    \n我相信看完文档你就知道如何开发一个loader了。  \n\n## 什么是loader  \n  \nloader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。  \n#### 简单情况   \n\n只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。  \n\nloader在function执行时可以通过this context来访问laoder API 以便更高效的开发。  \n\n一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values...)返回一系列的值。error同样传递给this.callback或者在loader中抛出。  \n\nloader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象   \n\n#### 复杂情况:    \n\n当多个loader被链式调用时，只有最后一个loader获得资源文件。  \n同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。  \n其他loader接收值由上一个loader传递。  \n\n换句话说，链式loader执行顺序从右至左或者自下而上。  \n举个栗子：下面这段代码的执行顺序就是自下而上  foo-loader==>bar-loader  \n```js\nmodule: {\n  loaders: [\n    {\n      test: /\\.js/,\n      loaders: [\n        'bar-loader',\n        'foo-loader'\n      ]\n    }\n  ]\n}\n```  \n\n#### 注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader   \n\n如果你的文件夹不在该目录下需要在config下面增加一项配置:  \n即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。\n```js  \n    resolveLoader: {\n        modules: ['node_modules', path.resolve(__dirname, 'loaders')]\n    }\n```   \n#### 温馨提示\nps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。    \n一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。   \n例如，我手写的myloader在loaders下面，例子如下。  \n```js   \n     resolveLoader:{\n        modules: ['node_modules','loader']\n    }\n```   \n## Examples     \n\n就这么简单就是个普通的loader\n```js  \n    module.exports = function(source,map){\n    this.cacheable && this.cacheable()\n    this.value = source\n    return '/*copy@ xiaoxiangdaiyu*/'+JSON.stringify(source)\n    }\n```   \n## 开发指南  \n\nloader需要遵循以下事项。   \n以下事项按优先级排列，第一条具有最高优先级。   \n\n#### 一、单一任务    \n\nloaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情  \n也就是说，在非必要的状况下没有必要将他们转换为js。  \n\n例如：通过查询字符串将一个字符串模板转化为html。   \n如果你写了个loader做了所有事情那么你违背了loader的第一条要求。   \n你应该为每一个task创建一个loader并且通过管道来使用它们  \n* jade-loader: 转换模板为一个module   \n* apply-loader: 创建一个module并通过查询参数来返回结果  \n* html-loade: 创建一个处理html并返回一个string的模块   \n \n#### 二、创建moulde话的模块，即正常的模块   \n\nloader产出的module应该和遵循和普通的module一样的设计原则。  \n举个例子，下面这样设计是不好的，没有模块化，依赖全局状态  \n```js\n    require(\"any-template-language-loader!./xyz.atl\");\n    var html = anyTemplateLanguage.render(\"xyz\");\n```  \n\n#### 三、尽量表明该loader是否可以缓存  \n\n大部分loaders是cacheable，所以应该标明是否cacheable。   \n只需要在loader里面调用即可  \n```js  \n    // Cacheable identity loader\nmodule.exports = function(source) {\n\tthis.cacheable();\n\treturn source;\n};\n```  \n\n#### 四、不要在运行和模块之间保存状态     \n\n* 一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态  \n* 一个loader相对于同一模块之前的编译过程应该是独立的。\n\n#### 五、标明依赖   \n\n如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们  \n\n```js  \n    var path = require(\"path\");\n    module.exports = function(source) {\n\tthis.cacheable();\n\tvar callback = this.async();\n\tvar headerPath = path.resolve(\"header.js\");\n\tthis.addDependency(headerPath);\n\tfs.readFile(headerPath, \"utf-8\", function(err, header) {\n\t\tif(err) return callback(err);\n\t\tcallback(null, header + \"\\n\" + source);\n\t});\n};\n```    \n\n#### 六、解析依赖  \n\n很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(...)。这些依赖应该被模块系统所解析。  \n##### 下面是两种解决方式：\n* 1、将它们转化成require   \n* 2、 用this.resolve方法来解析路径  \n\n##### 下面是两个示例   \n\n* 1、css-loader: 将依赖转化成require，即用require来替换@import和 url(...)，解析对其他样式文件的依赖  \n* 2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。  \n\n如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.  \n```js  \n    url(file) -> require(\"./file\")\n    url(~module) -> require(\"module\")\n```  \n\n\n#### 七、抽离公共代码  \n\nextract common code  我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装  \n不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中\n\n#### 八、避免写入绝对路径  \n\n不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。   \n例子：  \n```js  \n    var loaderUtils = require(\"loader-utils\");\n    return \"var runtime = require(\" +\n    loaderUtils.stringifyRequest(this, \"!\" + require.resolve(\"module/runtime\")) +\n  \");\";\n```  \n\n#### 九、使用peerDependencies来指明依赖的库 \n\n使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。  \n\n#### 十、可编程对象作为查询项  \n\n有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。\n\n```js  \n     // webpack.config.js\n    module.exports = {\n        ...\n    lessLoader: {\n        lessPlugins: [\n        new LessPluginCleanCSS({advanced: true})\n        ]\n    }\n};\n```\n\n#### 结束语   \n至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步[w-loader](https://github.com/xiaoxiangdaiyu/w-loader)查看。   \n另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   \n","source":"_posts/webpack/plugin.md","raw":"---\ntitle: 如何开发webpack plugin\ndate: 2017-10-14\n---\n## 关于webpack  \n作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。  \n有兴趣的同学可以参考下我很早之前的[webpack简介](http://www.cnblogs.com/pqjwyn/p/5380689.html) .  \n确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。  \n对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。   \n<!-- more -->\n#### 学习方法  \n对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。  \n只是其[官方文档](https://webpack.js.org/contribute/writing-a-loader/)是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。    \n我相信看完文档你就知道如何开发一个loader了。  \n\n## 什么是loader  \n  \nloader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。  \n#### 简单情况   \n\n只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。  \n\nloader在function执行时可以通过this context来访问laoder API 以便更高效的开发。  \n\n一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values...)返回一系列的值。error同样传递给this.callback或者在loader中抛出。  \n\nloader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象   \n\n#### 复杂情况:    \n\n当多个loader被链式调用时，只有最后一个loader获得资源文件。  \n同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。  \n其他loader接收值由上一个loader传递。  \n\n换句话说，链式loader执行顺序从右至左或者自下而上。  \n举个栗子：下面这段代码的执行顺序就是自下而上  foo-loader==>bar-loader  \n```js\nmodule: {\n  loaders: [\n    {\n      test: /\\.js/,\n      loaders: [\n        'bar-loader',\n        'foo-loader'\n      ]\n    }\n  ]\n}\n```  \n\n#### 注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader   \n\n如果你的文件夹不在该目录下需要在config下面增加一项配置:  \n即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。\n```js  \n    resolveLoader: {\n        modules: ['node_modules', path.resolve(__dirname, 'loaders')]\n    }\n```   \n#### 温馨提示\nps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。    \n一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。   \n例如，我手写的myloader在loaders下面，例子如下。  \n```js   \n     resolveLoader:{\n        modules: ['node_modules','loader']\n    }\n```   \n## Examples     \n\n就这么简单就是个普通的loader\n```js  \n    module.exports = function(source,map){\n    this.cacheable && this.cacheable()\n    this.value = source\n    return '/*copy@ xiaoxiangdaiyu*/'+JSON.stringify(source)\n    }\n```   \n## 开发指南  \n\nloader需要遵循以下事项。   \n以下事项按优先级排列，第一条具有最高优先级。   \n\n#### 一、单一任务    \n\nloaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情  \n也就是说，在非必要的状况下没有必要将他们转换为js。  \n\n例如：通过查询字符串将一个字符串模板转化为html。   \n如果你写了个loader做了所有事情那么你违背了loader的第一条要求。   \n你应该为每一个task创建一个loader并且通过管道来使用它们  \n* jade-loader: 转换模板为一个module   \n* apply-loader: 创建一个module并通过查询参数来返回结果  \n* html-loade: 创建一个处理html并返回一个string的模块   \n \n#### 二、创建moulde话的模块，即正常的模块   \n\nloader产出的module应该和遵循和普通的module一样的设计原则。  \n举个例子，下面这样设计是不好的，没有模块化，依赖全局状态  \n```js\n    require(\"any-template-language-loader!./xyz.atl\");\n    var html = anyTemplateLanguage.render(\"xyz\");\n```  \n\n#### 三、尽量表明该loader是否可以缓存  \n\n大部分loaders是cacheable，所以应该标明是否cacheable。   \n只需要在loader里面调用即可  \n```js  \n    // Cacheable identity loader\nmodule.exports = function(source) {\n\tthis.cacheable();\n\treturn source;\n};\n```  \n\n#### 四、不要在运行和模块之间保存状态     \n\n* 一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态  \n* 一个loader相对于同一模块之前的编译过程应该是独立的。\n\n#### 五、标明依赖   \n\n如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们  \n\n```js  \n    var path = require(\"path\");\n    module.exports = function(source) {\n\tthis.cacheable();\n\tvar callback = this.async();\n\tvar headerPath = path.resolve(\"header.js\");\n\tthis.addDependency(headerPath);\n\tfs.readFile(headerPath, \"utf-8\", function(err, header) {\n\t\tif(err) return callback(err);\n\t\tcallback(null, header + \"\\n\" + source);\n\t});\n};\n```    \n\n#### 六、解析依赖  \n\n很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(...)。这些依赖应该被模块系统所解析。  \n##### 下面是两种解决方式：\n* 1、将它们转化成require   \n* 2、 用this.resolve方法来解析路径  \n\n##### 下面是两个示例   \n\n* 1、css-loader: 将依赖转化成require，即用require来替换@import和 url(...)，解析对其他样式文件的依赖  \n* 2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。  \n\n如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.  \n```js  \n    url(file) -> require(\"./file\")\n    url(~module) -> require(\"module\")\n```  \n\n\n#### 七、抽离公共代码  \n\nextract common code  我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装  \n不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中\n\n#### 八、避免写入绝对路径  \n\n不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。   \n例子：  \n```js  \n    var loaderUtils = require(\"loader-utils\");\n    return \"var runtime = require(\" +\n    loaderUtils.stringifyRequest(this, \"!\" + require.resolve(\"module/runtime\")) +\n  \");\";\n```  \n\n#### 九、使用peerDependencies来指明依赖的库 \n\n使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。  \n\n#### 十、可编程对象作为查询项  \n\n有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。\n\n```js  \n     // webpack.config.js\n    module.exports = {\n        ...\n    lessLoader: {\n        lessPlugins: [\n        new LessPluginCleanCSS({advanced: true})\n        ]\n    }\n};\n```\n\n#### 结束语   \n至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步[w-loader](https://github.com/xiaoxiangdaiyu/w-loader)查看。   \n另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   \n","slug":"webpack/plugin","published":1,"updated":"2017-12-15T11:54:14.122Z","_id":"cjb7uq9b10004ue92p97yvfvf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于webpack\"><a href=\"#关于webpack\" class=\"headerlink\" title=\"关于webpack\"></a>关于webpack</h2><p>作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。<br>有兴趣的同学可以参考下我很早之前的<a href=\"http://www.cnblogs.com/pqjwyn/p/5380689.html\" target=\"_blank\" rel=\"noopener\">webpack简介</a> .<br>确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。<br>对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。<br><a id=\"more\"></a></p>\n<h4 id=\"学习方法\"><a href=\"#学习方法\" class=\"headerlink\" title=\"学习方法\"></a>学习方法</h4><p>对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。<br>只是其<a href=\"https://webpack.js.org/contribute/writing-a-loader/\" target=\"_blank\" rel=\"noopener\">官方文档</a>是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。<br>我相信看完文档你就知道如何开发一个loader了。  </p>\n<h2 id=\"什么是loader\"><a href=\"#什么是loader\" class=\"headerlink\" title=\"什么是loader\"></a>什么是loader</h2><p>loader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。  </p>\n<h4 id=\"简单情况\"><a href=\"#简单情况\" class=\"headerlink\" title=\"简单情况\"></a>简单情况</h4><p>只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。  </p>\n<p>loader在function执行时可以通过this context来访问laoder API 以便更高效的开发。  </p>\n<p>一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values…)返回一系列的值。error同样传递给this.callback或者在loader中抛出。  </p>\n<p>loader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象   </p>\n<h4 id=\"复杂情况\"><a href=\"#复杂情况\" class=\"headerlink\" title=\"复杂情况:\"></a>复杂情况:</h4><p>当多个loader被链式调用时，只有最后一个loader获得资源文件。<br>同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。<br>其他loader接收值由上一个loader传递。  </p>\n<p>换句话说，链式loader执行顺序从右至左或者自下而上。<br>举个栗子：下面这段代码的执行顺序就是自下而上  foo-loader==&gt;bar-loader<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  loaders: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js/</span>,</span><br><span class=\"line\">      loaders: [</span><br><span class=\"line\">        <span class=\"string\">'bar-loader'</span>,</span><br><span class=\"line\">        <span class=\"string\">'foo-loader'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">如果你的文件夹不在该目录下需要在config下面增加一项配置:  </span></span><br><span class=\"line\"><span class=\"string\">即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    resolveLoader: &#123;</span><br><span class=\"line\">        modules: [<span class=\"string\">'node_modules'</span>, path.resolve(__dirname, <span class=\"string\">'loaders'</span>)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">#### 温馨提示</span></span><br><span class=\"line\"><span class=\"string\">ps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。    </span></span><br><span class=\"line\"><span class=\"string\">一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。   </span></span><br><span class=\"line\"><span class=\"string\">例如，我手写的myloader在loaders下面，例子如下。  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js   </span><br><span class=\"line\">     resolveLoader:&#123;</span><br><span class=\"line\">        modules: [<span class=\"string\">'node_modules'</span>,<span class=\"string\">'loader'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">## Examples     </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">就这么简单就是个普通的loader</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source,map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = source</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'/*copy@ xiaoxiangdaiyu*/'</span>+<span class=\"built_in\">JSON</span>.stringify(source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">## 开发指南  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">loader需要遵循以下事项。   </span></span><br><span class=\"line\"><span class=\"string\">以下事项按优先级排列，第一条具有最高优先级。   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 一、单一任务    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">loaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情  </span></span><br><span class=\"line\"><span class=\"string\">也就是说，在非必要的状况下没有必要将他们转换为js。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">例如：通过查询字符串将一个字符串模板转化为html。   </span></span><br><span class=\"line\"><span class=\"string\">如果你写了个loader做了所有事情那么你违背了loader的第一条要求。   </span></span><br><span class=\"line\"><span class=\"string\">你应该为每一个task创建一个loader并且通过管道来使用它们  </span></span><br><span class=\"line\"><span class=\"string\">* jade-loader: 转换模板为一个module   </span></span><br><span class=\"line\"><span class=\"string\">* apply-loader: 创建一个module并通过查询参数来返回结果  </span></span><br><span class=\"line\"><span class=\"string\">* html-loade: 创建一个处理html并返回一个string的模块   </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">#### 二、创建moulde话的模块，即正常的模块   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">loader产出的module应该和遵循和普通的module一样的设计原则。  </span></span><br><span class=\"line\"><span class=\"string\">举个例子，下面这样设计是不好的，没有模块化，依赖全局状态  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">\"any-template-language-loader!./xyz.atl\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> html = anyTemplateLanguage.render(<span class=\"string\">\"xyz\"</span>);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 三、尽量表明该loader是否可以缓存  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">大部分loaders是cacheable，所以应该标明是否cacheable。   </span></span><br><span class=\"line\"><span class=\"string\">只需要在loader里面调用即可  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    <span class=\"comment\">// Cacheable identity loader</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> source;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 四、不要在运行和模块之间保存状态     </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态  </span></span><br><span class=\"line\"><span class=\"string\">* 一个loader相对于同一模块之前的编译过程应该是独立的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 五、标明依赖   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> headerPath = path.resolve(<span class=\"string\">\"header.js\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.addDependency(headerPath);</span><br><span class=\"line\">\tfs.readFile(headerPath, <span class=\"string\">\"utf-8\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, header</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">\t\tcallback(<span class=\"literal\">null</span>, header + <span class=\"string\">\"\\n\"</span> + source);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 六、解析依赖  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(...)。这些依赖应该被模块系统所解析。  </span></span><br><span class=\"line\"><span class=\"string\">##### 下面是两种解决方式：</span></span><br><span class=\"line\"><span class=\"string\">* 1、将它们转化成require   </span></span><br><span class=\"line\"><span class=\"string\">* 2、 用this.resolve方法来解析路径  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">##### 下面是两个示例   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 1、css-loader: 将依赖转化成require，即用require来替换@import和 url(...)，解析对其他样式文件的依赖  </span></span><br><span class=\"line\"><span class=\"string\">* 2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    url(file) -&gt; <span class=\"built_in\">require</span>(<span class=\"string\">\"./file\"</span>)</span><br><span class=\"line\">    url(~<span class=\"built_in\">module</span>) -&gt; <span class=\"built_in\">require</span>(<span class=\"string\">\"module\"</span>)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 七、抽离公共代码  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">extract common code  我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装  </span></span><br><span class=\"line\"><span class=\"string\">不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 八、避免写入绝对路径  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。   </span></span><br><span class=\"line\"><span class=\"string\">例子：  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">\"loader-utils\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"var runtime = require(\"</span> +</span><br><span class=\"line\">    loaderUtils.stringifyRequest(<span class=\"keyword\">this</span>, <span class=\"string\">\"!\"</span> + <span class=\"built_in\">require</span>.resolve(<span class=\"string\">\"module/runtime\"</span>)) +</span><br><span class=\"line\">  <span class=\"string\">\");\"</span>;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 九、使用peerDependencies来指明依赖的库 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 十、可编程对象作为查询项  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">     <span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    lessLoader: &#123;</span><br><span class=\"line\">        lessPlugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> LessPluginCleanCSS(&#123;<span class=\"attr\">advanced</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步<a href=\"https://github.com/xiaoxiangdaiyu/w-loader\" target=\"_blank\" rel=\"noopener\">w-loader</a>查看。<br>另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"关于webpack\"><a href=\"#关于webpack\" class=\"headerlink\" title=\"关于webpack\"></a>关于webpack</h2><p>作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。<br>有兴趣的同学可以参考下我很早之前的<a href=\"http://www.cnblogs.com/pqjwyn/p/5380689.html\" target=\"_blank\" rel=\"noopener\">webpack简介</a> .<br>确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。<br>对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。<br>","more":"</p>\n<h4 id=\"学习方法\"><a href=\"#学习方法\" class=\"headerlink\" title=\"学习方法\"></a>学习方法</h4><p>对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。<br>只是其<a href=\"https://webpack.js.org/contribute/writing-a-loader/\" target=\"_blank\" rel=\"noopener\">官方文档</a>是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。<br>我相信看完文档你就知道如何开发一个loader了。  </p>\n<h2 id=\"什么是loader\"><a href=\"#什么是loader\" class=\"headerlink\" title=\"什么是loader\"></a>什么是loader</h2><p>loader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。  </p>\n<h4 id=\"简单情况\"><a href=\"#简单情况\" class=\"headerlink\" title=\"简单情况\"></a>简单情况</h4><p>只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。  </p>\n<p>loader在function执行时可以通过this context来访问laoder API 以便更高效的开发。  </p>\n<p>一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values…)返回一系列的值。error同样传递给this.callback或者在loader中抛出。  </p>\n<p>loader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象   </p>\n<h4 id=\"复杂情况\"><a href=\"#复杂情况\" class=\"headerlink\" title=\"复杂情况:\"></a>复杂情况:</h4><p>当多个loader被链式调用时，只有最后一个loader获得资源文件。<br>同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。<br>其他loader接收值由上一个loader传递。  </p>\n<p>换句话说，链式loader执行顺序从右至左或者自下而上。<br>举个栗子：下面这段代码的执行顺序就是自下而上  foo-loader==&gt;bar-loader<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  loaders: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js/</span>,</span><br><span class=\"line\">      loaders: [</span><br><span class=\"line\">        <span class=\"string\">'bar-loader'</span>,</span><br><span class=\"line\">        <span class=\"string\">'foo-loader'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">如果你的文件夹不在该目录下需要在config下面增加一项配置:  </span></span><br><span class=\"line\"><span class=\"string\">即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    resolveLoader: &#123;</span><br><span class=\"line\">        modules: [<span class=\"string\">'node_modules'</span>, path.resolve(__dirname, <span class=\"string\">'loaders'</span>)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">#### 温馨提示</span></span><br><span class=\"line\"><span class=\"string\">ps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。    </span></span><br><span class=\"line\"><span class=\"string\">一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。   </span></span><br><span class=\"line\"><span class=\"string\">例如，我手写的myloader在loaders下面，例子如下。  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js   </span><br><span class=\"line\">     resolveLoader:&#123;</span><br><span class=\"line\">        modules: [<span class=\"string\">'node_modules'</span>,<span class=\"string\">'loader'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">## Examples     </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">就这么简单就是个普通的loader</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source,map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = source</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'/*copy@ xiaoxiangdaiyu*/'</span>+<span class=\"built_in\">JSON</span>.stringify(source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">## 开发指南  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">loader需要遵循以下事项。   </span></span><br><span class=\"line\"><span class=\"string\">以下事项按优先级排列，第一条具有最高优先级。   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 一、单一任务    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">loaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情  </span></span><br><span class=\"line\"><span class=\"string\">也就是说，在非必要的状况下没有必要将他们转换为js。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">例如：通过查询字符串将一个字符串模板转化为html。   </span></span><br><span class=\"line\"><span class=\"string\">如果你写了个loader做了所有事情那么你违背了loader的第一条要求。   </span></span><br><span class=\"line\"><span class=\"string\">你应该为每一个task创建一个loader并且通过管道来使用它们  </span></span><br><span class=\"line\"><span class=\"string\">* jade-loader: 转换模板为一个module   </span></span><br><span class=\"line\"><span class=\"string\">* apply-loader: 创建一个module并通过查询参数来返回结果  </span></span><br><span class=\"line\"><span class=\"string\">* html-loade: 创建一个处理html并返回一个string的模块   </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">#### 二、创建moulde话的模块，即正常的模块   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">loader产出的module应该和遵循和普通的module一样的设计原则。  </span></span><br><span class=\"line\"><span class=\"string\">举个例子，下面这样设计是不好的，没有模块化，依赖全局状态  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">\"any-template-language-loader!./xyz.atl\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> html = anyTemplateLanguage.render(<span class=\"string\">\"xyz\"</span>);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 三、尽量表明该loader是否可以缓存  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">大部分loaders是cacheable，所以应该标明是否cacheable。   </span></span><br><span class=\"line\"><span class=\"string\">只需要在loader里面调用即可  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    <span class=\"comment\">// Cacheable identity loader</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> source;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 四、不要在运行和模块之间保存状态     </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态  </span></span><br><span class=\"line\"><span class=\"string\">* 一个loader相对于同一模块之前的编译过程应该是独立的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 五、标明依赖   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.async();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> headerPath = path.resolve(<span class=\"string\">\"header.js\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.addDependency(headerPath);</span><br><span class=\"line\">\tfs.readFile(headerPath, <span class=\"string\">\"utf-8\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, header</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">\t\tcallback(<span class=\"literal\">null</span>, header + <span class=\"string\">\"\\n\"</span> + source);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 六、解析依赖  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(...)。这些依赖应该被模块系统所解析。  </span></span><br><span class=\"line\"><span class=\"string\">##### 下面是两种解决方式：</span></span><br><span class=\"line\"><span class=\"string\">* 1、将它们转化成require   </span></span><br><span class=\"line\"><span class=\"string\">* 2、 用this.resolve方法来解析路径  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">##### 下面是两个示例   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 1、css-loader: 将依赖转化成require，即用require来替换@import和 url(...)，解析对其他样式文件的依赖  </span></span><br><span class=\"line\"><span class=\"string\">* 2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    url(file) -&gt; <span class=\"built_in\">require</span>(<span class=\"string\">\"./file\"</span>)</span><br><span class=\"line\">    url(~<span class=\"built_in\">module</span>) -&gt; <span class=\"built_in\">require</span>(<span class=\"string\">\"module\"</span>)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 七、抽离公共代码  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">extract common code  我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装  </span></span><br><span class=\"line\"><span class=\"string\">不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 八、避免写入绝对路径  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。   </span></span><br><span class=\"line\"><span class=\"string\">例子：  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">\"loader-utils\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"var runtime = require(\"</span> +</span><br><span class=\"line\">    loaderUtils.stringifyRequest(<span class=\"keyword\">this</span>, <span class=\"string\">\"!\"</span> + <span class=\"built_in\">require</span>.resolve(<span class=\"string\">\"module/runtime\"</span>)) +</span><br><span class=\"line\">  <span class=\"string\">\");\"</span>;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 九、使用peerDependencies来指明依赖的库 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 十、可编程对象作为查询项  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js  </span><br><span class=\"line\">     <span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    lessLoader: &#123;</span><br><span class=\"line\">        lessPlugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> LessPluginCleanCSS(&#123;<span class=\"attr\">advanced</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步<a href=\"https://github.com/xiaoxiangdaiyu/w-loader\" target=\"_blank\" rel=\"noopener\">w-loader</a>查看。<br>另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。   </p>"},{"title":"实现一个websocket服务器-理论篇","date":"2017-11-06T02:50:06.000Z","_content":"本文是Writing WebSocket servers的中文文档，翻译自MDN[Writing WebSocket servers](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers)。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。\n<!-- more -->\n## websocket服务器的本质\nWebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建一个定制服务器的任务通常会让让人们感到害怕。然而基于实现一个简单的Websocket服务器没有那么麻烦。   \n\n一个WebSocket server可以使用任意的服务端编程语言来实现，只要该语言能实现基本的Berkeley sockets（伯克利套接字）。例如c(++)、Python、PHP、服务端JavaScript(node.js)。下面不是关于特定语言的教程，而是一个促进我们搭建自己服务器的指南。   \n\n我们需要明白http如何工作并且有中等编程经验。基于特定语言的支持，了解TCP sockets 同样也是必要的。该篇教程的范围是介绍开发一个WebSocket server需要的最少知识。   \n\n该文章将会从很底层的观点来解释一个 WebSocket server。WebSocket servers 通常是独立的专门的servers(因为负载均衡和其他一些原因),因此通常使用一个反向代理（例如一个标准的HTTP server）来发现 WebSocket握手协议，预处理他们然后将客户端信息发送给真正的WebSocket server。这意味着WebSocket server不必充斥这cookie和签名的处理方法。完全可以放在代理中处理。   \n## websocket 握手规则    \n\n首先，服务器必须使用标准的TCPsocket来监听即将到来的socket连接。基于我们的平台，这些很可能被我们处理了(成熟的服务端语言提供了这些接口，使我们不必从头做起)。例如，假设我们的服务器监听example.com的8000端口，socket server响应/chat的GET请求。   \n\n警告：服务器可以选择监听任意端口，但是如果在80或443之外，可能会遇到防火墙或者代理的问题。443端口大多数情况下是可以的，当然需要一个安全连接(TLS/SSL)。此外，注意这一点，大多数浏览器不允许从安全的页面连接到不安全的Websocket服务器。  \n在WebSockets中握手是web，是HTTP想WS转化的桥梁。通过握手，连接的详情会被判断，并且在完成之前每一个部分都可以终端如果条件不满足。服务器必须谨慎解析客户端请求的所有信息，否则安全问题将会发生。  \n\n## 客户端握手请求   \n\n尽管我们在开发一个服务器，客户端仍然需要发起一个Websocket握手过程。因此我们必须知道如何解析客户端的请求。客户端将会发送一个标准的HTTP请求，大概像下面的例子(HTTP版本必须1.1及以上，请求方式为GET)。   \n \n```  \n    GET /chat HTTP/1.1\n    Host: example.com:8000\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n    Sec-WebSocket-Version: 13  \n```     \n \n \n此处客户端可以发起扩展或者子协议，在[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)查看更多细节。同样，公共的headers像User-Agent, Referer, Cookie, or authentication等同样可以包括，一句话做你想做的。这些并不直接和WebSocket相关，忽略掉他们也是安全的，在很多公共的设置中，会有一个代理服务器来处理这些信息。 \n\n如果有的header不被识别或者有非法值，服务器应该发送'400 Bad Request'并立刻关闭socket，通常也会在HTTP返回体中给出握手失败的原因，不过这些信息可能不会被展示(因为浏览器不会展示他们)。如果服务器不识别WebSockets的版本，应该返回一个Sec-WebSocket-Version 消息头，指明可以接受的版本(最好是V13,及最新)。下面一起看一下最神秘的消息头Sec-WebSocket-Key。    \n\n### 提示：\n* 所有的浏览器将会发送一个Origin header,我们可以使用这个header来做安全限制（检查是否相同的origin）如果并不是期望的origin返回一个403 Forbidden。然后注意下那些非浏览器的客户端可以发送一个伪造的origin，很多应用将会拒绝没有该消息头的请求。  \n* 请求资源定位符(这里的/chat)在规范中没有明确的定义，所以很多人巧妙的使用它，让一个服务器处理多个WebSocket 应用。例如，example.com/chat可以指向一个多用户聊天app，而相同服务器上的/game指向多用户的游戏。即[相同域名下的路径可以指向不同应用]()。   \n* 规范的HTTP code只可以在握手之前使用，当握手成功之后，应该使用不同的code集合。请查看规范第7.4节   \n\n## 服务器握手返回  \n\n当服务器接受到请求时，应该发送一个相当奇怪的响应，看起来大概这个样子，不过仍然遵循HTTP规范。 请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 \n\n```  \n    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n```  \n\n此外，服务器可以在这里决定扩展或者子协议请求。更多详情请查看[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)。Sec-WebSocket-Accept 部分很有趣，服务器必须基于客户端请求的Sec-WebSocket-Key 中得到它，具体做法如下：将Sec-WebSocket-Key 和\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。\n\n###提示  \n因为这个看似复杂的过程存在，所以客户端不用关心服务器是否支持websocket。另外，该过程的重要性还是在于安全性，如果一个服务器将一个Websocket连接作为http请求解析的话，将会有不小的问题。   \n\n因此，如果key是\"dGhlIHNhbXBsZSBub25jZQ==\"，Accept将会是\"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\"，一旦服务器发送这些消息头，握手协议就完成了。   \n\n服务器在回复握手之前，可以发送其他的header像Set-Cookie、要求签名、重定向等。   \n\n## 跟踪客户端  \n\n虽然并不直接与Websocket协议相关，但值得我们注意。服务器将会跟踪客户端的sockets，因此我们不必和已经完成握手协议的客户端再次进行握手。相同客户端的IP地址可以尝试多次连接(但是服务器可以选择拒绝，如果他们尝试多次连接以达到保存自己Denial-of-Service 踪迹的目的)  \n\n## FramesEdit 数据交换  \n\n客户端和服务器都可以在任意时间发送消息、这正是websocket的魔力所在。然而从数据帧中提取信息的过程就不那么充满魔力了。尽管所有的帧遵循相同的特定格式，从客户端发到服务器的数据通过X异或加密 (使用32位的密钥)进行处理，该规范的第五章详细描述了相关内容。\n \n     \n## 格式  \n每个从客户端发送到服务器的数据帧遵循下面的格式：  \n  \n```  \n    帧格式:  \n​​\n      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n\n```\n\n\nMASK (掩码:一串二进制代码对目标字段进行位与运算，屏蔽当前的输入位。)位只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1(事实上5.1节表明，如果客户端发送未掩码处理的消息，服务器必须断开连接)当发送一个帧至客户端时，不要处理数据并且不设置mask位。下面将会阐述原因。注意：我们必须处理消息即使用一个安全的socket。RSV1-3可以被忽略，这是待扩展位。   \n\nopcode字段定义如何解析有效的数据：  \n* 0x0 继续处理\n* 0x1 text(必须是UTF-8编码)  \n* 0x2 二进制 和其他叫做控制代码的数据。\n* 0x3-0x7 0xB-0xF 该版本的WebSockets无意义   \n\nFIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。   \n\n## 有效编码数据长度  \n\n为了解析有效编码数据，我们必须知道何时结束。这是知道有效数据长度的重要所在。不幸的是，有一些复杂。让我们分步骤来看。  \n1. 阅读9-15位并且作为无符号整数解释，如果是小于等于125，这就是数据的长度。如果是126，请继续步骤2,如果是127请阅读，步骤3   \n2. 阅读后面16位并且作为无符号整数解读，结束  \n3. 阅读后面64位并且作为无符号整数解读，结束    \n\n\n## 读取并反掩码数据  \n\n如果MASK位被设置(当然它应该被设置，对于一个从客户端到服务器的消息)，读取后4字节（即32位），即加密的key。一旦数据长度和加密key被解码，我们可以直接从socket中读取成批的字节。获取编码的数据和掩码key，将其解码，循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算，如果用js就如下所示(该规则就是加密解密的规则而已，没必要深究，大家知道如何使用就好)。 \n\n```js\nvar DECODED = \"\";\n    for (var i = 0; i < ENCODED.length; i++) {\n        DECODED[i] = ENCODED[i] ^ MASK[i % 4];\n    }\n``` \n\n现在我们可以知道我们应用上解码之后的数据具体含义了。\n\n## 消息分割\n\nFIN和opcode字段共同工作来讲一个消息分解为单独的帧，该过程叫做消息分割，只有在opcodes为0x0-0x2时才可用（前面也提到，当前版本其他数值无意义）。  \n\n回想一下，opcode指明了一个帧的将要做什么，如果是0x1，数据是text。如果是0x2，诗句是二进制数据。然而当其为0x0时，该帧是一个继续帧，表示服务器应该将该帧的有效数据和服务器收到的最后一帧链接起来。这是一个草图，指明了当客户端发送text消息时，第一个消息在一个单独的帧里发送，然而第二个消息却包括三个帧，服务器如何反应。FIN和opcode细节仅仅对客户端展示。看一下下面的例子应该会更容易理解。\n  \n```   \nClient: FIN=1, opcode=0x1, msg=\"hello\"\nServer: (消息传输过程完成) Hi.\nClient: FIN=0, opcode=0x1, msg=\"and a\"\nServer: (监听，新的消息包含开始的文本)\nClient: FIN=0, opcode=0x0, msg=\"happy new\"\nServer: (监听，有效数据与上面的消息拼接)\nClient: FIN=1, opcode=0x0, msg=\"year!\"\nServer: (消息传输完成) Happy new year to you too!\n     \n``` \n \n注意:第一帧包括一个完全的消息(FIN=1并且opcode!=0x0)，因此当服务器发现结束时可以返回。第二帧有效数据为text(opcode=0x1)，但是完整的消息没有到达(FIN=0)。该消息所有剩下的部分通过继续帧发送(opcode=0x0)，并且最后以帧通过FIN=1表明身份。  \n\n## WebSockets 的心跳：ping和pong  \n\n在握手接受之后的任意点，不论是客户端还是服务器都可以选择发送ping给另一部分。当ping被接收时，接收方必须尽可能的返回一个pong。我们可以用该方式来确保连接依然有效。  \n\n一个ping或者pong只是一个规则的帧，但是是控制帧，Pings的opcode为0x9，pong是0xA。当我们得到ping时，返回具有完全相同有效数据的pong。(对ping和pong而言，最大有效数据长度是125)我们可能在没有发送ping的情况下，得到一个pong。这种情况请忽略。\n\n在发送pong之前，如果我们接收到不止一个ping，只需回应一个pong即可。  \n## 关闭连接  \n\n要关闭客户端和服务器之间的连接，我们可以发送一个包含特定控制队列的数据的控制帧来开始关闭的握手协议。当接收到该帧时，另一方发送一个关闭帧作为回应。然后前者会关闭连接。关闭连接之后接收到的数据都会被丢弃。\n\n## 更多  \n\nWebSocket 扩展和子协议在握手过程中通过headers进行约定。有时扩展和子协议太近似了以致于难以分别。最基本的区别是，扩展控制websocket 帧并且修改有效数据。然而子协议构成websocket有效数据并且从不修改任何事物。扩展是可选的广义的，子协议是必须的局限性的。\n\n### 扩展 \n\n将扩展看作压缩一个文件在发送之前，无论你如何做，你将发送相同的数据只不过帧不同而已。收件人最终将会受到与你本地拷贝相同的数据，不过以不同方式发送。这就是扩展做的事情。websockets定义了一个协议和基本的方式去发送数据，然而扩展例如压缩可以以更短的帧来阿松相同的数据。 \n\n### 子协议  \n\n将子协议看作定做的xml表或者文档类型说明。你在使用XML和它的语法，但是你被限制于你同意的结构。WebSocket子协议就是如此。他们不介绍其他一些华丽的东西，仅仅建立结构，像一个文档类型和表一样，两个部分(client & server)都同意该协议,和文档类型和表不同，子协议由服务器实现并且客户端不能对外引用。  \n一个客户端必须请求特定的子协议，为了达到目的，将会发送一些像下面的内容作为原始握手的一部分。  \n\n```\nGET /chat HTTP/1.1\n...\nSec-WebSocket-Protocol: soap, wamp\n```  \n或者等价的写法\n\n```\n...\nSec-WebSocket-Protocol: soap\nSec-WebSocket-Protocol: wamp\n```\n现在，服务器必须选择客户端建议并且支持的一种协议。如果多余一个，发送客户端发送过来的第一个。想象我们的服务器可以使用soap和wamp中的一个，然后，返回的握手中将会发送如下形式。\n\n```\nSec-WebSocket-Protocol: soap\n```\n\n服务器不能发送超过一个的Sec-Websocket-Protocol消息头，如果服务器不想使用任一个子协议，应该不发送Sec-WebSocket-Protocol 消息头。发送一个空白的消息头是错误的。客户端可能会关闭连接如果不能获得期望的子协议。    \n\n如果我们希望我们的服务器遵守一定的子协议，自然地在我们的服务器需要额外的代码。想象我们使用一个子协议json，基于该子协议，所有的数据将会作为JSON传递，如果一个客户端征求子协议并且服务器想使用它，服务你需要有一个JSON解析。实话实说，将会有一个工具库，但是服务器也要需要传递数据。\n\n\n为了避免名称冲突，推荐选用domain的一部分作为子协议的名称。如果我们开发一个使用特定格式的聊天app，我们可能使用这样的名字:Sec-WebSocket-Protocol: chat.example.com  注意，这不是必须的。仅仅是一个可选的惯例，我们可以使用我们想用的任意字符。\n## 结束语 \n翻译这篇文档的初衷是看到关于websocket的中文大部分都是客户端相关的内容，自己又对服务器端的实现感兴趣，没有找到合适的资料，就只好自己阅读下英文，本着提高自己的目的将其翻译下来，希望对其他同学有所帮助，[原文查看](https://github.com/xiaoxiangdaiyu/chartroom/tree/master/src/websocket) 。后面请期待node实现websocket服务器的实践篇。\n## 源文档出处  \n翻译自MDN[Writing WebSocket servers](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers)","source":"_posts/websocket/frame.md","raw":"---\ntitle: 实现一个websocket服务器-理论篇 \ndate: 2017-11-06 10:50:06\n---\n本文是Writing WebSocket servers的中文文档，翻译自MDN[Writing WebSocket servers](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers)。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。\n<!-- more -->\n## websocket服务器的本质\nWebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建一个定制服务器的任务通常会让让人们感到害怕。然而基于实现一个简单的Websocket服务器没有那么麻烦。   \n\n一个WebSocket server可以使用任意的服务端编程语言来实现，只要该语言能实现基本的Berkeley sockets（伯克利套接字）。例如c(++)、Python、PHP、服务端JavaScript(node.js)。下面不是关于特定语言的教程，而是一个促进我们搭建自己服务器的指南。   \n\n我们需要明白http如何工作并且有中等编程经验。基于特定语言的支持，了解TCP sockets 同样也是必要的。该篇教程的范围是介绍开发一个WebSocket server需要的最少知识。   \n\n该文章将会从很底层的观点来解释一个 WebSocket server。WebSocket servers 通常是独立的专门的servers(因为负载均衡和其他一些原因),因此通常使用一个反向代理（例如一个标准的HTTP server）来发现 WebSocket握手协议，预处理他们然后将客户端信息发送给真正的WebSocket server。这意味着WebSocket server不必充斥这cookie和签名的处理方法。完全可以放在代理中处理。   \n## websocket 握手规则    \n\n首先，服务器必须使用标准的TCPsocket来监听即将到来的socket连接。基于我们的平台，这些很可能被我们处理了(成熟的服务端语言提供了这些接口，使我们不必从头做起)。例如，假设我们的服务器监听example.com的8000端口，socket server响应/chat的GET请求。   \n\n警告：服务器可以选择监听任意端口，但是如果在80或443之外，可能会遇到防火墙或者代理的问题。443端口大多数情况下是可以的，当然需要一个安全连接(TLS/SSL)。此外，注意这一点，大多数浏览器不允许从安全的页面连接到不安全的Websocket服务器。  \n在WebSockets中握手是web，是HTTP想WS转化的桥梁。通过握手，连接的详情会被判断，并且在完成之前每一个部分都可以终端如果条件不满足。服务器必须谨慎解析客户端请求的所有信息，否则安全问题将会发生。  \n\n## 客户端握手请求   \n\n尽管我们在开发一个服务器，客户端仍然需要发起一个Websocket握手过程。因此我们必须知道如何解析客户端的请求。客户端将会发送一个标准的HTTP请求，大概像下面的例子(HTTP版本必须1.1及以上，请求方式为GET)。   \n \n```  \n    GET /chat HTTP/1.1\n    Host: example.com:8000\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n    Sec-WebSocket-Version: 13  \n```     \n \n \n此处客户端可以发起扩展或者子协议，在[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)查看更多细节。同样，公共的headers像User-Agent, Referer, Cookie, or authentication等同样可以包括，一句话做你想做的。这些并不直接和WebSocket相关，忽略掉他们也是安全的，在很多公共的设置中，会有一个代理服务器来处理这些信息。 \n\n如果有的header不被识别或者有非法值，服务器应该发送'400 Bad Request'并立刻关闭socket，通常也会在HTTP返回体中给出握手失败的原因，不过这些信息可能不会被展示(因为浏览器不会展示他们)。如果服务器不识别WebSockets的版本，应该返回一个Sec-WebSocket-Version 消息头，指明可以接受的版本(最好是V13,及最新)。下面一起看一下最神秘的消息头Sec-WebSocket-Key。    \n\n### 提示：\n* 所有的浏览器将会发送一个Origin header,我们可以使用这个header来做安全限制（检查是否相同的origin）如果并不是期望的origin返回一个403 Forbidden。然后注意下那些非浏览器的客户端可以发送一个伪造的origin，很多应用将会拒绝没有该消息头的请求。  \n* 请求资源定位符(这里的/chat)在规范中没有明确的定义，所以很多人巧妙的使用它，让一个服务器处理多个WebSocket 应用。例如，example.com/chat可以指向一个多用户聊天app，而相同服务器上的/game指向多用户的游戏。即[相同域名下的路径可以指向不同应用]()。   \n* 规范的HTTP code只可以在握手之前使用，当握手成功之后，应该使用不同的code集合。请查看规范第7.4节   \n\n## 服务器握手返回  \n\n当服务器接受到请求时，应该发送一个相当奇怪的响应，看起来大概这个样子，不过仍然遵循HTTP规范。 请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 \n\n```  \n    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n```  \n\n此外，服务器可以在这里决定扩展或者子协议请求。更多详情请查看[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)。Sec-WebSocket-Accept 部分很有趣，服务器必须基于客户端请求的Sec-WebSocket-Key 中得到它，具体做法如下：将Sec-WebSocket-Key 和\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。\n\n###提示  \n因为这个看似复杂的过程存在，所以客户端不用关心服务器是否支持websocket。另外，该过程的重要性还是在于安全性，如果一个服务器将一个Websocket连接作为http请求解析的话，将会有不小的问题。   \n\n因此，如果key是\"dGhlIHNhbXBsZSBub25jZQ==\"，Accept将会是\"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\"，一旦服务器发送这些消息头，握手协议就完成了。   \n\n服务器在回复握手之前，可以发送其他的header像Set-Cookie、要求签名、重定向等。   \n\n## 跟踪客户端  \n\n虽然并不直接与Websocket协议相关，但值得我们注意。服务器将会跟踪客户端的sockets，因此我们不必和已经完成握手协议的客户端再次进行握手。相同客户端的IP地址可以尝试多次连接(但是服务器可以选择拒绝，如果他们尝试多次连接以达到保存自己Denial-of-Service 踪迹的目的)  \n\n## FramesEdit 数据交换  \n\n客户端和服务器都可以在任意时间发送消息、这正是websocket的魔力所在。然而从数据帧中提取信息的过程就不那么充满魔力了。尽管所有的帧遵循相同的特定格式，从客户端发到服务器的数据通过X异或加密 (使用32位的密钥)进行处理，该规范的第五章详细描述了相关内容。\n \n     \n## 格式  \n每个从客户端发送到服务器的数据帧遵循下面的格式：  \n  \n```  \n    帧格式:  \n​​\n      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n\n```\n\n\nMASK (掩码:一串二进制代码对目标字段进行位与运算，屏蔽当前的输入位。)位只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1(事实上5.1节表明，如果客户端发送未掩码处理的消息，服务器必须断开连接)当发送一个帧至客户端时，不要处理数据并且不设置mask位。下面将会阐述原因。注意：我们必须处理消息即使用一个安全的socket。RSV1-3可以被忽略，这是待扩展位。   \n\nopcode字段定义如何解析有效的数据：  \n* 0x0 继续处理\n* 0x1 text(必须是UTF-8编码)  \n* 0x2 二进制 和其他叫做控制代码的数据。\n* 0x3-0x7 0xB-0xF 该版本的WebSockets无意义   \n\nFIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。   \n\n## 有效编码数据长度  \n\n为了解析有效编码数据，我们必须知道何时结束。这是知道有效数据长度的重要所在。不幸的是，有一些复杂。让我们分步骤来看。  \n1. 阅读9-15位并且作为无符号整数解释，如果是小于等于125，这就是数据的长度。如果是126，请继续步骤2,如果是127请阅读，步骤3   \n2. 阅读后面16位并且作为无符号整数解读，结束  \n3. 阅读后面64位并且作为无符号整数解读，结束    \n\n\n## 读取并反掩码数据  \n\n如果MASK位被设置(当然它应该被设置，对于一个从客户端到服务器的消息)，读取后4字节（即32位），即加密的key。一旦数据长度和加密key被解码，我们可以直接从socket中读取成批的字节。获取编码的数据和掩码key，将其解码，循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算，如果用js就如下所示(该规则就是加密解密的规则而已，没必要深究，大家知道如何使用就好)。 \n\n```js\nvar DECODED = \"\";\n    for (var i = 0; i < ENCODED.length; i++) {\n        DECODED[i] = ENCODED[i] ^ MASK[i % 4];\n    }\n``` \n\n现在我们可以知道我们应用上解码之后的数据具体含义了。\n\n## 消息分割\n\nFIN和opcode字段共同工作来讲一个消息分解为单独的帧，该过程叫做消息分割，只有在opcodes为0x0-0x2时才可用（前面也提到，当前版本其他数值无意义）。  \n\n回想一下，opcode指明了一个帧的将要做什么，如果是0x1，数据是text。如果是0x2，诗句是二进制数据。然而当其为0x0时，该帧是一个继续帧，表示服务器应该将该帧的有效数据和服务器收到的最后一帧链接起来。这是一个草图，指明了当客户端发送text消息时，第一个消息在一个单独的帧里发送，然而第二个消息却包括三个帧，服务器如何反应。FIN和opcode细节仅仅对客户端展示。看一下下面的例子应该会更容易理解。\n  \n```   \nClient: FIN=1, opcode=0x1, msg=\"hello\"\nServer: (消息传输过程完成) Hi.\nClient: FIN=0, opcode=0x1, msg=\"and a\"\nServer: (监听，新的消息包含开始的文本)\nClient: FIN=0, opcode=0x0, msg=\"happy new\"\nServer: (监听，有效数据与上面的消息拼接)\nClient: FIN=1, opcode=0x0, msg=\"year!\"\nServer: (消息传输完成) Happy new year to you too!\n     \n``` \n \n注意:第一帧包括一个完全的消息(FIN=1并且opcode!=0x0)，因此当服务器发现结束时可以返回。第二帧有效数据为text(opcode=0x1)，但是完整的消息没有到达(FIN=0)。该消息所有剩下的部分通过继续帧发送(opcode=0x0)，并且最后以帧通过FIN=1表明身份。  \n\n## WebSockets 的心跳：ping和pong  \n\n在握手接受之后的任意点，不论是客户端还是服务器都可以选择发送ping给另一部分。当ping被接收时，接收方必须尽可能的返回一个pong。我们可以用该方式来确保连接依然有效。  \n\n一个ping或者pong只是一个规则的帧，但是是控制帧，Pings的opcode为0x9，pong是0xA。当我们得到ping时，返回具有完全相同有效数据的pong。(对ping和pong而言，最大有效数据长度是125)我们可能在没有发送ping的情况下，得到一个pong。这种情况请忽略。\n\n在发送pong之前，如果我们接收到不止一个ping，只需回应一个pong即可。  \n## 关闭连接  \n\n要关闭客户端和服务器之间的连接，我们可以发送一个包含特定控制队列的数据的控制帧来开始关闭的握手协议。当接收到该帧时，另一方发送一个关闭帧作为回应。然后前者会关闭连接。关闭连接之后接收到的数据都会被丢弃。\n\n## 更多  \n\nWebSocket 扩展和子协议在握手过程中通过headers进行约定。有时扩展和子协议太近似了以致于难以分别。最基本的区别是，扩展控制websocket 帧并且修改有效数据。然而子协议构成websocket有效数据并且从不修改任何事物。扩展是可选的广义的，子协议是必须的局限性的。\n\n### 扩展 \n\n将扩展看作压缩一个文件在发送之前，无论你如何做，你将发送相同的数据只不过帧不同而已。收件人最终将会受到与你本地拷贝相同的数据，不过以不同方式发送。这就是扩展做的事情。websockets定义了一个协议和基本的方式去发送数据，然而扩展例如压缩可以以更短的帧来阿松相同的数据。 \n\n### 子协议  \n\n将子协议看作定做的xml表或者文档类型说明。你在使用XML和它的语法，但是你被限制于你同意的结构。WebSocket子协议就是如此。他们不介绍其他一些华丽的东西，仅仅建立结构，像一个文档类型和表一样，两个部分(client & server)都同意该协议,和文档类型和表不同，子协议由服务器实现并且客户端不能对外引用。  \n一个客户端必须请求特定的子协议，为了达到目的，将会发送一些像下面的内容作为原始握手的一部分。  \n\n```\nGET /chat HTTP/1.1\n...\nSec-WebSocket-Protocol: soap, wamp\n```  \n或者等价的写法\n\n```\n...\nSec-WebSocket-Protocol: soap\nSec-WebSocket-Protocol: wamp\n```\n现在，服务器必须选择客户端建议并且支持的一种协议。如果多余一个，发送客户端发送过来的第一个。想象我们的服务器可以使用soap和wamp中的一个，然后，返回的握手中将会发送如下形式。\n\n```\nSec-WebSocket-Protocol: soap\n```\n\n服务器不能发送超过一个的Sec-Websocket-Protocol消息头，如果服务器不想使用任一个子协议，应该不发送Sec-WebSocket-Protocol 消息头。发送一个空白的消息头是错误的。客户端可能会关闭连接如果不能获得期望的子协议。    \n\n如果我们希望我们的服务器遵守一定的子协议，自然地在我们的服务器需要额外的代码。想象我们使用一个子协议json，基于该子协议，所有的数据将会作为JSON传递，如果一个客户端征求子协议并且服务器想使用它，服务你需要有一个JSON解析。实话实说，将会有一个工具库，但是服务器也要需要传递数据。\n\n\n为了避免名称冲突，推荐选用domain的一部分作为子协议的名称。如果我们开发一个使用特定格式的聊天app，我们可能使用这样的名字:Sec-WebSocket-Protocol: chat.example.com  注意，这不是必须的。仅仅是一个可选的惯例，我们可以使用我们想用的任意字符。\n## 结束语 \n翻译这篇文档的初衷是看到关于websocket的中文大部分都是客户端相关的内容，自己又对服务器端的实现感兴趣，没有找到合适的资料，就只好自己阅读下英文，本着提高自己的目的将其翻译下来，希望对其他同学有所帮助，[原文查看](https://github.com/xiaoxiangdaiyu/chartroom/tree/master/src/websocket) 。后面请期待node实现websocket服务器的实践篇。\n## 源文档出处  \n翻译自MDN[Writing WebSocket servers](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers)","slug":"websocket/frame","published":1,"updated":"2017-12-15T08:01:18.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb7uq9bb0005ue92xq9ono84","content":"<p>本文是Writing WebSocket servers的中文文档，翻译自MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" target=\"_blank\" rel=\"noopener\">Writing WebSocket servers</a>。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。<br><a id=\"more\"></a></p>\n<h2 id=\"websocket服务器的本质\"><a href=\"#websocket服务器的本质\" class=\"headerlink\" title=\"websocket服务器的本质\"></a>websocket服务器的本质</h2><p>WebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建一个定制服务器的任务通常会让让人们感到害怕。然而基于实现一个简单的Websocket服务器没有那么麻烦。   </p>\n<p>一个WebSocket server可以使用任意的服务端编程语言来实现，只要该语言能实现基本的Berkeley sockets（伯克利套接字）。例如c(++)、Python、PHP、服务端JavaScript(node.js)。下面不是关于特定语言的教程，而是一个促进我们搭建自己服务器的指南。   </p>\n<p>我们需要明白http如何工作并且有中等编程经验。基于特定语言的支持，了解TCP sockets 同样也是必要的。该篇教程的范围是介绍开发一个WebSocket server需要的最少知识。   </p>\n<p>该文章将会从很底层的观点来解释一个 WebSocket server。WebSocket servers 通常是独立的专门的servers(因为负载均衡和其他一些原因),因此通常使用一个反向代理（例如一个标准的HTTP server）来发现 WebSocket握手协议，预处理他们然后将客户端信息发送给真正的WebSocket server。这意味着WebSocket server不必充斥这cookie和签名的处理方法。完全可以放在代理中处理。   </p>\n<h2 id=\"websocket-握手规则\"><a href=\"#websocket-握手规则\" class=\"headerlink\" title=\"websocket 握手规则\"></a>websocket 握手规则</h2><p>首先，服务器必须使用标准的TCPsocket来监听即将到来的socket连接。基于我们的平台，这些很可能被我们处理了(成熟的服务端语言提供了这些接口，使我们不必从头做起)。例如，假设我们的服务器监听example.com的8000端口，socket server响应/chat的GET请求。   </p>\n<p>警告：服务器可以选择监听任意端口，但是如果在80或443之外，可能会遇到防火墙或者代理的问题。443端口大多数情况下是可以的，当然需要一个安全连接(TLS/SSL)。此外，注意这一点，大多数浏览器不允许从安全的页面连接到不安全的Websocket服务器。<br>在WebSockets中握手是web，是HTTP想WS转化的桥梁。通过握手，连接的详情会被判断，并且在完成之前每一个部分都可以终端如果条件不满足。服务器必须谨慎解析客户端请求的所有信息，否则安全问题将会发生。  </p>\n<h2 id=\"客户端握手请求\"><a href=\"#客户端握手请求\" class=\"headerlink\" title=\"客户端握手请求\"></a>客户端握手请求</h2><p>尽管我们在开发一个服务器，客户端仍然需要发起一个Websocket握手过程。因此我们必须知道如何解析客户端的请求。客户端将会发送一个标准的HTTP请求，大概像下面的例子(HTTP版本必须1.1及以上，请求方式为GET)。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    GET /chat HTTP/1.1</span><br><span class=\"line\">    Host: example.com:8000</span><br><span class=\"line\">    Upgrade: websocket</span><br><span class=\"line\">    Connection: Upgrade</span><br><span class=\"line\">    Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span><br><span class=\"line\">    Sec-WebSocket-Version: 13  </span><br><span class=\"line\">```     </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">此处客户端可以发起扩展或者子协议，在[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)查看更多细节。同样，公共的headers像User-Agent, Referer, Cookie, or authentication等同样可以包括，一句话做你想做的。这些并不直接和WebSocket相关，忽略掉他们也是安全的，在很多公共的设置中，会有一个代理服务器来处理这些信息。 </span><br><span class=\"line\"></span><br><span class=\"line\">如果有的header不被识别或者有非法值，服务器应该发送&apos;400 Bad Request&apos;并立刻关闭socket，通常也会在HTTP返回体中给出握手失败的原因，不过这些信息可能不会被展示(因为浏览器不会展示他们)。如果服务器不识别WebSockets的版本，应该返回一个Sec-WebSocket-Version 消息头，指明可以接受的版本(最好是V13,及最新)。下面一起看一下最神秘的消息头Sec-WebSocket-Key。    </span><br><span class=\"line\"></span><br><span class=\"line\">### 提示：</span><br><span class=\"line\">* 所有的浏览器将会发送一个Origin header,我们可以使用这个header来做安全限制（检查是否相同的origin）如果并不是期望的origin返回一个403 Forbidden。然后注意下那些非浏览器的客户端可以发送一个伪造的origin，很多应用将会拒绝没有该消息头的请求。  </span><br><span class=\"line\">* 请求资源定位符(这里的/chat)在规范中没有明确的定义，所以很多人巧妙的使用它，让一个服务器处理多个WebSocket 应用。例如，example.com/chat可以指向一个多用户聊天app，而相同服务器上的/game指向多用户的游戏。即[相同域名下的路径可以指向不同应用]()。   </span><br><span class=\"line\">* 规范的HTTP code只可以在握手之前使用，当握手成功之后，应该使用不同的code集合。请查看规范第7.4节   </span><br><span class=\"line\"></span><br><span class=\"line\">## 服务器握手返回  </span><br><span class=\"line\"></span><br><span class=\"line\">当服务器接受到请求时，应该发送一个相当奇怪的响应，看起来大概这个样子，不过仍然遵循HTTP规范。 请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 </span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\">    HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">    Upgrade: websocket</span><br><span class=\"line\">    Connection: Upgrade</span><br><span class=\"line\">    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">此外，服务器可以在这里决定扩展或者子协议请求。更多详情请查看[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)。Sec-WebSocket-Accept 部分很有趣，服务器必须基于客户端请求的Sec-WebSocket-Key 中得到它，具体做法如下：将Sec-WebSocket-Key 和&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。</span><br><span class=\"line\"></span><br><span class=\"line\">###提示  </span><br><span class=\"line\">因为这个看似复杂的过程存在，所以客户端不用关心服务器是否支持websocket。另外，该过程的重要性还是在于安全性，如果一个服务器将一个Websocket连接作为http请求解析的话，将会有不小的问题。   </span><br><span class=\"line\"></span><br><span class=\"line\">因此，如果key是&quot;dGhlIHNhbXBsZSBub25jZQ==&quot;，Accept将会是&quot;s3pPLMBiTxaQ9kYGzzhZRbK+xOo=&quot;，一旦服务器发送这些消息头，握手协议就完成了。   </span><br><span class=\"line\"></span><br><span class=\"line\">服务器在回复握手之前，可以发送其他的header像Set-Cookie、要求签名、重定向等。   </span><br><span class=\"line\"></span><br><span class=\"line\">## 跟踪客户端  </span><br><span class=\"line\"></span><br><span class=\"line\">虽然并不直接与Websocket协议相关，但值得我们注意。服务器将会跟踪客户端的sockets，因此我们不必和已经完成握手协议的客户端再次进行握手。相同客户端的IP地址可以尝试多次连接(但是服务器可以选择拒绝，如果他们尝试多次连接以达到保存自己Denial-of-Service 踪迹的目的)  </span><br><span class=\"line\"></span><br><span class=\"line\">## FramesEdit 数据交换  </span><br><span class=\"line\"></span><br><span class=\"line\">客户端和服务器都可以在任意时间发送消息、这正是websocket的魔力所在。然而从数据帧中提取信息的过程就不那么充满魔力了。尽管所有的帧遵循相同的特定格式，从客户端发到服务器的数据通过X异或加密 (使用32位的密钥)进行处理，该规范的第五章详细描述了相关内容。</span><br><span class=\"line\"> </span><br><span class=\"line\">     </span><br><span class=\"line\">## 格式  </span><br><span class=\"line\">每个从客户端发送到服务器的数据帧遵循下面的格式：  </span><br><span class=\"line\">  </span><br><span class=\"line\">```  </span><br><span class=\"line\">    帧格式:  </span><br><span class=\"line\">​​</span><br><span class=\"line\">      0                   1                   2                   3</span><br><span class=\"line\">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class=\"line\">     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class=\"line\">     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class=\"line\">     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class=\"line\">     | |1|2|3|       |K|             |                               |</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |     Extended payload length continued, if payload len == 127  |</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class=\"line\">     |                               |Masking-key, if MASK set to 1  |</span><br><span class=\"line\">     +-------------------------------+-------------------------------+</span><br><span class=\"line\">     | Masking-key (continued)       |          Payload Data         |</span><br><span class=\"line\">     +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     :                     Payload Data continued ...                :</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |                     Payload Data continued ...                |</span><br><span class=\"line\">     +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>MASK (掩码:一串二进制代码对目标字段进行位与运算，屏蔽当前的输入位。)位只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1(事实上5.1节表明，如果客户端发送未掩码处理的消息，服务器必须断开连接)当发送一个帧至客户端时，不要处理数据并且不设置mask位。下面将会阐述原因。注意：我们必须处理消息即使用一个安全的socket。RSV1-3可以被忽略，这是待扩展位。   </p>\n<p>opcode字段定义如何解析有效的数据：  </p>\n<ul>\n<li>0x0 继续处理</li>\n<li>0x1 text(必须是UTF-8编码)  </li>\n<li>0x2 二进制 和其他叫做控制代码的数据。</li>\n<li>0x3-0x7 0xB-0xF 该版本的WebSockets无意义   </li>\n</ul>\n<p>FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。   </p>\n<h2 id=\"有效编码数据长度\"><a href=\"#有效编码数据长度\" class=\"headerlink\" title=\"有效编码数据长度\"></a>有效编码数据长度</h2><p>为了解析有效编码数据，我们必须知道何时结束。这是知道有效数据长度的重要所在。不幸的是，有一些复杂。让我们分步骤来看。  </p>\n<ol>\n<li>阅读9-15位并且作为无符号整数解释，如果是小于等于125，这就是数据的长度。如果是126，请继续步骤2,如果是127请阅读，步骤3   </li>\n<li>阅读后面16位并且作为无符号整数解读，结束  </li>\n<li>阅读后面64位并且作为无符号整数解读，结束    </li>\n</ol>\n<h2 id=\"读取并反掩码数据\"><a href=\"#读取并反掩码数据\" class=\"headerlink\" title=\"读取并反掩码数据\"></a>读取并反掩码数据</h2><p>如果MASK位被设置(当然它应该被设置，对于一个从客户端到服务器的消息)，读取后4字节（即32位），即加密的key。一旦数据长度和加密key被解码，我们可以直接从socket中读取成批的字节。获取编码的数据和掩码key，将其解码，循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算，如果用js就如下所示(该规则就是加密解密的规则而已，没必要深究，大家知道如何使用就好)。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DECODED = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ENCODED.length; i++) &#123;</span><br><span class=\"line\">        DECODED[i] = ENCODED[i] ^ MASK[i % <span class=\"number\">4</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">现在我们可以知道我们应用上解码之后的数据具体含义了。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 消息分割</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">FIN和opcode字段共同工作来讲一个消息分解为单独的帧，该过程叫做消息分割，只有在opcodes为0x0-0x2时才可用（前面也提到，当前版本其他数值无意义）。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">回想一下，opcode指明了一个帧的将要做什么，如果是0x1，数据是text。如果是0x2，诗句是二进制数据。然而当其为0x0时，该帧是一个继续帧，表示服务器应该将该帧的有效数据和服务器收到的最后一帧链接起来。这是一个草图，指明了当客户端发送text消息时，第一个消息在一个单独的帧里发送，然而第二个消息却包括三个帧，服务器如何反应。FIN和opcode细节仅仅对客户端展示。看一下下面的例子应该会更容易理解。</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>   </span><br><span class=\"line\">Client: FIN=<span class=\"number\">1</span>, opcode=<span class=\"number\">0x1</span>, msg=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\">Server: (消息传输过程完成) Hi.</span><br><span class=\"line\">Client: FIN=<span class=\"number\">0</span>, opcode=<span class=\"number\">0x1</span>, msg=<span class=\"string\">\"and a\"</span></span><br><span class=\"line\">Server: (监听，新的消息包含开始的文本)</span><br><span class=\"line\">Client: FIN=<span class=\"number\">0</span>, opcode=<span class=\"number\">0x0</span>, msg=<span class=\"string\">\"happy new\"</span></span><br><span class=\"line\">Server: (监听，有效数据与上面的消息拼接)</span><br><span class=\"line\">Client: FIN=<span class=\"number\">1</span>, opcode=<span class=\"number\">0x0</span>, msg=<span class=\"string\">\"year!\"</span></span><br><span class=\"line\">Server: (消息传输完成) Happy <span class=\"keyword\">new</span> year to you too!</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">注意:第一帧包括一个完全的消息(FIN=1并且opcode!=0x0)，因此当服务器发现结束时可以返回。第二帧有效数据为text(opcode=0x1)，但是完整的消息没有到达(FIN=0)。该消息所有剩下的部分通过继续帧发送(opcode=0x0)，并且最后以帧通过FIN=1表明身份。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## WebSockets 的心跳：ping和pong  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">在握手接受之后的任意点，不论是客户端还是服务器都可以选择发送ping给另一部分。当ping被接收时，接收方必须尽可能的返回一个pong。我们可以用该方式来确保连接依然有效。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">一个ping或者pong只是一个规则的帧，但是是控制帧，Pings的opcode为0x9，pong是0xA。当我们得到ping时，返回具有完全相同有效数据的pong。(对ping和pong而言，最大有效数据长度是125)我们可能在没有发送ping的情况下，得到一个pong。这种情况请忽略。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">在发送pong之前，如果我们接收到不止一个ping，只需回应一个pong即可。  </span></span><br><span class=\"line\"><span class=\"string\">## 关闭连接  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">要关闭客户端和服务器之间的连接，我们可以发送一个包含特定控制队列的数据的控制帧来开始关闭的握手协议。当接收到该帧时，另一方发送一个关闭帧作为回应。然后前者会关闭连接。关闭连接之后接收到的数据都会被丢弃。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 更多  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">WebSocket 扩展和子协议在握手过程中通过headers进行约定。有时扩展和子协议太近似了以致于难以分别。最基本的区别是，扩展控制websocket 帧并且修改有效数据。然而子协议构成websocket有效数据并且从不修改任何事物。扩展是可选的广义的，子协议是必须的局限性的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 扩展 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">将扩展看作压缩一个文件在发送之前，无论你如何做，你将发送相同的数据只不过帧不同而已。收件人最终将会受到与你本地拷贝相同的数据，不过以不同方式发送。这就是扩展做的事情。websockets定义了一个协议和基本的方式去发送数据，然而扩展例如压缩可以以更短的帧来阿松相同的数据。 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 子协议  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">将子协议看作定做的xml表或者文档类型说明。你在使用XML和它的语法，但是你被限制于你同意的结构。WebSocket子协议就是如此。他们不介绍其他一些华丽的东西，仅仅建立结构，像一个文档类型和表一样，两个部分(client &amp; server)都同意该协议,和文档类型和表不同，子协议由服务器实现并且客户端不能对外引用。  </span></span><br><span class=\"line\"><span class=\"string\">一个客户端必须请求特定的子协议，为了达到目的，将会发送一些像下面的内容作为原始握手的一部分。</span></span><br></pre></td></tr></table></figure>\n<p>GET /chat HTTP/1.1<br>…<br>Sec-WebSocket-Protocol: soap, wamp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">或者等价的写法</span><br></pre></td></tr></table></figure></p>\n<p>…<br>Sec-WebSocket-Protocol: soap<br>Sec-WebSocket-Protocol: wamp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">现在，服务器必须选择客户端建议并且支持的一种协议。如果多余一个，发送客户端发送过来的第一个。想象我们的服务器可以使用soap和wamp中的一个，然后，返回的握手中将会发送如下形式。</span><br></pre></td></tr></table></figure></p>\n<p>Sec-WebSocket-Protocol: soap<br>```</p>\n<p>服务器不能发送超过一个的Sec-Websocket-Protocol消息头，如果服务器不想使用任一个子协议，应该不发送Sec-WebSocket-Protocol 消息头。发送一个空白的消息头是错误的。客户端可能会关闭连接如果不能获得期望的子协议。    </p>\n<p>如果我们希望我们的服务器遵守一定的子协议，自然地在我们的服务器需要额外的代码。想象我们使用一个子协议json，基于该子协议，所有的数据将会作为JSON传递，如果一个客户端征求子协议并且服务器想使用它，服务你需要有一个JSON解析。实话实说，将会有一个工具库，但是服务器也要需要传递数据。</p>\n<p>为了避免名称冲突，推荐选用domain的一部分作为子协议的名称。如果我们开发一个使用特定格式的聊天app，我们可能使用这样的名字:Sec-WebSocket-Protocol: chat.example.com  注意，这不是必须的。仅仅是一个可选的惯例，我们可以使用我们想用的任意字符。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>翻译这篇文档的初衷是看到关于websocket的中文大部分都是客户端相关的内容，自己又对服务器端的实现感兴趣，没有找到合适的资料，就只好自己阅读下英文，本着提高自己的目的将其翻译下来，希望对其他同学有所帮助，<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/tree/master/src/websocket\" target=\"_blank\" rel=\"noopener\">原文查看</a> 。后面请期待node实现websocket服务器的实践篇。</p>\n<h2 id=\"源文档出处\"><a href=\"#源文档出处\" class=\"headerlink\" title=\"源文档出处\"></a>源文档出处</h2><p>翻译自MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" target=\"_blank\" rel=\"noopener\">Writing WebSocket servers</a></p>\n","site":{"data":{}},"excerpt":"<p>本文是Writing WebSocket servers的中文文档，翻译自MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" target=\"_blank\" rel=\"noopener\">Writing WebSocket servers</a>。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。<br>","more":"</p>\n<h2 id=\"websocket服务器的本质\"><a href=\"#websocket服务器的本质\" class=\"headerlink\" title=\"websocket服务器的本质\"></a>websocket服务器的本质</h2><p>WebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建一个定制服务器的任务通常会让让人们感到害怕。然而基于实现一个简单的Websocket服务器没有那么麻烦。   </p>\n<p>一个WebSocket server可以使用任意的服务端编程语言来实现，只要该语言能实现基本的Berkeley sockets（伯克利套接字）。例如c(++)、Python、PHP、服务端JavaScript(node.js)。下面不是关于特定语言的教程，而是一个促进我们搭建自己服务器的指南。   </p>\n<p>我们需要明白http如何工作并且有中等编程经验。基于特定语言的支持，了解TCP sockets 同样也是必要的。该篇教程的范围是介绍开发一个WebSocket server需要的最少知识。   </p>\n<p>该文章将会从很底层的观点来解释一个 WebSocket server。WebSocket servers 通常是独立的专门的servers(因为负载均衡和其他一些原因),因此通常使用一个反向代理（例如一个标准的HTTP server）来发现 WebSocket握手协议，预处理他们然后将客户端信息发送给真正的WebSocket server。这意味着WebSocket server不必充斥这cookie和签名的处理方法。完全可以放在代理中处理。   </p>\n<h2 id=\"websocket-握手规则\"><a href=\"#websocket-握手规则\" class=\"headerlink\" title=\"websocket 握手规则\"></a>websocket 握手规则</h2><p>首先，服务器必须使用标准的TCPsocket来监听即将到来的socket连接。基于我们的平台，这些很可能被我们处理了(成熟的服务端语言提供了这些接口，使我们不必从头做起)。例如，假设我们的服务器监听example.com的8000端口，socket server响应/chat的GET请求。   </p>\n<p>警告：服务器可以选择监听任意端口，但是如果在80或443之外，可能会遇到防火墙或者代理的问题。443端口大多数情况下是可以的，当然需要一个安全连接(TLS/SSL)。此外，注意这一点，大多数浏览器不允许从安全的页面连接到不安全的Websocket服务器。<br>在WebSockets中握手是web，是HTTP想WS转化的桥梁。通过握手，连接的详情会被判断，并且在完成之前每一个部分都可以终端如果条件不满足。服务器必须谨慎解析客户端请求的所有信息，否则安全问题将会发生。  </p>\n<h2 id=\"客户端握手请求\"><a href=\"#客户端握手请求\" class=\"headerlink\" title=\"客户端握手请求\"></a>客户端握手请求</h2><p>尽管我们在开发一个服务器，客户端仍然需要发起一个Websocket握手过程。因此我们必须知道如何解析客户端的请求。客户端将会发送一个标准的HTTP请求，大概像下面的例子(HTTP版本必须1.1及以上，请求方式为GET)。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    GET /chat HTTP/1.1</span><br><span class=\"line\">    Host: example.com:8000</span><br><span class=\"line\">    Upgrade: websocket</span><br><span class=\"line\">    Connection: Upgrade</span><br><span class=\"line\">    Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span><br><span class=\"line\">    Sec-WebSocket-Version: 13  </span><br><span class=\"line\">```     </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">此处客户端可以发起扩展或者子协议，在[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)查看更多细节。同样，公共的headers像User-Agent, Referer, Cookie, or authentication等同样可以包括，一句话做你想做的。这些并不直接和WebSocket相关，忽略掉他们也是安全的，在很多公共的设置中，会有一个代理服务器来处理这些信息。 </span><br><span class=\"line\"></span><br><span class=\"line\">如果有的header不被识别或者有非法值，服务器应该发送&apos;400 Bad Request&apos;并立刻关闭socket，通常也会在HTTP返回体中给出握手失败的原因，不过这些信息可能不会被展示(因为浏览器不会展示他们)。如果服务器不识别WebSockets的版本，应该返回一个Sec-WebSocket-Version 消息头，指明可以接受的版本(最好是V13,及最新)。下面一起看一下最神秘的消息头Sec-WebSocket-Key。    </span><br><span class=\"line\"></span><br><span class=\"line\">### 提示：</span><br><span class=\"line\">* 所有的浏览器将会发送一个Origin header,我们可以使用这个header来做安全限制（检查是否相同的origin）如果并不是期望的origin返回一个403 Forbidden。然后注意下那些非浏览器的客户端可以发送一个伪造的origin，很多应用将会拒绝没有该消息头的请求。  </span><br><span class=\"line\">* 请求资源定位符(这里的/chat)在规范中没有明确的定义，所以很多人巧妙的使用它，让一个服务器处理多个WebSocket 应用。例如，example.com/chat可以指向一个多用户聊天app，而相同服务器上的/game指向多用户的游戏。即[相同域名下的路径可以指向不同应用]()。   </span><br><span class=\"line\">* 规范的HTTP code只可以在握手之前使用，当握手成功之后，应该使用不同的code集合。请查看规范第7.4节   </span><br><span class=\"line\"></span><br><span class=\"line\">## 服务器握手返回  </span><br><span class=\"line\"></span><br><span class=\"line\">当服务器接受到请求时，应该发送一个相当奇怪的响应，看起来大概这个样子，不过仍然遵循HTTP规范。 请注意每一个header以\\r\\n结尾并且在最后一个后面加入额外的\\r\\n。 </span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\">    HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">    Upgrade: websocket</span><br><span class=\"line\">    Connection: Upgrade</span><br><span class=\"line\">    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">此外，服务器可以在这里决定扩展或者子协议请求。更多详情请查看[Miscellaneous](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous)。Sec-WebSocket-Accept 部分很有趣，服务器必须基于客户端请求的Sec-WebSocket-Key 中得到它，具体做法如下：将Sec-WebSocket-Key 和&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;链接，通过SHA-1 hash获得结果，然后返回该结果的base64编码。</span><br><span class=\"line\"></span><br><span class=\"line\">###提示  </span><br><span class=\"line\">因为这个看似复杂的过程存在，所以客户端不用关心服务器是否支持websocket。另外，该过程的重要性还是在于安全性，如果一个服务器将一个Websocket连接作为http请求解析的话，将会有不小的问题。   </span><br><span class=\"line\"></span><br><span class=\"line\">因此，如果key是&quot;dGhlIHNhbXBsZSBub25jZQ==&quot;，Accept将会是&quot;s3pPLMBiTxaQ9kYGzzhZRbK+xOo=&quot;，一旦服务器发送这些消息头，握手协议就完成了。   </span><br><span class=\"line\"></span><br><span class=\"line\">服务器在回复握手之前，可以发送其他的header像Set-Cookie、要求签名、重定向等。   </span><br><span class=\"line\"></span><br><span class=\"line\">## 跟踪客户端  </span><br><span class=\"line\"></span><br><span class=\"line\">虽然并不直接与Websocket协议相关，但值得我们注意。服务器将会跟踪客户端的sockets，因此我们不必和已经完成握手协议的客户端再次进行握手。相同客户端的IP地址可以尝试多次连接(但是服务器可以选择拒绝，如果他们尝试多次连接以达到保存自己Denial-of-Service 踪迹的目的)  </span><br><span class=\"line\"></span><br><span class=\"line\">## FramesEdit 数据交换  </span><br><span class=\"line\"></span><br><span class=\"line\">客户端和服务器都可以在任意时间发送消息、这正是websocket的魔力所在。然而从数据帧中提取信息的过程就不那么充满魔力了。尽管所有的帧遵循相同的特定格式，从客户端发到服务器的数据通过X异或加密 (使用32位的密钥)进行处理，该规范的第五章详细描述了相关内容。</span><br><span class=\"line\"> </span><br><span class=\"line\">     </span><br><span class=\"line\">## 格式  </span><br><span class=\"line\">每个从客户端发送到服务器的数据帧遵循下面的格式：  </span><br><span class=\"line\">  </span><br><span class=\"line\">```  </span><br><span class=\"line\">    帧格式:  </span><br><span class=\"line\">​​</span><br><span class=\"line\">      0                   1                   2                   3</span><br><span class=\"line\">      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class=\"line\">     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class=\"line\">     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span><br><span class=\"line\">     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span><br><span class=\"line\">     | |1|2|3|       |K|             |                               |</span><br><span class=\"line\">     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |     Extended payload length continued, if payload len == 127  |</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class=\"line\">     |                               |Masking-key, if MASK set to 1  |</span><br><span class=\"line\">     +-------------------------------+-------------------------------+</span><br><span class=\"line\">     | Masking-key (continued)       |          Payload Data         |</span><br><span class=\"line\">     +-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     :                     Payload Data continued ...                :</span><br><span class=\"line\">     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class=\"line\">     |                     Payload Data continued ...                |</span><br><span class=\"line\">     +---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>MASK (掩码:一串二进制代码对目标字段进行位与运算，屏蔽当前的输入位。)位只表明信息是否已进行掩码处理。来自客户端的消息必须经过处理，因此我们应该将其置为1(事实上5.1节表明，如果客户端发送未掩码处理的消息，服务器必须断开连接)当发送一个帧至客户端时，不要处理数据并且不设置mask位。下面将会阐述原因。注意：我们必须处理消息即使用一个安全的socket。RSV1-3可以被忽略，这是待扩展位。   </p>\n<p>opcode字段定义如何解析有效的数据：  </p>\n<ul>\n<li>0x0 继续处理</li>\n<li>0x1 text(必须是UTF-8编码)  </li>\n<li>0x2 二进制 和其他叫做控制代码的数据。</li>\n<li>0x3-0x7 0xB-0xF 该版本的WebSockets无意义   </li>\n</ul>\n<p>FIN 表明是否是数据集合的最后一段消息，如果为0，服务器继续监听消息，以待消息剩余的部分。否则服务器认为消息已经完全发送。   </p>\n<h2 id=\"有效编码数据长度\"><a href=\"#有效编码数据长度\" class=\"headerlink\" title=\"有效编码数据长度\"></a>有效编码数据长度</h2><p>为了解析有效编码数据，我们必须知道何时结束。这是知道有效数据长度的重要所在。不幸的是，有一些复杂。让我们分步骤来看。  </p>\n<ol>\n<li>阅读9-15位并且作为无符号整数解释，如果是小于等于125，这就是数据的长度。如果是126，请继续步骤2,如果是127请阅读，步骤3   </li>\n<li>阅读后面16位并且作为无符号整数解读，结束  </li>\n<li>阅读后面64位并且作为无符号整数解读，结束    </li>\n</ol>\n<h2 id=\"读取并反掩码数据\"><a href=\"#读取并反掩码数据\" class=\"headerlink\" title=\"读取并反掩码数据\"></a>读取并反掩码数据</h2><p>如果MASK位被设置(当然它应该被设置，对于一个从客户端到服务器的消息)，读取后4字节（即32位），即加密的key。一旦数据长度和加密key被解码，我们可以直接从socket中读取成批的字节。获取编码的数据和掩码key，将其解码，循环遍历加密的字节（octets，text数据的单位）并且将其与第（i%4）位掩码字节(即i除以4取余)进行异或运算，如果用js就如下所示(该规则就是加密解密的规则而已，没必要深究，大家知道如何使用就好)。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DECODED = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ENCODED.length; i++) &#123;</span><br><span class=\"line\">        DECODED[i] = ENCODED[i] ^ MASK[i % <span class=\"number\">4</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">现在我们可以知道我们应用上解码之后的数据具体含义了。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 消息分割</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">FIN和opcode字段共同工作来讲一个消息分解为单独的帧，该过程叫做消息分割，只有在opcodes为0x0-0x2时才可用（前面也提到，当前版本其他数值无意义）。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">回想一下，opcode指明了一个帧的将要做什么，如果是0x1，数据是text。如果是0x2，诗句是二进制数据。然而当其为0x0时，该帧是一个继续帧，表示服务器应该将该帧的有效数据和服务器收到的最后一帧链接起来。这是一个草图，指明了当客户端发送text消息时，第一个消息在一个单独的帧里发送，然而第二个消息却包括三个帧，服务器如何反应。FIN和opcode细节仅仅对客户端展示。看一下下面的例子应该会更容易理解。</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>   </span><br><span class=\"line\">Client: FIN=<span class=\"number\">1</span>, opcode=<span class=\"number\">0x1</span>, msg=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\">Server: (消息传输过程完成) Hi.</span><br><span class=\"line\">Client: FIN=<span class=\"number\">0</span>, opcode=<span class=\"number\">0x1</span>, msg=<span class=\"string\">\"and a\"</span></span><br><span class=\"line\">Server: (监听，新的消息包含开始的文本)</span><br><span class=\"line\">Client: FIN=<span class=\"number\">0</span>, opcode=<span class=\"number\">0x0</span>, msg=<span class=\"string\">\"happy new\"</span></span><br><span class=\"line\">Server: (监听，有效数据与上面的消息拼接)</span><br><span class=\"line\">Client: FIN=<span class=\"number\">1</span>, opcode=<span class=\"number\">0x0</span>, msg=<span class=\"string\">\"year!\"</span></span><br><span class=\"line\">Server: (消息传输完成) Happy <span class=\"keyword\">new</span> year to you too!</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">注意:第一帧包括一个完全的消息(FIN=1并且opcode!=0x0)，因此当服务器发现结束时可以返回。第二帧有效数据为text(opcode=0x1)，但是完整的消息没有到达(FIN=0)。该消息所有剩下的部分通过继续帧发送(opcode=0x0)，并且最后以帧通过FIN=1表明身份。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## WebSockets 的心跳：ping和pong  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">在握手接受之后的任意点，不论是客户端还是服务器都可以选择发送ping给另一部分。当ping被接收时，接收方必须尽可能的返回一个pong。我们可以用该方式来确保连接依然有效。  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">一个ping或者pong只是一个规则的帧，但是是控制帧，Pings的opcode为0x9，pong是0xA。当我们得到ping时，返回具有完全相同有效数据的pong。(对ping和pong而言，最大有效数据长度是125)我们可能在没有发送ping的情况下，得到一个pong。这种情况请忽略。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">在发送pong之前，如果我们接收到不止一个ping，只需回应一个pong即可。  </span></span><br><span class=\"line\"><span class=\"string\">## 关闭连接  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">要关闭客户端和服务器之间的连接，我们可以发送一个包含特定控制队列的数据的控制帧来开始关闭的握手协议。当接收到该帧时，另一方发送一个关闭帧作为回应。然后前者会关闭连接。关闭连接之后接收到的数据都会被丢弃。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 更多  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">WebSocket 扩展和子协议在握手过程中通过headers进行约定。有时扩展和子协议太近似了以致于难以分别。最基本的区别是，扩展控制websocket 帧并且修改有效数据。然而子协议构成websocket有效数据并且从不修改任何事物。扩展是可选的广义的，子协议是必须的局限性的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 扩展 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">将扩展看作压缩一个文件在发送之前，无论你如何做，你将发送相同的数据只不过帧不同而已。收件人最终将会受到与你本地拷贝相同的数据，不过以不同方式发送。这就是扩展做的事情。websockets定义了一个协议和基本的方式去发送数据，然而扩展例如压缩可以以更短的帧来阿松相同的数据。 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 子协议  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">将子协议看作定做的xml表或者文档类型说明。你在使用XML和它的语法，但是你被限制于你同意的结构。WebSocket子协议就是如此。他们不介绍其他一些华丽的东西，仅仅建立结构，像一个文档类型和表一样，两个部分(client &amp; server)都同意该协议,和文档类型和表不同，子协议由服务器实现并且客户端不能对外引用。  </span></span><br><span class=\"line\"><span class=\"string\">一个客户端必须请求特定的子协议，为了达到目的，将会发送一些像下面的内容作为原始握手的一部分。</span></span><br></pre></td></tr></table></figure>\n<p>GET /chat HTTP/1.1<br>…<br>Sec-WebSocket-Protocol: soap, wamp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">或者等价的写法</span><br></pre></td></tr></table></figure></p>\n<p>…<br>Sec-WebSocket-Protocol: soap<br>Sec-WebSocket-Protocol: wamp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">现在，服务器必须选择客户端建议并且支持的一种协议。如果多余一个，发送客户端发送过来的第一个。想象我们的服务器可以使用soap和wamp中的一个，然后，返回的握手中将会发送如下形式。</span><br></pre></td></tr></table></figure></p>\n<p>Sec-WebSocket-Protocol: soap<br>```</p>\n<p>服务器不能发送超过一个的Sec-Websocket-Protocol消息头，如果服务器不想使用任一个子协议，应该不发送Sec-WebSocket-Protocol 消息头。发送一个空白的消息头是错误的。客户端可能会关闭连接如果不能获得期望的子协议。    </p>\n<p>如果我们希望我们的服务器遵守一定的子协议，自然地在我们的服务器需要额外的代码。想象我们使用一个子协议json，基于该子协议，所有的数据将会作为JSON传递，如果一个客户端征求子协议并且服务器想使用它，服务你需要有一个JSON解析。实话实说，将会有一个工具库，但是服务器也要需要传递数据。</p>\n<p>为了避免名称冲突，推荐选用domain的一部分作为子协议的名称。如果我们开发一个使用特定格式的聊天app，我们可能使用这样的名字:Sec-WebSocket-Protocol: chat.example.com  注意，这不是必须的。仅仅是一个可选的惯例，我们可以使用我们想用的任意字符。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>翻译这篇文档的初衷是看到关于websocket的中文大部分都是客户端相关的内容，自己又对服务器端的实现感兴趣，没有找到合适的资料，就只好自己阅读下英文，本着提高自己的目的将其翻译下来，希望对其他同学有所帮助，<a href=\"https://github.com/xiaoxiangdaiyu/chartroom/tree/master/src/websocket\" target=\"_blank\" rel=\"noopener\">原文查看</a> 。后面请期待node实现websocket服务器的实践篇。</p>\n<h2 id=\"源文档出处\"><a href=\"#源文档出处\" class=\"headerlink\" title=\"源文档出处\"></a>源文档出处</h2><p>翻译自MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" target=\"_blank\" rel=\"noopener\">Writing WebSocket servers</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}